var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,0.072,1,0.816]],["body/components/AboutComponent.html",[0,0.116,1,1,2,0.087,3,0.076,4,0.579,5,0.579,6,0.579,7,0.065,8,1.686,9,0.344,10,1.697,11,1.266,12,0.773,13,1.074,14,3.395,15,1.564,16,0.579,17,2.07,18,0.929,19,3.151,20,0.929,21,3.151,22,0.374,23,0.664,24,4.522,25,5.289,26,1.414,27,1.864,28,0.975,29,3.887,30,1.791,31,4.522,32,3.949,33,0.579,34,1.962,35,3.029,36,0.504,37,3.151,38,0.637,39,0.019,40,1.043,41,0.862,42,0.501,43,1.945,44,1.962,45,1.702,46,2.353,47,5.289,48,3.691,49,1.562,50,5.963,51,2.709,52,1.212,53,1.333,54,1.962,55,1.387,56,1.962,57,2.357,58,1.465,59,2.709,60,1.387,61,1.962,62,1.962,63,3.395,64,3.887,65,1.026,66,1.649,67,1.962,68,2.709,69,1.532,70,1.962,71,1.128,72,1.387,73,1.783,74,2.469,75,1.487,76,1.486,77,0.198,78,0.087,79,0.552,80,0.702,81,0.076,82,0.044,83,1.962,84,1.369,85,1.962,86,3.151,87,0.777,88,0.777,89,0.552,90,0.637,91,1.686,92,1.962,93,1.962,94,0.912,95,1.962,96,1.962,97,4.516,98,1.962,99,0.975,100,1.962,101,1.962,102,1.962,103,1.962,104,1.962,105,0.912,106,3.151,107,1.505,108,0.669,109,3.469,110,1.816,111,2.417,112,3.157,113,0.891,114,1.703,115,3.231,116,4.006,117,2.026,118,2.026,119,3.156,120,1.552,121,4.057,122,2.709,123,1.757,124,1.524,125,3.887,126,3.432,127,3.867,128,2.709,129,2.417,130,2.709,131,2.709,132,2.417,133,2.417,134,2.709,135,2.907,136,3.151,137,2.2,138,3.151,139,2.949,140,2.767,141,3.151,142,3.151,143,3.151,144,3.157,145,3.151,146,3.014,147,4.522,148,3.151,149,2.026,150,5.779,151,1.649,152,2.709,153,2.026,154,2.709,155,2.709,156,2.417,157,2.709,158,2.709,159,2.417,160,2.2,161,3.673,162,2.709,163,1.328,164,2.767,165,3.151,166,3.151,167,1.881,168,3.652,169,3.151,170,2.846,171,4.271,172,4.967,173,4.522,174,2.2,175,2.699,176,3.658,177,3.151,178,3.151,179,0.845,180,2.767,181,3.201,182,3.151,183,4.057,184,3.151,185,3.157,186,2.2,187,1.387,188,2.417,189,3.151,190,2.709,191,3.151,192,0.929,193,4.522,194,2.2,195,4.522,196,5.289,197,3.151,198,2.417,199,1.465,200,4.033,201,4.885,202,2.2,203,3.023,204,3.715,205,3.151,206,4.433,207,4.522,208,2.2,209,3.151,210,1.165,211,3.151,212,1.649,213,2.417,214,3.151,215,2.026,216,3.151,217,3.156,218,1.881,219,2.949,220,2.699,221,2.709,222,2.709,223,3.151,224,2.709,225,3.151,226,2.417,227,1.552,228,2.417,229,2.709,230,0.011,231,0.24,232,0.929,233,0.929,234,1.333,235,0.579,236,0.579,237,0.478,238,0.929,239,0.478,240,0.579,241,0.478,242,0.579,243,0.478,244,1.333,245,0.455,246,0.929,247,0.478,248,0.579,249,0.478,250,0.455,251,0.526,252,0.478,253,0.579,254,0.478,255,0.579,256,0.478,257,0.552,258,0.579,259,0.455,260,0.579,261,0.455,262,0.478,263,0.552,264,0.478,265,0.579,266,0.478,267,0.579,268,0.455,269,0.478,270,0.579,271,0.501,272,0.579,273,0.008]],["title/modules/AboutModule.html",[274,0.251,275,2.372]],["body/modules/AboutModule.html",[0,0.126,1,1.629,2,0.21,3,0.184,7,0.158,9,0.293,11,1.521,36,0.519,39,0.019,77,0.377,78,0.21,81,0.231,82,0.107,90,1.538,179,1.27,192,1.397,230,0.014,231,0.581,273,0.014,274,0.479,275,4.736,276,1.332,277,2.113,278,1.466,279,4.072,280,4.072,281,4.072,282,4.614,283,1.932,284,1.538,285,4.738,286,1.932,287,2.619,288,1.193,289,1.585,290,2.131,291,1.538,292,1.673,293,2.131,294,1.615,295,1.332,296,2.619,297,0.998,298,2.483,299,2.619,300,1.976,301,1.976,302,2.357,303,1.976,304,4.072,305,1.976,306,1.976,307,1.932,308,2.085,309,1.876,310,4.072,311,4.072,312,4.738]],["title/modules/AboutRoutingModule.html",[274,0.251,282,2.372]],["body/modules/AboutRoutingModule.html",[0,0.125,1,1.527,2,0.241,3,0.21,7,0.18,39,0.019,43,3.522,75,1.523,77,0.358,78,0.241,79,1.523,81,0.251,82,0.122,99,1.676,230,0.016,273,0.016,274,0.497,282,4.153,288,1.086,289,1.258,292,1.816,311,4.657,313,5.418,314,2.313,315,4.657,316,4.156,317,2.834,318,4.657]],["title/components/AppComponent.html",[0,0.072,237,0.899]],["body/components/AppComponent.html",[0,0.138,1,0.83,2,0.167,3,0.145,4,1.106,5,1.106,6,1.106,7,0.125,9,0.232,10,1.484,11,0.959,12,1.006,13,1.741,15,2.3,16,1.106,17,2.244,18,1.506,20,1.506,22,0.715,23,1.076,26,2.336,27,2.347,28,1.58,30,2.469,33,1.506,36,0.569,38,1.218,39,0.019,40,1.223,41,1.107,42,0.959,45,1.922,46,2.675,49,1.436,52,1.369,53,1.506,55,2.248,69,2.018,71,1.829,73,0.914,77,0.291,78,0.167,80,1.343,81,0.145,82,0.085,87,1.485,88,1.485,89,1.055,99,1.161,110,1.006,112,3.722,113,0.775,114,1.186,124,0.959,163,1.006,164,2.672,167,3.049,210,1.106,212,2.672,227,2.516,230,0.012,231,0.46,232,1.506,233,1.506,234,1.839,235,1.106,236,1.106,237,1.519,238,1.506,239,0.914,240,1.106,241,0.914,242,1.106,243,0.914,244,1.839,245,0.871,246,1.506,247,0.914,248,1.106,249,0.914,250,0.871,251,1.006,252,0.914,253,1.106,254,0.914,255,1.106,256,0.914,257,1.055,258,1.106,259,0.871,260,1.106,261,0.871,262,0.914,263,1.055,264,0.914,265,1.106,266,0.914,267,1.106,268,0.871,269,0.914,270,1.106,271,0.959,272,1.106,273,0.012,295,1.753,317,2.672,319,3.225,320,2.9,321,3.284,322,3.565,323,3.918,324,2.423,325,3.284,326,5.108,327,5.108,328,3.753,329,2.601,330,3.751,331,5.786,332,3.84,333,5.108,334,3.751,335,3.751,336,3.751,337,1.829,338,5.108,339,1.161,340,3.284,341,3.751,342,3.751,343,3.751,344,3.751,345,3.751,346,3.751,347,3.751]],["title/modules/AppModule.html",[274,0.251,348,2.372]],["body/modules/AppModule.html",[0,0.087,2,0.198,3,0.173,7,0.148,12,0.837,39,0.019,77,0.378,78,0.198,81,0.222,82,0.101,179,1.196,192,1.315,230,0.014,231,0.547,237,1.828,259,1.69,273,0.014,274,0.431,275,4.543,276,1.254,277,2.054,278,1.958,283,1.86,284,1.448,287,2.521,288,1.148,289,1.33,292,1.61,297,0.939,348,4.957,349,3.834,350,3.834,351,3.834,352,3.834,353,4.543,354,4.439,355,4.543,356,4.543,357,4.439,358,4.461,359,5.729,360,3.422,361,3.114,362,4.394,363,4.461,364,4.461,365,4.461,366,3.834,367,3.114,368,3.834,369,4.461,370,4.461,371,4.461,372,4.461,373,4.461,374,4.461]],["title/modules/AppRoutingModule.html",[274,0.251,353,2.372]],["body/modules/AppRoutingModule.html",[0,0.132,2,0.232,3,0.203,7,0.174,12,0.765,39,0.019,43,3.35,75,1.471,77,0.354,78,0.232,79,1.471,81,0.245,82,0.118,99,1.619,112,3.123,113,0.728,230,0.015,259,1.579,273,0.015,274,0.463,288,1.048,289,1.215,292,1.779,314,2.265,316,5.421,317,2.737,325,3.363,353,4.067,366,4.497,367,3.652,368,4.497,375,5.232,376,5.232,377,5.232,378,5.232,379,4.497,380,3.652,381,4.497,382,4.013,383,5.232]],["title/components/ButtonBarComponent.html",[0,0.072,239,0.899]],["body/components/ButtonBarComponent.html",[0,0.124,1,0.638,2,0.128,3,0.112,4,0.851,5,0.851,6,0.851,7,0.096,9,0.179,10,1.286,11,1.51,12,0.863,16,0.851,17,2.184,18,1.251,20,1.251,22,0.55,23,0.893,33,1.484,36,0.624,39,0.019,40,0.893,41,1.354,42,1.417,49,1.193,60,2.214,65,1.51,66,2.22,69,2.346,71,2.579,72,2.44,73,1.829,75,2.025,77,0.252,78,0.128,81,0.112,82,0.065,89,0.812,110,0.774,113,0.818,114,1.434,115,2.09,120,2.09,124,0.738,144,4.369,151,2.901,153,3.565,161,3.091,163,0.774,179,1.137,185,3.688,187,2.719,198,3.255,200,3.871,203,2.22,210,0.851,213,3.255,230,0.01,231,0.354,232,1.251,233,1.251,234,1.635,235,0.851,236,0.851,237,0.703,238,1.251,239,1.351,240,0.851,241,1.439,242,0.851,243,0.703,244,1.635,245,0.67,246,1.251,247,0.703,248,0.851,249,0.703,250,0.67,251,1.584,252,0.703,253,0.851,254,0.703,255,0.851,256,0.703,257,0.812,258,0.851,259,0.67,260,0.851,261,0.67,262,0.703,263,0.812,264,0.703,265,0.851,266,0.703,267,0.851,268,0.67,269,0.703,270,0.851,271,0.738,272,0.851,273,0.013,297,0.608,320,1.973,321,2.728,384,5.527,385,5.527,386,2.482,387,4.243,388,4.566,389,2.962,390,2.09,391,2.962,392,3.653,393,2.533,394,3.255,395,4.243,396,4.243,397,4.325,398,4.325,399,4.325,400,3.859,401,4.325,402,5.031,403,5.079,404,5.079,405,5.031,406,5.031,407,5.031,408,3.565,409,4.243,410,2.887,411,2.887,412,2.887,413,5.449,414,2.887,415,2.887,416,2.887,417,2.887,418,2.887,419,2.887,420,3.565,421,3.647,422,2.887,423,3.647,424,3.255,425,2.887,426,3.255,427,3.255,428,2.887,429,2.22,430,2.732,431,2.887,432,5.546,433,1.51,434,2.887,435,2.482]],["title/components/ButtonsComponent.html",[0,0.072,241,0.899]],["body/components/ButtonsComponent.html",[0,0.131,1,0.549,2,0.11,3,0.096,4,0.732,5,0.732,6,0.732,7,0.083,9,0.154,10,1.174,11,0.634,12,0.809,13,1.291,15,1.819,16,0.732,17,2.143,18,1.117,20,1.117,22,0.473,23,0.797,26,2.09,27,2.197,28,1.172,30,2.036,33,1.117,36,0.602,38,1.669,39,0.019,40,1.229,41,1.223,42,1.314,45,1.425,46,2.414,49,1.065,52,1.484,53,1.633,55,1.667,60,2.971,69,2.228,71,2.343,73,1.762,74,1.425,75,1.84,76,1.425,77,0.314,78,0.11,79,0.697,80,0.888,81,0.096,82,0.056,87,0.982,88,0.982,89,1.445,99,1.591,105,1.761,110,0.665,113,0.858,114,1.567,115,3.084,120,2.875,124,0.634,144,3.973,146,1.866,161,3.275,163,0.665,168,3.484,170,3.139,176,3.65,179,1.015,181,1.981,185,3.484,198,2.905,203,3.054,204,2.435,210,1.355,213,3.944,215,3.305,230,0.009,231,0.304,232,1.117,233,1.117,234,1.516,235,0.732,236,0.732,237,0.604,238,1.117,239,0.604,240,0.732,241,1.252,242,0.732,243,0.923,244,1.516,245,0.576,246,1.117,247,0.923,248,0.732,249,0.604,250,0.576,251,1.831,252,0.604,253,0.732,254,0.604,255,0.732,256,0.604,257,0.697,258,0.732,259,0.576,260,0.732,261,0.576,262,1.119,263,0.697,264,0.604,265,0.732,266,0.604,267,0.732,268,0.576,269,0.604,270,0.732,271,0.634,272,0.732,273,0.009,297,0.522,317,3.176,320,2.391,324,1.916,329,2.145,391,2.644,392,3.491,397,3.949,398,3.949,399,3.949,400,3.524,401,3.949,408,3.305,413,4.478,426,4.478,427,2.905,429,1.981,430,2.533,433,1.298,435,2.132,436,2.132,437,3.787,438,3.787,439,3.787,440,3.787,441,3.787,442,2.132,443,3.944,444,2.672,445,3.787,446,2.481,447,2.481,448,2.481,449,2.481,450,2.481,451,2.481,452,2.481,453,2.481,454,2.481,455,3.787,456,2.481,457,3.787,458,2.481,459,3.787,460,2.481,461,2.905,462,2.644,463,2.112,464,2.644,465,2.435,466,3.256,467,3.256,468,3.524,469,1.903,470,1.595,471,1.981,472,1.903,473,1.595,474,1.383,475,3.944,476,2.905,477,3.949,478,2.905,479,3.256,480,2.261,481,2.481,482,2.481,483,2.481,484,2.261,485,2.132,486,2.481,487,3.787,488,3.524,489,4.594,490,3.524,491,4.594,492,4.594,493,2.481,494,2.481,495,2.481,496,2.132,497,2.481,498,1.035,499,2.481,500,2.481]],["title/components/CompleteTaskComponent.html",[0,0.072,243,0.899]],["body/components/CompleteTaskComponent.html",[0,0.126,1,0.5,2,0.1,3,0.088,4,0.666,5,0.666,6,0.666,7,0.075,9,0.218,10,1.107,11,0.577,12,0.775,13,1.201,15,1.715,16,0.666,17,2.115,18,1.039,20,1.039,22,0.43,23,1.314,26,2.327,27,2.115,28,1.09,30,1.937,33,1.039,36,0.602,38,1.406,39,0.019,40,1.117,41,1.258,42,1.107,45,1.326,46,2.348,49,0.99,52,1.672,53,1.657,55,1.55,58,1.639,60,1.906,69,1.34,73,0.55,74,2.285,75,0.635,76,0.85,77,0.304,78,0.1,80,0.809,81,0.088,82,0.051,87,0.894,88,0.894,89,0.99,99,1.09,105,1.639,108,1.667,110,0.605,111,4.658,113,0.88,114,1.766,117,2.265,124,0.577,127,3.959,163,0.605,170,3.071,171,3.415,180,3.177,183,2.703,187,0.994,199,1.051,202,3.923,203,1.843,204,2.265,206,3.323,210,0.666,227,1.735,230,0.009,231,0.277,232,1.039,233,1.039,234,1.443,235,0.666,236,0.666,237,0.55,238,1.039,239,0.55,240,0.666,241,0.55,242,0.666,243,1.192,244,1.443,245,0.524,246,1.039,247,0.55,248,0.666,249,0.55,250,0.524,251,1.161,252,0.55,253,0.666,254,0.55,255,0.666,256,0.55,257,1.218,258,0.666,259,0.524,260,0.666,261,0.524,262,0.55,263,0.635,264,0.55,265,0.666,266,0.55,267,0.666,268,0.524,269,0.55,270,0.666,271,0.577,272,0.666,273,0.009,288,0.453,289,0.524,297,0.476,324,1.807,329,2.041,337,1.261,390,2.769,392,1.259,408,3.145,426,4.311,429,2.56,430,2.41,433,1.182,462,3.415,470,4.475,480,1.348,485,3.723,490,2.703,498,2.041,501,5.34,502,1.348,503,2.265,504,2.265,505,4.206,506,6.073,507,4.893,508,6.073,509,3.904,510,3.029,511,3.523,512,2.585,513,2.585,514,1.733,515,2.784,516,3.145,517,4.503,518,1.906,519,2.153,520,2.73,521,3.523,522,1.452,523,1.942,524,1.942,525,1.733,526,3.415,527,3.523,528,2.709,529,2.259,530,3.029,531,3.029,532,3.029,533,2.259,534,2.259,535,2.259,536,3.523,537,2.259,538,3.029,539,4.206,540,4.331,541,1.942,542,3.355,543,2.459,544,3.753,545,1.942,546,4.311,547,1.942,548,2.259,549,3.523,550,3.523,551,2.459,552,3.523,553,3.029,554,2.459,555,3.523,556,2.259,557,2.259,558,2.265,559,0.666,560,2.703,561,0.994,562,1.733,563,1.452,564,1.182,565,1.348,566,1.348,567,1.733,568,1.733,569,1.577,570,2.259,571,2.259,572,2.259,573,2.259,574,2.259,575,3.029,576,1.577,577,2.259,578,1.942,579,2.259,580,3.523,581,3.523,582,2.459,583,2.259,584,2.259,585,2.259,586,2.259,587,1.733,588,3.523,589,3.523,590,3.523,591,1.942,592,1.733,593,1.733,594,2.259,595,2.259,596,2.259]],["title/modules/CompleteTaskModule.html",[274,0.251,597,2.372]],["body/modules/CompleteTaskModule.html",[0,0.124,2,0.203,3,0.177,7,0.152,9,0.283,36,0.507,39,0.019,77,0.377,78,0.203,79,1.283,81,0.225,82,0.103,90,1.481,113,0.669,114,1.349,179,1.223,192,1.345,230,0.014,231,0.559,243,1.781,273,0.014,274,0.473,276,1.283,277,2.076,278,1.411,283,1.887,284,1.481,286,1.887,287,2.557,288,1.164,289,1.563,290,2.08,291,1.481,292,1.634,293,2.08,294,1.555,295,1.283,296,2.557,297,0.961,298,2.424,299,2.557,300,1.903,301,1.903,302,2.532,303,1.903,305,2.424,306,1.903,307,2.076,308,2.008,309,1.807,314,2.08,339,1.798,469,3.5,470,3.736,471,2.387,501,3.5,561,2.008,597,4.57,598,3.922,599,3.922,600,3.185,601,3.24,602,3.24,603,3.736,604,3.469,605,3.736,606,3.736,607,3.736,608,3.736,609,2.544,610,2.933,611,3.922]],["title/components/CompleteTasksTableComponent.html",[0,0.072,245,0.856]],["body/components/CompleteTasksTableComponent.html",[0,0.133,1,0.966,2,0.194,3,0.169,4,1.289,5,1.289,6,1.289,7,0.145,9,0.271,10,1.117,11,1.117,12,1.003,16,1.289,17,2.274,18,1.667,20,1.667,22,0.833,23,1.19,36,0.381,39,0.019,40,1.19,41,0.833,49,1.589,65,2.286,66,2.957,73,1.064,74,2.127,77,0.283,78,0.194,81,0.169,82,0.099,110,1.839,113,0.88,114,1.737,124,1.117,163,1.171,210,1.289,230,0.014,231,0.535,232,1.667,233,1.667,234,1.954,235,1.289,236,1.289,237,1.064,238,1.667,239,1.064,240,1.289,241,1.064,242,1.289,243,1.064,244,1.954,245,1.538,246,1.667,247,1.064,248,1.289,249,1.064,250,1.014,251,1.171,252,1.064,253,1.289,254,1.064,255,1.289,256,1.064,257,1.228,258,1.289,259,1.014,260,1.289,261,1.014,262,1.064,263,1.228,264,1.064,265,1.289,266,1.064,267,1.289,268,1.014,269,1.064,270,1.289,271,1.828,272,1.289,273,0.014,612,4.859,613,3.352,614,3.946,615,4.859,616,4.859,617,6.626,618,3.756,619,3.946,620,3.05,621,3.05,622,4.37]],["title/components/ConfirmDeleteTaskComponent.html",[0,0.072,247,0.899]],["body/components/ConfirmDeleteTaskComponent.html",[0,0.133,1,0.613,2,0.123,3,0.108,4,0.817,5,0.817,6,0.817,7,0.092,9,0.172,10,1.255,11,0.708,12,0.849,13,1.403,15,1.945,16,0.817,17,2.173,18,1.214,20,1.214,22,0.528,23,0.867,26,1.947,27,2.291,28,1.274,30,2.153,33,1.214,36,0.596,38,0.9,39,0.019,40,1.034,41,1.16,42,0.708,45,1.55,46,2.49,49,1.158,52,1.458,53,1.604,55,1.812,60,2.393,69,1.52,73,0.675,74,1.55,75,1.158,77,0.305,78,0.123,80,0.992,81,0.108,82,0.063,87,1.098,88,1.098,89,1.381,99,1.274,105,1.915,108,1.403,110,0.743,113,0.886,114,0.956,115,3.82,117,3.158,124,0.708,149,1.782,153,1.782,163,0.743,170,3.216,176,2.296,192,1.214,210,2.096,230,0.01,231,0.34,232,1.214,233,1.214,234,1.604,235,0.817,236,0.817,237,0.675,238,1.214,239,0.675,240,0.817,241,0.675,242,0.817,243,0.675,244,1.604,245,0.644,246,1.214,247,1.325,248,0.817,249,0.675,250,0.644,251,1.317,252,0.675,253,0.817,254,0.675,255,0.817,256,0.675,257,1.381,258,0.817,259,0.644,260,0.817,261,0.644,262,0.675,263,0.779,264,0.675,265,0.817,266,0.675,267,0.817,268,0.644,269,0.675,270,0.817,271,0.708,272,0.817,273,0.01,297,0.584,324,2.049,329,2.268,337,1.474,429,2.154,430,2.42,433,1.45,473,4.445,480,1.655,490,3.159,496,5.233,502,1.655,503,2.647,504,2.647,509,4.163,512,2.933,513,2.933,514,2.127,515,3.158,516,3.496,518,2.162,519,2.393,520,2.932,522,1.782,523,2.383,524,2.383,526,3.796,528,1.945,541,3.54,542,3.865,559,0.817,562,2.127,563,1.782,564,1.45,565,1.655,566,1.655,567,2.127,568,2.127,569,3.429,575,3.54,582,1.935,587,2.127,623,5.305,624,2.772,625,2.127,626,2.383,627,2.772,628,2.772,629,4.118,630,2.772,631,2.772,632,2.772,633,2.383,634,2.383,635,1.655,636,2.772,637,2.127,638,2.772,639,2.772,640,2.772,641,2.772,642,4.118,643,4.118,644,2.772,645,2.772,646,4.118,647,3.159,648,3.54]],["title/modules/ConfirmDeleteTaskModule.html",[274,0.251,649,2.372]],["body/modules/ConfirmDeleteTaskModule.html",[0,0.125,2,0.206,3,0.18,7,0.155,9,0.288,36,0.513,39,0.019,77,0.376,78,0.206,79,1.307,81,0.228,82,0.105,90,1.509,113,0.677,115,3.519,179,1.246,192,1.371,230,0.014,231,0.57,247,1.788,273,0.014,274,0.476,276,1.307,277,2.094,278,1.438,283,1.909,284,1.509,286,1.909,287,2.588,288,1.178,289,1.574,290,2.105,291,1.509,292,1.653,293,2.105,294,1.584,295,1.307,296,2.588,297,0.979,298,2.453,299,2.588,300,1.939,301,1.939,302,2.329,303,1.939,305,1.939,306,1.939,307,1.909,308,2.046,309,1.841,314,2.105,339,1.819,471,2.432,472,3.566,473,3.78,561,2.046,600,3.245,601,3.279,602,3.279,604,3.51,623,3.566,649,4.592,650,3.996,651,3.996,652,2.988,653,4.648]],["title/injectables/ConsoleLoggerService.html",[559,1.088,654,2.575]],["body/injectables/ConsoleLoggerService.html",[2,0.266,3,0.259,7,0.222,9,0.33,10,1.818,12,0.584,13,1.363,22,0.762,23,1.348,28,2.122,36,0.598,38,1.298,39,0.019,40,1.404,41,1.271,42,1.533,52,1.877,53,1.573,77,0.267,78,0.178,81,0.155,82,0.09,99,1.65,137,5.186,146,2.627,187,2.817,230,0.013,273,0.013,390,2.627,466,4.584,498,2.225,518,2.347,528,2.376,539,5.895,543,3.723,559,1.769,635,3.183,654,3.723,655,5.115,656,3.068,657,4.584,658,5.456,659,5.333,660,5.333,661,7.113,662,3.821,663,4.584,664,5.333,665,4.091,666,4.584,667,4.584,668,4.468,669,4.91,670,4.584,671,4.091,672,5.371,673,3.999,674,3.723,675,4.091,676,3.068,677,3.999,678,3.999,679,3.999,680,4.468,681,3.999,682,3.999,683,4.115,684,3.999,685,3.999,686,3.999,687,3.068,688,5.115,689,3.438,690,6.001,691,3.999,692,3.999,693,3.999,694,3.999,695,3.999,696,3.999,697,3.999]],["title/modules/CoreModule.html",[274,0.251,354,2.372]],["body/modules/CoreModule.html",[2,0.195,3,0.17,7,0.146,9,0.272,12,0.917,33,1.294,36,0.494,39,0.019,42,1.448,52,1.519,77,0.381,78,0.195,79,1.234,81,0.22,82,0.099,89,1.234,179,1.842,203,2.295,230,0.014,273,0.014,274,0.427,288,1.258,289,1.457,290,2.248,291,1.424,292,1.866,293,2.248,294,1.495,295,1.234,297,0.924,314,2.248,325,3.643,328,3.7,332,3.16,339,2.053,348,4.266,354,4.603,360,3.366,362,4.348,444,1.931,463,2.446,519,2.494,520,2.041,551,3.063,614,3.063,635,2.619,647,3.366,654,3.956,665,3.366,687,3.366,698,4.388,699,5.668,700,3.643,701,4.348,702,5.668,703,6.278,704,3.772,705,4.348,706,6.278,707,4.388,708,4.388,709,3.956,710,4.388,711,4.388,712,4.388,713,4.388,714,4.388,715,4.388,716,4.388,717,4.388,718,3.772,719,3.772,720,3.063,721,3.772,722,3.772,723,3.772,724,3.772]],["title/components/CreateTaskComponent.html",[0,0.072,249,0.899]],["body/components/CreateTaskComponent.html",[0,0.131,1,0.656,2,0.132,3,0.115,4,0.874,5,0.874,6,0.874,7,0.099,9,0.268,10,1.945,11,0.758,12,0.873,13,1.474,15,2.023,16,0.874,17,2.191,18,1.276,20,1.276,22,0.565,23,0.911,26,2.233,27,2.347,28,1.338,30,2.224,33,1.276,36,0.587,38,0.962,39,0.019,40,1.183,41,1.138,42,0.758,45,1.628,46,2.533,49,1.216,52,1.505,53,1.656,55,1.904,65,1.551,66,2.263,69,2.042,71,1.549,72,1.904,73,1.568,75,1.216,76,2.114,77,0.323,78,0.132,81,0.115,82,0.067,87,1.174,88,1.174,89,1.679,94,1.379,99,1.338,105,2.012,108,2.125,110,0.795,113,0.872,114,1.004,124,0.758,146,2.131,163,0.795,170,3.181,175,1.769,180,2.263,181,1.551,185,3.722,210,0.874,230,0.01,231,0.363,232,1.276,233,1.276,234,1.656,235,0.874,236,0.874,237,0.722,238,1.276,239,0.722,240,0.874,241,0.722,242,0.874,243,0.722,244,1.656,245,0.688,246,1.276,247,0.722,248,0.874,249,1.368,250,0.688,251,0.795,252,0.722,253,0.874,254,0.722,255,0.874,256,0.722,257,0.833,258,0.874,259,0.688,260,0.874,261,0.688,262,0.722,263,0.833,264,0.722,265,0.874,266,1.707,267,0.874,268,0.688,269,0.722,270,0.874,271,0.758,272,0.874,273,0.01,297,0.624,324,2.131,329,2.343,337,1.829,392,2.412,430,2.131,433,1.551,484,2.582,502,1.769,503,2.781,504,2.781,509,4.243,512,3.049,513,3.049,515,2.781,516,3.61,518,2.248,519,2.471,520,2.995,526,3.02,563,1.906,564,1.551,565,1.769,566,1.769,569,2.069,582,2.069,725,5.247,726,4.397,727,3.719,728,3.319,729,5.616,730,2.964,731,3.719,732,2.548,733,2.548,734,4.326,735,2.964,736,2.964,737,2.964,738,2.548,739,2.548,740,2.548,741,1.769,742,2.274,743,2.548,744,2.964,745,2.964,746,2.964,747,2.964,748,2.069,749,2.964,750,2.548,751,2.964,752,2.548,753,2.964,754,2.964,755,2.964,756,2.964,757,2.964,758,2.964,759,4.326]],["title/modules/CreateTaskModule.html",[274,0.251,760,2.372]],["body/modules/CreateTaskModule.html",[0,0.129,2,0.197,3,0.172,7,0.147,9,0.274,12,0.833,36,0.498,39,0.019,48,3.981,77,0.378,78,0.197,79,1.245,81,0.221,82,0.1,90,1.438,113,0.726,120,2.809,179,1.187,192,1.306,230,0.014,231,0.543,249,1.771,273,0.014,274,0.48,276,1.245,277,2.047,278,1.37,283,1.851,284,1.438,286,1.851,287,2.51,288,1.143,289,1.546,290,2.042,291,1.438,292,1.603,293,2.042,294,1.51,295,1.245,296,2.51,297,0.933,298,1.848,299,2.51,300,1.848,301,2.379,302,2.497,303,2.379,305,1.848,306,1.848,307,1.851,308,1.949,309,1.754,314,2.042,339,1.951,471,2.318,561,1.949,600,3.092,601,3.18,602,3.18,603,3.666,604,3.404,605,3.666,606,3.666,607,3.666,720,3.092,725,3.398,726,3.666,741,2.644,760,4.673,761,3.808,762,3.808,763,3.808,764,3.933,765,2.848,766,4.43,767,3.398,768,3.398]],["title/components/EditTaskComponent.html",[0,0.072,250,0.856]],["body/components/EditTaskComponent.html",[0,0.128,1,0.349,2,0.07,3,0.061,4,0.466,5,0.466,6,0.466,7,0.053,9,0.163,10,0.868,11,1.558,12,0.645,13,0.899,15,1.345,16,0.466,17,1.992,18,0.778,20,0.778,22,1.011,23,1.004,26,2.14,27,1.997,28,0.816,30,1.571,33,0.778,35,3.044,36,0.597,38,0.856,39,0.019,40,0.836,41,1.216,42,0.674,43,1.673,45,1.905,46,1.905,49,0.742,52,1.602,53,1.564,57,0.943,60,1.161,63,2.268,65,1.38,66,1.777,69,2.074,71,1.421,72,2.426,73,1.386,74,1.997,75,1.116,76,1.278,77,0.311,78,0.07,79,0.444,80,0.565,81,0.061,82,0.114,87,0.625,88,1.045,89,1.116,90,0.856,94,2.052,99,1.641,105,1.845,108,1.626,110,0.423,112,1.575,113,0.882,114,1.415,121,4.228,124,1.219,125,2.268,126,3.338,127,1.471,128,2.268,129,2.024,133,1.212,146,2.174,153,1.696,162,4.351,163,0.423,168,2.028,170,2.646,180,1.38,181,1.777,185,3.167,186,1.102,187,2.426,199,3.066,201,1.212,210,1.002,212,2.495,218,2.634,219,2.659,220,2.847,230,0.006,231,0.194,232,0.778,233,0.778,234,1.17,235,0.466,236,0.466,237,0.385,238,0.778,239,1.075,240,0.466,241,0.385,242,0.466,243,0.385,244,1.17,245,0.367,246,0.778,247,0.385,248,0.466,249,0.385,250,0.921,251,1.823,252,0.385,253,0.466,254,0.385,255,0.466,256,0.385,257,1.423,258,0.466,259,0.367,260,0.466,261,0.367,262,0.643,263,0.742,264,0.385,265,0.466,266,1.423,267,0.466,268,0.367,269,0.385,270,0.466,271,0.404,272,0.466,273,0.006,274,0.107,288,0.316,289,0.367,291,0.513,297,0.333,307,2.14,317,2.776,324,1.417,328,2.212,329,1.655,331,3.411,337,1.58,382,1.212,385,1.212,388,3.41,389,1.102,390,1.955,392,1.471,393,1.575,400,3.044,421,2.268,427,4.364,429,1.38,430,2.174,433,0.826,443,3.044,444,2.227,461,1.212,463,1.894,464,3.08,468,2.024,471,0.826,474,0.881,475,2.024,476,1.212,477,2.268,478,1.212,479,1.358,480,2.028,484,2.634,498,0.659,502,0.943,503,1.696,504,1.696,509,3.41,512,2.028,513,2.028,518,1.495,519,1.746,520,2.467,525,1.212,528,2.493,538,2.92,545,1.358,547,1.358,558,1.696,563,1.015,564,0.826,565,0.943,566,0.943,576,3.971,578,1.358,582,1.841,625,1.212,662,1.575,683,1.015,700,1.015,727,3.411,728,2.024,733,1.358,741,0.943,742,1.212,743,1.358,748,1.841,769,5.28,770,2.268,771,4.77,772,3.968,773,4.77,774,3.968,775,4.77,776,4.77,777,3.793,778,3.968,779,3.968,780,2.638,781,3.968,782,1.579,783,3.968,784,2.638,785,2.638,786,1.579,787,2.638,788,2.268,789,1.579,790,2.268,791,2.638,792,2.268,793,1.579,794,2.268,795,2.638,796,1.579,797,1.579,798,2.268,799,1.579,800,1.579,801,3.044,802,1.579,803,1.579,804,2.638,805,1.579,806,1.579,807,1.579,808,1.579,809,3.397,810,4.413,811,1.579,812,1.579,813,1.579,814,2.638,815,1.579,816,1.955,817,2.638,818,1.212,819,1.212,820,1.358,821,1.579,822,2.638,823,3.397,824,1.358,825,1.579,826,1.579,827,1.579,828,3.397,829,1.579,830,1.102,831,1.579,832,1.579,833,1.358,834,1.102,835,1.579,836,1.579,837,1.579,838,1.579,839,1.579,840,1.579,841,1.579,842,1.579,843,2.92,844,1.579,845,1.579,846,1.579,847,2.638,848,1.212,849,1.579,850,2.638,851,2.638,852,2.638,853,2.638,854,1.579,855,1.579,856,1.579,857,1.579,858,1.579,859,1.579,860,1.579,861,1.579,862,1.579,863,1.579,864,1.579,865,1.579,866,1.358,867,1.358,868,1.358,869,1.579,870,1.358,871,1.212,872,1.579,873,1.579,874,1.579,875,1.579,876,1.579,877,1.579,878,1.579,879,1.579,880,2.92,881,1.579,882,1.579,883,3.968,884,1.358,885,1.579,886,2.638,887,1.579,888,1.579,889,1.358,890,1.579,891,1.579,892,3.397,893,3.968,894,4.413,895,3.411,896,4.413,897,1.579,898,1.579,899,1.358,900,1.579,901,1.579,902,1.579,903,1.579,904,1.358,905,1.212,906,1.579,907,1.358,908,1.579,909,1.358,910,1.579,911,1.358,912,1.579,913,1.358,914,1.579,915,1.579,916,1.358,917,1.579,918,1.358,919,1.579,920,2.638,921,1.579,922,1.579,923,1.579,924,2.638]],["title/modules/EditTaskModule.html",[274,0.251,925,2.372]],["body/modules/EditTaskModule.html",[0,0.116,2,0.176,3,0.154,7,0.132,9,0.246,12,0.58,36,0.463,39,0.019,73,0.967,77,0.38,78,0.176,79,1.116,81,0.206,82,0.09,90,1.289,113,0.688,179,1.711,192,1.171,230,0.013,231,0.486,250,1.648,251,1.602,262,1.73,263,1.116,273,0.013,274,0.453,276,1.116,277,1.941,278,1.228,283,1.723,284,1.289,286,1.723,287,2.335,288,1.063,289,1.481,290,1.9,291,1.289,292,1.492,293,1.9,294,1.353,295,1.116,296,2.335,297,0.836,298,2.214,299,2.335,300,1.656,301,1.656,302,2.367,303,1.656,305,2.214,306,1.656,307,1.941,308,1.747,309,1.572,314,1.9,339,1.642,388,2.552,471,2.776,561,1.747,600,2.771,601,2.959,602,2.959,603,3.411,604,3.168,605,3.411,606,3.411,607,3.411,608,3.411,609,2.213,610,2.552,611,3.412,652,3.411,724,3.412,741,2.369,764,3.816,765,3.411,767,3.045,769,3.045,819,3.045,925,4.837,926,3.412,927,3.412,928,3.412,929,3.412,930,4.085,931,4.085,932,4.492,933,4.562,934,4.071,935,5.307,936,3.704,937,4.562,938,3.704,939,3.045,940,3.412,941,3.412,942,3.412,943,3.97,944,2.771]],["title/components/FooterComponent.html",[0,0.072,252,0.899]],["body/components/FooterComponent.html",[0,0.141,1,1.037,2,0.208,3,0.182,4,1.383,5,1.383,6,1.383,7,0.156,9,0.29,10,1.655,11,1.198,12,1.074,16,1.383,17,2.286,18,1.744,20,1.744,39,0.019,40,1.245,49,1.662,73,1.142,77,0.235,78,0.208,81,0.182,82,0.106,110,1.257,113,0.824,114,1.373,124,1.198,163,1.257,210,1.383,230,0.014,231,0.575,232,1.744,233,1.744,234,2.006,235,1.383,236,1.383,237,1.142,238,1.744,239,1.142,240,1.383,241,1.142,242,1.383,243,1.142,244,2.006,245,1.088,246,1.744,247,1.142,248,1.383,249,1.142,250,1.088,251,1.257,252,1.657,253,1.383,254,1.142,255,1.383,256,1.142,257,1.318,258,1.383,259,1.088,260,1.383,261,1.088,262,1.142,263,1.318,264,1.142,265,1.383,266,1.142,267,1.383,268,1.088,269,1.142,270,1.383,271,1.198,272,1.383,273,0.014,322,4.747,945,4.031,946,5.913,947,5.913,948,5.913]],["title/modules/FooterModule.html",[274,0.251,355,2.372]],["body/modules/FooterModule.html",[0,0.12,2,0.222,3,0.194,7,0.167,9,0.31,36,0.538,39,0.019,77,0.365,78,0.222,79,1.409,81,0.27,82,0.113,179,1.343,192,1.478,230,0.015,231,0.614,252,1.87,273,0.015,274,0.487,276,1.409,277,2.167,278,1.55,283,2.001,284,1.627,287,2.712,288,1.235,289,1.431,290,2.206,291,1.627,292,1.733,293,2.206,294,1.708,295,1.409,314,2.206,322,4.302,355,4.74,949,4.308,950,4.308,951,4.308,952,5.011,953,5.011]],["title/components/HeaderComponent.html",[0,0.072,254,0.899]],["body/components/HeaderComponent.html",[0,0.136,1,0.612,2,0.123,3,0.107,4,0.816,5,0.816,6,0.816,7,0.092,9,0.255,10,1.254,11,0.707,12,0.966,13,1.402,15,1.943,16,0.816,17,2.173,18,1.213,20,1.602,22,0.527,23,0.866,27,2.185,28,1.272,30,2.151,33,0.816,36,0.587,38,1.764,39,0.019,40,1.144,41,1.201,42,1.051,45,2.045,46,2.489,49,1.527,52,1.456,53,1.602,55,1.81,58,2.282,65,1.448,66,2.152,68,3.535,69,2.214,71,1.945,72,1.81,73,1.196,74,2.29,76,1.847,77,0.272,78,0.123,80,0.991,81,0.107,82,0.063,84,1.932,87,1.096,88,1.096,89,0.778,94,2.83,99,0.856,105,1.287,108,2.074,109,4.168,110,0.742,113,0.7,114,0.955,123,3.029,124,0.707,132,3.155,135,3.732,139,3.687,140,3.616,151,2.842,161,2.152,163,1.873,164,3.521,167,3.243,200,4.697,210,0.816,212,3.521,227,2.676,228,5.303,230,0.01,231,0.339,232,1.213,233,1.213,234,1.602,235,0.816,236,0.816,237,0.674,238,1.213,239,0.674,240,0.816,241,0.674,242,0.816,243,0.674,244,1.602,245,0.642,246,1.213,247,0.674,248,0.816,249,0.674,250,0.642,251,0.742,252,0.674,253,0.816,254,1.323,255,0.816,256,0.674,257,0.778,258,0.816,259,0.642,260,0.816,261,0.642,262,0.674,263,0.778,264,0.674,265,0.816,266,0.674,267,0.816,268,0.642,269,1.414,270,0.816,271,0.707,272,0.816,273,0.01,307,1.335,309,1.629,320,1.913,324,2.047,329,2.266,393,2.455,413,3.155,420,3.493,444,2.677,463,2.293,465,3.732,467,3.535,474,1.543,498,1.154,662,2.455,954,2.379,955,3.155,956,3.535,957,5.563,958,3.535,959,4.168,960,3.155,961,3.687,962,4.995,963,4.113,964,4.113,965,3.732,966,6.3,967,5.433,968,5.433,969,4.113,970,2.768,971,4.113,972,2.768,973,2.768,974,4.389,975,4.113,976,2.768,977,4.113,978,2.768,979,2.768,980,2.768,981,4.168,982,2.768,983,2.768,984,4.113,985,2.123,986,2.379,987,2.768,988,4.113,989,1.932,990,2.644,991,4.908,992,2.768,993,2.768,994,2.768]],["title/modules/HeaderModule.html",[274,0.251,356,2.372]],["body/modules/HeaderModule.html",[0,0.124,2,0.202,3,0.176,7,0.151,9,0.281,12,0.664,36,0.506,39,0.019,77,0.377,78,0.202,79,1.277,81,0.261,82,0.103,90,1.475,179,1.218,192,1.34,212,3.032,230,0.014,231,0.557,254,1.849,273,0.014,274,0.483,276,1.277,277,2.072,278,1.405,283,1.881,284,1.475,286,1.881,287,2.55,288,1.161,289,1.561,290,2.075,291,1.475,292,1.629,293,2.075,294,1.548,295,1.277,296,2.55,297,0.957,298,1.895,299,2.55,300,1.895,301,1.895,302,2.295,303,1.895,305,1.895,306,1.895,307,1.881,308,1.999,309,1.799,314,2.075,339,1.793,356,4.743,936,4.045,985,3.485,995,3.905,996,3.905,997,3.905,998,3.905,999,4.565,1000,4.543,1001,5.796,1002,4.543,1003,4.982,1004,4.543,1005,4.543,1006,4.543]],["title/injectables/HttpService.html",[559,1.088,709,2.575]],["body/injectables/HttpService.html",[2,0.12,3,0.157,7,0.09,9,0.387,12,0.396,22,0.516,23,0.852,26,2.584,28,1.251,33,1.193,36,0.593,38,2.03,39,0.019,40,1.317,41,1.295,42,1.952,52,1.924,53,1.585,71,1.448,74,1.522,75,0.761,77,0.313,78,0.12,81,0.105,82,0.061,89,0.761,90,1.745,94,2.499,111,3.716,114,0.939,115,3.081,118,2.6,119,2.824,160,2.824,212,3.157,215,4.471,222,3.477,227,1.993,230,0.01,273,0.01,328,2.256,332,3.207,337,0.969,339,1.662,390,1.993,393,3.208,394,3.103,420,2.6,498,2.87,518,2.131,519,2.365,528,2.803,551,2.824,559,1.428,634,6.558,637,3.103,657,6.317,674,2.824,676,4.412,687,2.076,704,2.327,709,2.824,816,3.62,944,3.751,960,3.103,1007,2.327,1008,6.956,1009,4.045,1010,4.045,1011,5.374,1012,4.045,1013,4.045,1014,5.374,1015,3.477,1016,4.045,1017,4.045,1018,4.045,1019,4.045,1020,4.724,1021,4.045,1022,5.374,1023,6.035,1024,6.255,1025,6.255,1026,5.374,1027,2.707,1028,4.844,1029,4.045,1030,4.045,1031,2.707,1032,4.045,1033,2.707,1034,4.045,1035,2.707,1036,2.707,1037,4.629,1038,4.045,1039,2.707,1040,3.477,1041,4.045,1042,7.131,1043,2.707,1044,4.045,1045,2.707,1046,2.707,1047,4.045,1048,4.045,1049,2.707,1050,2.707,1051,2.707,1052,2.707,1053,2.707,1054,2.707,1055,2.707,1056,5.374,1057,4.844,1058,4.844,1059,2.707,1060,2.707,1061,2.707,1062,2.707,1063,4.045,1064,2.707,1065,2.707,1066,2.707,1067,2.707,1068,2.707,1069,2.707,1070,2.707,1071,2.707]],["title/components/ListItemComponent.html",[0,0.072,256,0.899]],["body/components/ListItemComponent.html",[0,0.133,1,0.563,2,0.113,3,0.099,4,0.751,5,0.751,6,0.751,7,0.085,9,0.158,10,1.332,11,0.651,12,0.819,13,1.317,15,1.849,16,0.751,17,2.151,18,1.14,20,1.14,22,0.485,23,0.814,27,2.22,28,1.196,30,2.064,33,0.751,36,0.599,38,1.516,39,0.019,40,0.983,41,1.276,42,0.651,45,1.757,46,2.586,49,1.658,52,1.036,53,1.14,55,2.055,69,1.612,71,1.384,72,1.701,73,1.769,74,2.376,77,0.261,78,0.113,80,0.912,81,0.099,82,0.106,84,1.778,87,1.009,88,1.009,89,0.716,90,1.516,94,1.797,99,1.612,108,1.317,110,0.683,113,0.812,114,1.301,116,3.934,119,2.698,124,1.193,126,3.856,140,2.022,144,3.859,146,2.905,161,2.727,163,0.683,164,3.086,187,2.845,194,2.698,199,2.743,210,0.751,212,2.022,217,4.406,218,3.658,219,3.417,220,3.658,226,1.954,227,1.904,230,0.009,231,0.312,232,1.14,233,1.14,234,1.537,235,0.751,236,0.751,237,0.621,238,1.14,239,0.621,240,0.751,241,0.621,242,0.751,243,0.621,244,1.537,245,0.591,246,1.14,247,0.621,248,0.751,249,0.621,250,0.591,251,0.683,252,0.621,253,0.751,254,0.621,255,0.751,256,1.27,257,1.817,258,0.751,259,0.591,260,0.751,261,0.591,262,0.621,263,0.716,264,0.621,265,0.751,266,0.621,267,0.751,268,0.591,269,0.621,270,0.751,271,0.651,272,0.751,273,0.009,288,0.51,289,0.591,307,1.819,324,1.948,329,2.174,337,1.384,484,3.345,498,2.174,520,2.743,528,2.773,542,3.859,554,2.698,558,2.485,564,1.333,816,3.11,884,5.427,889,2.19,955,2.965,959,2.965,960,1.954,974,3.602,1020,4.156,1072,5.966,1073,2.19,1074,3.865,1075,3.865,1076,3.322,1077,3.865,1078,3.865,1079,3.322,1080,3.865,1081,3.865,1082,5.213,1083,4.014,1084,4.67,1085,2.19,1086,3.865,1087,3.865,1088,5.213,1089,3.865,1090,2.548,1091,6.128,1092,3.865,1093,2.548,1094,3.865,1095,2.548,1096,3.865,1097,2.548,1098,2.548,1099,2.548,1100,2.548,1101,2.548,1102,2.548,1103,2.548,1104,2.548,1105,3.865,1106,2.548,1107,2.548,1108,2.548,1109,2.548,1110,5.213,1111,5.213,1112,2.19,1113,2.548,1114,2.548,1115,4.67,1116,4.67,1117,2.548,1118,2.548,1119,3.865,1120,3.865,1121,2.19,1122,2.548,1123,2.548,1124,2.548,1125,2.548,1126,2.19,1127,2.548,1128,2.548,1129,2.548,1130,2.548,1131,2.548]],["title/injectables/LoaderService.html",[332,2.057,559,1.088]],["body/injectables/LoaderService.html",[2,0.203,3,0.177,7,0.152,9,0.283,22,0.869,23,1.224,26,2.289,28,1.798,33,1.886,36,0.607,39,0.019,41,1.107,52,1.558,53,1.714,57,3.469,58,3.131,69,1.798,71,1.633,72,2.008,74,2.534,76,2.407,77,0.291,78,0.203,80,1.633,81,0.225,82,0.103,89,1.283,108,2.18,123,3.877,230,0.014,273,0.014,328,4.028,332,3.24,340,4.47,393,4.407,420,4.784,559,1.886,816,3.502,1037,5.334,1132,3.5,1133,6.21,1134,6.286,1135,5.812,1136,4.562,1137,4.562,1138,4.562,1139,5.334,1140,2.544,1141,3.922,1142,3.922,1143,3.922,1144,4.995]],["title/interfaces/LoaderState.html",[340,2.372,1140,2.057]],["body/interfaces/LoaderState.html",[2,0.218,3,0.19,7,0.163,9,0.304,22,0.936,23,1.282,26,1.758,33,1.448,39,0.019,41,0.936,57,2.932,58,2.831,69,2.199,71,2.179,72,2.679,74,2.291,76,2.291,77,0.305,78,0.218,80,1.758,81,0.236,82,0.111,89,1.381,108,2.075,123,3.855,230,0.015,273,0.015,328,3.963,332,2.739,340,4.252,393,4.243,420,4.808,559,1.795,816,3.258,1037,5.304,1132,3.768,1133,6.11,1134,5.686,1139,5.074,1140,3.394,1141,4.222,1142,4.222,1143,4.222,1144,5.232]],["title/classes/Logger.html",[82,0.083,518,1.624]],["body/classes/Logger.html",[2,0.319,3,0.231,7,0.198,9,0.293,13,2.026,22,0.901,23,1.252,36,0.567,39,0.019,40,0.996,41,1.34,42,1.209,53,1.395,75,1.33,77,0.237,78,0.21,81,0.231,82,0.147,97,3.302,118,4.18,159,3.629,187,2.082,208,3.302,230,0.014,273,0.014,288,0.948,339,1.839,498,2.48,518,3.002,519,2.082,528,1.873,543,3.302,559,1.753,658,5.85,662,2.824,668,3.302,669,3.629,671,3.629,672,4.989,674,3.302,675,5.742,680,5.141,683,4.735,1020,3.041,1140,3.315,1145,3.629,1146,4.731,1147,4.731,1148,4.731,1149,4.066,1150,4.066]],["title/injectables/LoggerService.html",[519,1.624,559,1.088]],["body/injectables/LoggerService.html",[2,0.313,3,0.244,7,0.21,9,0.353,13,2.148,22,0.843,23,1.2,28,1.763,36,0.581,38,1.436,39,0.019,40,1.327,41,1.385,42,1.611,52,1.186,53,1.68,75,1.602,77,0.222,78,0.196,81,0.221,82,0.129,97,3.977,118,4.052,159,4.371,187,2.507,208,3.977,230,0.014,273,0.014,288,1.142,339,2.059,498,2.377,518,2.929,519,2.507,528,2.496,543,3.977,559,1.859,658,5.843,662,3.401,668,3.977,669,4.371,670,4.898,671,4.371,672,5.409,674,3.977,675,5.718,676,3.394,680,5.073,683,4.672,1020,3.663,1140,2.467,1145,3.394,1149,3.803,1150,4.898,1151,4.424,1152,4.424,1153,4.424,1154,4.424]],["title/injectables/MatPaginatorCustom.html",[559,1.088,932,2.372]],["body/injectables/MatPaginatorCustom.html",[2,0.207,3,0.181,7,0.155,9,0.289,11,1.735,22,0.89,23,1.242,36,0.611,39,0.019,41,1.124,52,1.581,74,2.219,75,1.817,77,0.296,78,0.207,81,0.181,82,0.106,99,2.101,113,0.782,137,4.116,230,0.014,273,0.014,297,0.983,337,2.314,388,4.365,394,3.581,403,6.315,404,6.147,528,2.689,542,3.52,559,1.906,788,5.069,932,3.791,933,5.837,944,4.116,1155,5.837,1156,4.013,1157,5.897,1158,5.897,1159,6.79,1160,6.79,1161,6.79,1162,5.128,1163,5.897,1164,6.79,1165,5.897,1166,4.669,1167,5.069,1168,4.669,1169,4.669]],["title/components/PageNotFoundComponent.html",[0,0.072,259,0.856]],["body/components/PageNotFoundComponent.html",[0,0.14,1,1.006,2,0.202,3,0.176,4,1.342,5,1.342,6,1.342,7,0.151,9,0.282,10,1.632,11,1.913,12,1.068,16,1.342,17,2.281,18,1.711,20,1.711,39,0.018,40,1.221,49,1.631,73,1.108,77,0.228,78,0.202,81,0.176,82,0.103,94,2.698,110,1.219,113,0.818,114,1.347,124,1.163,163,1.219,210,1.342,230,0.014,231,0.557,232,1.711,233,1.711,234,1.983,235,1.342,236,1.342,237,1.108,238,1.711,239,1.108,240,1.342,241,1.108,242,1.342,243,1.108,244,1.983,245,1.056,246,1.711,247,1.108,248,1.342,249,1.108,250,1.056,251,1.219,252,1.108,253,1.342,254,1.108,255,1.342,256,1.108,257,1.279,258,1.342,259,1.561,260,1.342,261,1.056,262,1.108,263,1.279,264,1.108,265,1.342,266,1.108,267,1.342,268,1.056,269,1.108,270,1.342,271,1.163,272,1.342,273,0.014,367,3.175,382,5.16,666,5.782,770,4.986,830,4.695,1170,3.911,1171,3.911,1172,5.801,1173,5.801,1174,5.801]],["title/components/PendingTasksTableComponent.html",[0,0.072,261,0.856]],["body/components/PendingTasksTableComponent.html",[0,0.133,1,0.966,2,0.194,3,0.169,4,1.289,5,1.289,6,1.289,7,0.145,9,0.271,10,1.117,11,1.117,12,1.003,16,1.289,17,2.274,18,1.667,20,1.667,22,0.833,23,1.19,36,0.381,39,0.019,40,1.19,41,0.833,49,1.589,65,2.286,66,2.957,73,1.064,74,2.127,77,0.283,78,0.194,81,0.169,82,0.099,110,1.839,113,0.88,114,1.312,124,1.901,163,1.171,210,1.289,230,0.014,231,0.535,232,1.667,233,1.667,234,1.954,235,1.289,236,1.289,237,1.064,238,1.667,239,1.064,240,1.289,241,1.064,242,1.289,243,1.064,244,1.954,245,1.014,246,1.667,247,1.064,248,1.289,249,1.064,250,1.014,251,1.171,252,1.064,253,1.289,254,1.064,255,1.289,256,1.064,257,1.228,258,1.289,259,1.014,260,1.289,261,1.538,262,1.064,263,1.228,264,1.064,265,1.289,266,1.064,267,1.289,268,1.014,269,1.064,270,1.289,271,1.828,272,1.289,273,0.014,613,3.352,614,3.946,615,4.859,616,4.859,618,3.756,619,3.946,620,3.05,621,3.05,1175,4.859,1176,6.626,1177,4.37]],["title/components/RecurringTaskComponent.html",[0,0.072,262,0.899]],["body/components/RecurringTaskComponent.html",[0,0.138,1,0.659,2,0.132,3,0.116,4,0.879,5,0.879,6,0.879,7,0.099,9,0.185,10,1.31,11,0.762,12,0.875,13,1.48,15,2.029,16,0.879,17,2.192,18,1.281,20,1.281,22,0.568,23,0.915,26,2.237,27,2.119,28,1.344,30,2.23,33,1.281,36,0.598,38,0.968,39,0.019,40,1.079,41,1.191,42,0.762,45,1.635,46,2.427,49,1.221,52,1.509,53,1.661,60,2.255,69,1.933,72,2.478,73,1.248,75,0.838,76,1.635,77,0.3,78,0.132,81,0.116,82,0.067,87,1.18,88,1.18,89,1.221,108,1.747,110,0.799,113,0.884,114,1.008,124,0.762,161,2.273,163,0.799,168,2.593,170,3.185,176,3.14,180,2.273,181,2.946,199,2.02,203,2.273,210,0.879,217,3.032,230,0.011,231,0.365,232,1.281,233,1.281,234,1.661,235,0.879,236,0.879,237,0.726,238,1.281,239,0.726,240,0.879,241,0.726,242,0.879,243,0.726,244,1.661,245,0.692,246,1.281,247,0.726,248,0.879,249,0.726,250,0.692,251,1.986,252,0.726,253,0.879,254,0.726,255,0.879,256,0.726,257,0.838,258,0.879,259,0.692,260,0.879,261,0.692,262,1.372,263,1.992,264,0.726,265,0.879,266,0.726,267,0.879,268,0.692,269,0.726,270,0.879,271,0.762,272,0.879,273,0.011,297,0.628,324,2.138,329,2.349,337,2.016,390,2.14,392,1.662,408,3.62,429,2.946,430,2.774,433,1.56,462,3.032,463,3.14,464,4.361,480,1.779,502,1.779,503,2.792,504,2.792,509,4.249,512,3.059,513,3.059,514,2.287,515,3.294,516,3.62,517,4.948,522,1.916,525,2.287,526,3.032,544,4.32,559,0.879,560,2.287,561,1.312,562,2.287,565,1.779,566,1.779,567,2.287,568,2.287,569,3.032,587,2.287,592,2.287,593,2.287,625,2.287,626,2.562,731,3.734,732,2.562,738,2.562,739,2.562,740,2.562,777,5.545,798,3.734,801,4.32,880,2.562,1178,5.965,1179,4.344,1180,5.631,1181,4.344,1182,2.981,1183,2.981,1184,2.981,1185,2.981,1186,2.981]],["title/components/SidenavTasksComponent.html",[0,0.072,264,0.899]],["body/components/SidenavTasksComponent.html",[0,0.12,1,0.413,2,0.083,3,0.072,4,0.551,5,0.551,6,1.127,7,0.062,9,0.237,10,1.392,11,0.477,12,0.706,13,1.032,15,1.513,16,0.551,17,2.053,18,0.893,20,0.893,22,1.197,23,0.925,26,2.401,27,1.818,28,0.937,30,1.74,33,0.893,35,3.371,36,0.59,38,1.903,39,0.019,40,1.017,41,1.197,42,0.976,43,3.147,45,1.14,46,2.207,49,0.852,51,1.606,52,1.572,53,1.424,55,1.333,58,2.533,60,1.333,69,1.907,71,1.573,72,0.822,73,0.455,75,0.852,76,1.654,77,0.284,78,0.083,79,0.525,80,0.669,81,0.072,82,0.042,87,0.74,88,0.74,89,0.852,94,2.533,99,1.494,105,0.869,108,1.763,110,0.501,112,1.808,113,0.802,114,1.431,116,4.202,117,1.201,123,1.689,124,1.678,126,3.287,135,1.201,139,2.693,140,2.299,151,1.585,160,1.304,161,1.585,163,1.855,164,1.585,167,1.808,168,1.808,170,2.044,176,2.884,186,2.114,187,2.765,194,1.304,199,1.409,208,1.304,210,0.551,212,1.585,217,4.583,218,2.623,219,3.269,220,3.5,226,3.705,227,2.165,230,0.007,231,0.229,232,0.893,233,0.893,234,1.296,235,0.551,236,0.551,237,0.455,238,0.893,239,0.455,240,0.551,241,0.455,242,0.551,243,0.455,244,1.296,245,0.434,246,0.893,247,0.455,248,0.551,249,0.738,250,0.434,251,0.501,252,0.455,253,0.551,254,0.455,255,0.551,256,0.455,257,1.694,258,0.551,259,0.434,260,0.551,261,0.434,262,0.455,263,0.525,264,1.071,265,0.551,266,0.455,267,0.551,268,0.434,269,0.455,270,0.551,271,0.477,272,0.551,273,0.007,295,1.236,297,0.393,307,1.956,317,3.224,320,2.044,321,1.947,322,2.114,323,2.324,324,1.594,329,1.833,337,1.368,389,2.114,390,2.165,424,2.324,442,1.606,443,3.371,444,2.397,465,1.201,468,2.324,471,0.977,474,1.042,475,2.324,476,1.433,478,1.433,484,1.115,498,2.739,520,2.533,528,0.74,542,3.596,564,0.977,635,1.808,668,2.114,700,1.947,726,1.201,768,1.433,816,2.967,818,1.433,830,2.114,895,4.446,899,2.604,904,3.778,905,2.324,959,4.352,961,2.693,962,2.114,965,3.105,974,3.105,989,1.304,990,2.456,1020,3.502,1083,4.877,1112,3.778,1121,3.778,1126,3.778,1162,2.114,1187,5.145,1188,1.606,1189,2.604,1190,2.604,1191,4.395,1192,6.482,1193,5.674,1194,4.395,1195,4.395,1196,3.029,1197,4.395,1198,1.868,1199,1.868,1200,3.029,1201,3.029,1202,3.029,1203,3.029,1204,3.029,1205,1.868,1206,4.83,1207,3.029,1208,1.868,1209,1.868,1210,1.868,1211,3.029,1212,1.868,1213,3.029,1214,1.868,1215,1.868,1216,3.029,1217,6.482,1218,6.024,1219,3.029,1220,5.674,1221,3.029,1222,3.029,1223,1.868,1224,1.868,1225,1.868,1226,1.868,1227,1.868,1228,5.674,1229,3.029,1230,1.868,1231,1.868,1232,1.606,1233,1.868,1234,1.868,1235,1.868,1236,1.868,1237,1.868,1238,1.868,1239,1.868,1240,1.868,1241,3.029,1242,1.868,1243,1.868,1244,1.868,1245,1.868,1246,1.868,1247,1.868,1248,1.868,1249,1.868,1250,4.395,1251,1.868,1252,1.868,1253,1.868,1254,1.868,1255,1.868,1256,1.868,1257,1.868,1258,5.172,1259,1.868,1260,1.868,1261,1.868,1262,1.868,1263,1.868,1264,1.868,1265,3.821,1266,1.868]],["title/modules/SidenavTasksModule.html",[274,0.251,1267,2.372]],["body/modules/SidenavTasksModule.html",[0,0.12,2,0.19,3,0.166,7,0.142,9,0.265,12,0.625,36,0.486,39,0.019,77,0.378,78,0.19,79,1.202,81,0.255,82,0.097,90,1.388,113,0.642,163,1.662,179,1.146,192,1.261,230,0.014,231,0.524,256,1.702,257,1.202,264,1.835,273,0.014,274,0.476,276,1.202,277,2.013,278,1.323,283,1.81,284,1.388,286,1.81,287,2.453,288,1.117,289,1.525,290,1.996,291,1.388,292,1.567,293,1.996,294,1.457,295,1.202,296,2.453,297,0.9,298,2.325,299,2.453,300,1.784,301,1.784,302,2.456,303,1.784,305,2.325,306,1.784,307,2.013,308,1.882,309,1.693,314,1.996,339,1.724,609,2.384,705,4.276,726,2.749,760,4.492,765,3.583,768,3.28,936,3.891,1003,3.676,1187,3.28,1267,4.767,1268,3.676,1269,3.676,1270,4.277,1271,3.676,1272,4.277,1273,5.574,1274,5.574,1275,5.574,1276,5.574,1277,5.574,1278,5.574,1279,5.574,1280,4.277,1281,3.676,1282,4.277,1283,3.28]],["title/classes/Task.html",[82,0.083,113,0.425]],["body/classes/Task.html",[2,0.172,3,0.15,7,0.129,9,0.443,22,0.739,23,1.1,36,0.624,39,0.019,40,1.487,41,1.378,42,1.335,58,2.43,69,1.828,75,1.911,76,2.379,81,0.203,82,0.118,108,1.781,113,0.887,114,1.578,124,1.616,126,3.307,127,4.099,174,4.606,175,4.216,181,3.926,187,3.183,188,4.849,202,3.647,230,0.013,273,0.013,286,1.696,337,2.263,528,2.834,546,4.849,576,4.413,748,4.413,750,5.434,752,5.434,848,4.849,961,3.294,1162,3.647,1284,2.975,1285,5.225,1286,6.322,1287,4.849,1288,4.849,1289,4.849,1290,4.849,1291,3.878,1292,3.878,1293,3.878,1294,3.878,1295,3.878,1296,5.225,1297,4.491,1298,3.878,1299,3.878,1300,5.434,1301,3.878,1302,4.124,1303,4.532,1304,3.878]],["title/components/TaskFormComponent.html",[0,0.072,266,0.899]],["body/components/TaskFormComponent.html",[0,0.119,1,0.411,2,0.082,3,0.072,4,0.548,5,0.548,6,0.548,7,0.062,9,0.389,10,1.654,11,0.475,12,0.704,13,1.028,15,1.507,16,0.548,17,2.051,18,0.889,20,0.889,22,0.354,23,1.55,26,1.724,27,1.812,28,0.933,30,1.734,33,0.889,36,0.584,38,1.563,39,0.019,40,1.38,41,1.233,42,1.231,45,1.941,46,2.202,49,0.848,52,1.796,53,1.122,55,1.327,57,1.8,58,1.402,60,2.27,69,1.973,71,1.079,73,0.452,75,1.07,76,1.432,77,0.293,78,0.082,80,0.665,81,0.072,82,0.042,87,0.735,88,0.735,89,1.231,94,1.77,99,0.575,105,0.864,108,1.852,110,0.498,113,0.871,114,1.358,121,4.343,124,0.972,126,3.146,127,3.829,139,2.442,140,2.291,144,3.244,146,2.541,151,1.577,163,0.498,171,3.952,174,2.656,175,3.079,180,3.9,181,3.505,183,1.425,185,1.8,186,2.104,187,1.927,199,2.917,202,2.104,210,0.548,219,2.122,230,0.007,231,0.228,232,0.889,233,0.889,234,1.292,235,0.548,236,0.548,237,0.452,238,0.889,239,0.452,240,0.548,241,0.452,242,0.548,243,0.452,244,1.292,245,0.431,246,0.889,247,0.452,248,0.548,249,0.452,250,0.431,251,1.02,252,0.452,253,0.548,254,0.452,255,0.548,256,0.452,257,0.522,258,0.548,259,0.431,260,0.548,261,0.431,262,0.452,263,0.522,264,0.452,265,0.548,266,1.067,267,0.548,268,0.431,269,0.452,270,0.548,271,0.475,272,0.548,273,0.007,286,1.675,288,0.372,289,0.431,320,1.77,324,1.587,329,1.827,337,2.202,390,2.677,392,3.263,408,2.815,429,2.519,430,2.157,433,0.972,444,2.391,465,2.446,474,1.036,480,1.109,498,1.827,505,3.765,510,2.592,512,2.272,513,2.272,517,3.957,522,3.096,528,2.317,530,2.592,531,2.592,532,2.592,544,5.267,546,3.36,551,1.296,553,1.597,554,1.296,558,1.938,560,4.168,561,0.817,565,1.109,566,1.109,591,1.597,592,2.919,593,3.694,647,1.425,683,2.815,728,3.957,748,3.057,816,2.372,824,1.597,833,1.597,843,3.765,848,3.957,871,1.425,905,4.613,907,1.597,909,1.597,911,1.597,913,1.597,916,3.765,918,1.597,961,2.876,965,3.096,989,1.296,990,1.194,1287,2.313,1288,2.313,1289,2.313,1290,2.313,1302,2.104,1303,2.313,1305,5.139,1306,1.597,1307,3.765,1308,4.38,1309,3.015,1310,3.015,1311,5.434,1312,5.158,1313,5.661,1314,3.015,1315,3.015,1316,1.857,1317,3.015,1318,1.857,1319,1.857,1320,1.857,1321,3.015,1322,1.857,1323,3.015,1324,1.857,1325,3.015,1326,1.857,1327,3.015,1328,1.857,1329,1.857,1330,3.015,1331,1.857,1332,1.857,1333,1.857,1334,1.857,1335,1.857,1336,3.015,1337,1.857,1338,1.857,1339,1.857,1340,1.857,1341,3.015,1342,1.857,1343,1.857,1344,1.857,1345,1.857,1346,1.857,1347,1.857,1348,1.857,1349,1.857,1350,1.857,1351,1.857,1352,1.857,1353,1.857,1354,1.857,1355,1.857,1356,1.857,1357,3.015,1358,3.015,1359,4.38,1360,3.015,1361,3.015,1362,1.857,1363,3.015,1364,3.015,1365,1.857,1366,1.857,1367,1.857,1368,1.857,1369,1.857,1370,3.015,1371,1.857,1372,1.857,1373,1.857,1374,3.806,1375,1.857,1376,3.015,1377,1.597,1378,1.857,1379,1.857,1380,3.015]],["title/modules/TaskFormModule.html",[274,0.251,764,2.057]],["body/modules/TaskFormModule.html",[0,0.118,2,0.216,3,0.189,7,0.162,9,0.301,36,0.528,39,0.019,77,0.367,78,0.216,81,0.267,82,0.11,113,0.697,179,1.305,180,3.167,192,1.435,230,0.015,231,0.596,266,1.85,273,0.015,274,0.482,276,1.368,277,2.139,278,1.506,283,1.965,284,1.58,286,1.965,288,1.213,289,1.405,290,2.167,291,1.58,292,1.702,293,2.167,294,1.659,295,1.368,297,1.025,339,1.872,561,2.142,601,3.375,602,3.375,603,3.891,605,3.891,606,3.891,607,3.891,741,2.905,742,3.733,764,4.086,1305,3.733,1381,4.184,1382,4.184,1383,4.184,1384,4.867,1385,6.053]],["title/modules/TasksButtonBarModule.html",[274,0.251,930,2.202]],["body/modules/TasksButtonBarModule.html",[0,0.123,2,0.197,3,0.172,7,0.148,9,0.275,36,0.498,39,0.019,73,1.624,77,0.378,78,0.197,79,1.249,81,0.259,82,0.1,90,1.442,179,1.191,192,1.31,200,3.988,230,0.014,231,0.544,239,1.827,273,0.014,274,0.469,276,1.249,277,2.05,278,1.374,283,1.855,284,1.442,286,1.855,288,1.145,289,1.548,290,2.045,291,1.442,292,1.606,293,2.045,294,1.514,295,1.249,296,2.514,297,0.935,298,2.383,299,2.514,300,1.853,301,1.853,302,2.501,303,1.853,305,2.383,306,1.853,307,2.05,308,1.955,309,1.759,314,2.045,339,1.767,384,3.408,604,3.41,608,3.673,609,2.477,610,3.673,652,3.673,765,3.673,820,3.819,930,4.386,934,4.382,938,3.988,939,3.408,1386,3.819,1387,3.819,1388,3.819,1389,3.819,1390,4.214,1391,4.442,1392,3.819,1393,3.819,1394,3.819,1395,3.819]],["title/modules/TasksButtonsModule.html",[274,0.251,1390,2.202]],["body/modules/TasksButtonsModule.html",[0,0.122,2,0.196,3,0.171,7,0.147,9,0.274,12,0.646,36,0.497,39,0.019,73,1.387,77,0.374,78,0.196,79,1.242,81,0.258,82,0.1,90,1.434,113,0.766,114,1.321,115,2.804,120,3.277,179,1.184,192,1.303,203,2.978,204,3.66,215,3.66,230,0.014,231,0.541,241,1.826,251,1.526,273,0.014,274,0.453,276,1.242,277,2.045,278,1.367,283,1.848,284,1.434,286,1.848,288,1.141,289,1.544,290,2.038,291,1.434,292,1.6,293,2.038,294,1.506,295,1.242,296,2.505,297,0.93,298,2.375,299,2.505,300,1.843,301,1.843,302,2.494,303,1.843,305,2.375,306,1.843,307,2.045,308,1.944,309,1.749,314,2.038,320,3.094,339,1.761,391,3.974,604,3.398,608,3.66,609,2.463,610,3.66,652,3.66,765,3.66,938,3.974,1390,4.281,1392,3.798,1393,3.798,1396,3.798,1397,3.798,1398,3.798,1399,4.418,1400,4.418,1401,4.418]],["title/components/TasksComponent.html",[0,0.072,268,0.856]],["body/components/TasksComponent.html",[0,0.135,1,1.018,2,0.204,3,0.178,4,1.357,5,1.357,6,1.357,7,0.153,9,0.285,10,1.641,11,1.176,12,0.987,16,1.357,17,2.283,18,1.723,20,1.723,39,0.019,40,1.23,49,1.643,73,1.121,77,0.231,78,0.204,81,0.178,82,0.104,110,1.233,113,0.858,114,1.356,124,1.176,163,1.233,164,3.057,167,3.488,210,1.357,227,2.878,230,0.014,231,0.564,232,1.723,233,1.723,234,1.992,235,1.357,236,1.357,237,1.121,238,1.723,239,1.121,240,1.357,241,1.121,242,1.357,243,1.121,244,1.992,245,1.068,246,1.723,247,1.121,248,1.357,249,1.121,250,1.068,251,1.233,252,1.121,253,1.357,254,1.121,255,1.357,256,1.121,257,1.294,258,1.357,259,1.068,260,1.357,261,1.068,262,1.121,263,1.294,264,1.121,265,1.357,266,1.121,267,1.357,268,1.568,269,1.121,270,1.357,271,1.176,272,1.357,273,0.014,295,1.899,317,3.057,320,3.141,321,3.756,323,4.482,325,3.756,1189,5.023,1190,5.023,1402,3.956]],["title/modules/TasksDialogModule.html",[274,0.251,931,2.202]],["body/modules/TasksDialogModule.html",[0,0.12,2,0.224,3,0.195,7,0.168,9,0.312,12,0.736,36,0.539,39,0.019,77,0.365,78,0.224,81,0.24,82,0.114,115,3.045,170,2.875,179,1.35,192,1.485,230,0.015,231,0.617,273,0.015,274,0.496,276,1.416,277,1.635,278,1.558,283,2.007,284,1.635,286,2.007,288,1.009,289,1.169,292,1.738,339,1.912,469,3.862,470,3.237,472,3.862,473,3.237,597,4.684,649,4.684,741,3.005,764,4.063,767,3.862,931,4.511,1283,4.741,1403,5.035,1404,5.035,1405,5.035,1406,5.035]],["title/components/TasksFilterComponent.html",[0,0.072,269,0.899]],["body/components/TasksFilterComponent.html",[0,0.133,1,0.629,2,0.126,3,0.11,4,0.839,5,0.839,6,0.839,7,0.095,9,0.176,10,1.571,11,0.727,12,0.858,13,1.431,14,4.289,15,1.976,16,0.839,17,2.18,18,1.238,20,1.238,22,0.542,23,0.884,26,1.503,27,2.211,28,1.704,29,4.734,30,2.181,33,1.238,36,0.599,38,0.924,39,0.019,40,1.051,41,1.171,42,0.727,45,2.073,46,2.507,49,2.007,52,1.574,53,1.732,55,1.848,60,2.585,64,4.734,65,1.489,66,2.197,69,1.901,71,1.503,73,0.693,77,0.294,78,0.126,80,1.019,81,0.11,82,0.064,87,1.127,88,1.127,89,0.8,99,0.88,105,1.324,108,1.431,110,0.763,113,0.848,114,0.975,116,3.976,124,0.727,126,3.216,127,2.341,137,2.931,139,3.071,140,2.881,144,4.101,146,2.713,151,2.197,156,3.221,161,2.197,163,0.763,164,2.881,171,2.931,176,3.071,180,2.197,199,2.32,210,0.839,218,2.506,219,2.341,220,2.506,227,1.402,228,3.221,230,0.01,231,0.349,232,1.238,233,1.238,234,1.624,235,0.839,236,0.839,237,0.693,238,1.238,239,0.693,240,0.839,241,0.693,242,0.839,243,0.693,244,1.624,245,0.661,246,1.238,247,0.693,248,0.839,249,0.693,250,0.661,251,0.763,252,0.693,253,0.839,254,0.693,255,0.839,256,0.693,257,0.8,258,0.839,259,0.661,260,0.839,261,0.661,262,0.693,263,0.8,264,0.693,265,0.839,266,0.693,267,0.839,268,0.661,269,1.342,270,0.839,271,0.727,272,0.839,273,0.01,320,1.324,324,2.081,329,2.297,337,1.972,424,2.183,429,2.197,430,2.713,444,2.797,462,3.844,463,2.341,474,1.587,484,1.699,488,2.183,520,3.195,542,2.506,554,2.931,564,1.489,619,2.931,816,3.028,818,2.183,834,2.931,944,2.931,956,3.609,957,3.609,961,3.071,965,3.776,989,1.987,990,1.83,1079,4.734,1085,2.446,1407,5.197,1408,2.446,1409,3.221,1410,6.147,1411,4.199,1412,4.199,1413,4.199,1414,6.525,1415,6.147,1416,5.508,1417,4.199,1418,2.846,1419,2.846,1420,5.874,1421,2.846,1422,2.846,1423,2.846,1424,3.609,1425,4.199,1426,4.199,1427,4.199,1428,2.846,1429,2.846,1430,2.846,1431,2.846,1432,4.199,1433,2.846,1434,2.846,1435,4.199,1436,2.846,1437,2.446,1438,2.846,1439,2.846,1440,2.846,1441,2.846,1442,2.846,1443,2.846,1444,2.846]],["title/modules/TasksFilterModule.html",[274,0.251,999,2.372]],["body/modules/TasksFilterModule.html",[0,0.125,2,0.205,3,0.18,7,0.154,9,0.287,36,0.512,39,0.019,77,0.371,78,0.205,81,0.263,82,0.105,90,1.502,113,0.675,116,3.501,179,1.241,192,1.365,230,0.014,231,0.567,269,1.853,273,0.014,274,0.475,276,1.301,277,2.09,278,1.432,283,1.904,284,1.502,286,1.904,287,2.581,288,1.175,289,1.571,290,2.1,291,1.502,292,1.649,293,2.1,294,1.577,295,1.301,296,2.581,297,0.975,298,2.446,299,2.581,300,1.931,301,1.931,302,2.322,303,1.931,305,1.931,306,1.931,307,1.904,308,2.037,309,1.833,339,1.814,603,3.77,605,3.77,606,3.77,607,3.77,936,4.093,985,3.55,986,3.978,999,4.659,1407,3.55,1445,3.978,1446,3.978,1447,3.978,1448,4.628,1449,4.628,1450,5.865,1451,4.628]],["title/modules/TasksModule.html",[274,0.251,357,2.372]],["body/modules/TasksModule.html",[0,0.108,2,0.189,3,0.165,7,0.142,9,0.264,10,1.42,12,0.622,36,0.485,39,0.019,52,1.489,77,0.379,78,0.189,79,1.196,81,0.215,82,0.096,113,0.712,120,2.736,179,1.658,192,1.254,230,0.013,231,0.521,268,1.62,273,0.013,274,0.491,276,1.196,277,2.008,278,1.316,283,1.803,284,1.381,286,1.803,288,1.113,289,1.289,290,1.989,291,1.381,292,1.739,293,1.989,294,1.45,295,1.196,297,0.896,314,1.989,328,2.372,339,1.914,357,4.859,444,2.722,463,2.372,474,2.372,520,2.877,561,1.872,564,2.225,601,3.097,602,3.097,614,2.969,620,2.969,635,2.539,665,3.263,701,4.261,705,4.261,718,3.657,719,3.657,720,2.969,721,3.657,722,3.657,723,3.657,925,4.485,1267,4.485,1281,3.657,1283,3.263,1452,3.657,1453,3.657,1454,3.657,1455,4.485,1456,4.485,1457,4.254,1458,4.254,1459,3.657,1460,4.254,1461,4.254,1462,4.254]],["title/modules/TasksRoutingModule.html",[274,0.251,1455,2.372]],["body/modules/TasksRoutingModule.html",[0,0.139,2,0.222,3,0.194,7,0.166,39,0.019,43,3.426,75,1.404,77,0.369,78,0.222,79,1.404,81,0.239,82,0.113,99,1.545,113,0.837,124,1.277,230,0.015,245,1.428,250,1.428,261,1.547,268,1.428,273,0.015,274,0.486,288,1.001,289,1.16,292,1.729,314,2.202,315,4.294,316,4.719,317,2.614,318,4.294,379,4.294,380,3.487,381,4.294,471,2.614,621,4.294,1455,3.954,1459,4.294,1463,4.996,1464,4.294,1465,4.294,1466,4.996,1467,4.996,1468,4.996,1469,4.996,1470,4.996]],["title/modules/TasksTableModule.html",[274,0.251,1456,2.372]],["body/modules/TasksTableModule.html",[0,0.124,2,0.178,3,0.156,7,0.134,9,0.249,36,0.466,39,0.019,48,3.732,73,0.978,77,0.38,78,0.178,79,1.129,81,0.207,82,0.091,90,1.303,113,0.79,120,2.634,179,1.076,192,1.184,230,0.013,231,0.492,245,1.652,261,1.652,271,1.754,273,0.013,274,0.467,276,1.129,277,1.952,278,1.242,283,1.736,284,1.303,286,1.736,287,2.353,288,1.071,289,1.488,290,1.914,291,1.303,292,1.503,293,1.914,294,1.368,295,1.129,296,2.353,297,0.845,298,1.674,299,2.353,300,1.674,301,2.23,302,2.538,303,2.23,304,3.451,305,2.23,306,1.674,307,1.952,308,1.766,309,1.59,310,3.451,314,1.914,339,1.654,362,4.101,561,1.766,601,2.981,602,2.981,608,3.437,609,2.238,610,3.437,620,2.802,621,4.196,652,3.437,701,3.079,819,3.079,930,4.098,931,4.098,934,4.101,937,4.596,938,3.732,939,3.079,940,3.451,941,3.451,942,3.451,1390,4.098,1394,3.451,1395,3.451,1456,4.844,1464,3.451,1465,3.451,1471,3.451,1472,3.451,1473,4.014,1474,3.451,1475,4.014,1476,5.347,1477,5.347,1478,5.347]],["title/injectables/UtilsService.html",[444,1.624,559,1.088]],["body/injectables/UtilsService.html",[0,0.094,2,0.154,3,0.134,7,0.115,9,0.345,12,0.507,22,0.661,23,1.019,26,1.241,27,1.305,28,1.866,33,1.023,36,0.588,38,1.809,39,0.019,40,1.173,41,1.285,42,1.541,46,2.097,52,1.297,53,1.643,58,3.056,60,2.129,69,1.073,72,2.654,75,1.567,76,1.821,77,0.318,78,0.154,80,1.241,81,0.188,82,0.078,84,2.42,89,1.567,90,1.126,99,1.073,107,2.66,108,1.649,120,2.383,123,3.76,135,3.11,139,3.663,140,3.702,151,2.531,163,1.873,164,3.437,170,2.805,199,2.95,230,0.012,273,0.012,297,0.73,337,1.995,380,3.377,390,2.383,444,2.129,465,3.11,498,2.325,515,3.11,516,3.877,518,2.452,519,2.654,528,2.207,559,1.643,563,2.229,720,3.377,816,3.442,834,3.89,955,4.275,961,3.896,962,3.89,965,3.877,974,3.582,981,4.626,990,2.229,1139,4.275,1232,4.159,1409,4.275,1479,2.66,1480,4.159,1481,6.57,1482,6.031,1483,6.57,1484,6.343,1485,6.031,1486,4.839,1487,4.839,1488,3.468,1489,6.743,1490,4.839,1491,4.839,1492,6.031,1493,3.468,1494,4.839,1495,4.839,1496,4.839,1497,3.468,1498,3.468,1499,6.031,1500,3.468,1501,6.031,1502,3.468,1503,4.839,1504,4.839,1505,2.981,1506,4.839,1507,3.468,1508,3.468,1509,3.468,1510,3.468,1511,3.468,1512,3.468,1513,3.468,1514,3.468,1515,3.468,1516,3.468,1517,3.468,1518,3.468,1519,3.468,1520,3.468,1521,3.468,1522,3.468,1523,3.468,1524,3.468]],["title/coverage.html",[1525,3.874]],["body/coverage.html",[0,0.149,1,0.925,7,0.139,8,3.595,39,0.019,41,0.797,82,0.139,89,1.176,107,5.668,110,1.121,113,0.706,115,2.706,230,0.013,237,1.019,239,1.019,241,1.019,243,1.019,245,0.971,247,1.019,249,1.019,250,0.971,252,1.019,254,1.019,256,1.019,259,0.971,261,0.971,262,1.019,264,1.019,266,1.019,268,0.971,269,1.019,271,1.069,273,0.013,319,3.595,332,2.332,340,2.688,367,2.919,384,3.208,385,3.208,386,3.595,388,2.688,436,3.595,444,1.84,470,2.688,473,2.688,501,3.208,502,4.039,518,1.84,519,1.84,520,1.945,559,2.087,612,3.595,613,4.706,623,3.208,654,2.919,655,4.214,656,4.214,688,3.208,709,2.919,725,3.208,726,2.688,769,3.208,932,2.688,945,3.595,954,3.595,1007,3.595,1072,3.595,1073,3.595,1132,4.214,1140,2.332,1145,4.214,1155,3.595,1156,3.595,1162,4.282,1170,3.595,1171,3.595,1175,3.595,1178,3.595,1187,3.208,1188,3.595,1284,3.208,1297,3.595,1305,3.208,1306,3.595,1402,3.595,1407,3.208,1408,3.595,1474,3.595,1479,3.208,1525,3.208,1526,3.595,1527,4.182,1528,6.134,1529,4.182,1530,6.134,1531,5.493,1532,6.134,1533,6.515,1534,4.706,1535,6.134,1536,6.134,1537,5.493,1538,4.182,1539,4.182,1540,5.493,1541,4.182,1542,4.182,1543,5.493,1544,4.182,1545,4.182,1546,4.182,1547,5.493,1548,4.182,1549,4.182,1550,4.182,1551,4.182,1552,4.182,1553,4.182,1554,4.182,1555,4.182,1556,4.182,1557,4.182,1558,4.182,1559,4.182,1560,4.182,1561,4.182,1562,4.182,1563,4.182,1564,4.182,1565,4.182,1566,4.182,1567,4.182,1568,3.595,1569,4.214,1570,3.595,1571,4.182]],["title/dependencies.html",[276,1.249,1572,2.642]],["body/dependencies.html",[39,0.019,78,0.23,79,1.454,80,2.25,230,0.015,273,0.015,276,1.454,291,1.679,294,1.763,295,1.454,297,1.323,298,2.158,300,2.158,301,2.158,302,2.68,303,2.621,305,2.621,306,2.158,307,2.04,360,4.82,361,4.386,558,4.04,561,2.276,609,2.884,1573,5.173,1574,7.544,1575,5.173,1576,6.769,1577,5.173,1578,5.173,1579,5.173,1580,5.173,1581,5.173,1582,5.173,1583,5.173,1584,4.447,1585,5.173,1586,6.284,1587,5.173,1588,5.173,1589,4.447,1590,4.447,1591,5.173,1592,5.173,1593,5.173,1594,5.173,1595,6.284,1596,5.173,1597,5.173,1598,5.173]],["title/index.html",[22,0.586,700,1.976,1599,2.642]],["body/index.html",[0,0.084,1,0.496,3,0.167,7,0.144,9,0.139,10,0.573,11,0.573,12,0.988,23,0.472,36,0.196,39,0.013,40,0.472,42,0.895,45,0.844,48,2.446,49,0.985,57,1.339,58,2.606,59,1.928,71,0.803,74,0.844,90,0.728,94,2.267,97,3.01,109,3.308,110,0.601,112,4.18,113,0.733,114,1.001,116,2.092,118,2.252,119,3.01,120,1.105,122,3.012,123,1.251,124,0.895,126,2.766,127,2.718,129,1.721,130,4.19,131,3.012,132,1.721,133,4.056,134,1.928,135,1.442,139,1.251,140,1.833,146,3.611,149,2.252,151,1.173,152,1.928,153,2.772,154,3.012,155,1.928,156,1.721,157,6.261,158,3.707,160,3.01,167,1.339,168,2.092,172,3.012,175,1.339,176,1.251,181,1.833,188,3.739,190,3.012,199,1.043,201,1.721,203,1.833,204,1.442,206,1.721,215,4.093,218,1.339,219,1.954,220,1.339,221,3.012,224,1.928,229,4.19,230,0.008,273,0.008,276,1.576,278,0.694,286,1.4,288,1.3,295,0.631,307,0.728,309,1.387,320,1.63,321,2.252,325,3.764,361,4.087,380,1.566,389,2.446,391,1.566,423,3.012,461,1.721,464,1.566,488,1.721,522,2.772,576,1.566,619,3.912,633,1.928,635,2.574,637,4.776,648,3.012,662,2.092,663,1.928,667,5.207,680,1.566,700,2.772,790,3.012,792,3.012,794,1.928,801,1.721,830,1.566,834,3.01,866,3.707,867,1.928,868,3.012,870,1.928,871,2.688,958,1.928,1015,3.012,1040,3.012,1076,3.012,1167,1.928,1287,1.721,1288,1.721,1289,1.721,1290,1.721,1302,1.566,1307,5.744,1377,5.207,1409,1.721,1424,1.928,1437,5.873,1480,1.928,1505,1.928,1525,4.299,1526,5.666,1569,1.721,1572,3.012,1589,1.928,1590,1.928,1599,1.928,1600,2.243,1601,2.243,1602,2.243,1603,2.243,1604,2.243,1605,2.243,1606,7.092,1607,4.874,1608,2.243,1609,5.287,1610,3.504,1611,5.604,1612,3.504,1613,5.287,1614,2.243,1615,4.874,1616,2.243,1617,2.243,1618,2.243,1619,3.504,1620,2.243,1621,4.312,1622,2.243,1623,4.312,1624,5.855,1625,6.226,1626,6.368,1627,4.312,1628,4.874,1629,6.833,1630,4.312,1631,3.504,1632,3.504,1633,2.243,1634,2.243,1635,4.312,1636,4.312,1637,4.312,1638,3.504,1639,4.312,1640,5.855,1641,3.504,1642,2.243,1643,2.243,1644,7.483,1645,6.592,1646,6.368,1647,6.226,1648,6.058,1649,2.243,1650,2.243,1651,2.243,1652,2.243,1653,2.243,1654,2.243,1655,6.833,1656,2.243,1657,6.368,1658,2.243,1659,4.312,1660,6.058,1661,2.243,1662,4.874,1663,2.243,1664,2.243,1665,2.243,1666,2.243,1667,2.243,1668,2.243,1669,2.243,1670,2.243,1671,2.243,1672,2.243,1673,2.243,1674,2.243,1675,6.058,1676,2.243,1677,2.243,1678,2.243,1679,3.504,1680,3.504,1681,2.243,1682,2.243,1683,2.243,1684,2.243,1685,2.243,1686,4.312,1687,2.243,1688,4.312,1689,4.874,1690,5.604,1691,2.243,1692,2.243,1693,2.243,1694,2.243,1695,2.243,1696,3.504,1697,2.243,1698,6.833,1699,5.855,1700,5.287,1701,2.243,1702,2.243,1703,2.243,1704,2.243,1705,2.243,1706,2.243,1707,2.243,1708,3.504,1709,2.243,1710,4.874,1711,5.287,1712,2.243,1713,2.243,1714,3.012,1715,3.504,1716,2.243,1717,2.243,1718,2.243,1719,2.243,1720,2.243,1721,2.243,1722,4.312,1723,3.504,1724,3.504,1725,2.243,1726,2.243,1727,2.243,1728,2.243,1729,3.504,1730,2.243,1731,3.504,1732,2.243,1733,2.243,1734,2.243,1735,2.243,1736,2.243,1737,5.287,1738,2.243,1739,2.243,1740,2.243,1741,2.243,1742,2.243,1743,2.243,1744,4.312,1745,2.243,1746,2.243,1747,2.243,1748,3.504,1749,3.504,1750,2.243,1751,2.243,1752,2.243,1753,2.243,1754,3.504,1755,2.243,1756,2.243,1757,2.243,1758,2.243,1759,3.504,1760,4.312,1761,2.243,1762,2.243,1763,2.243,1764,2.243,1765,2.243,1766,2.243,1767,2.243,1768,3.504,1769,2.243,1770,2.243,1771,2.243,1772,2.243,1773,2.243,1774,2.243,1775,2.243,1776,2.243,1777,2.243,1778,2.243,1779,2.243,1780,2.243]],["title/modules.html",[274,0.344]],["body/modules.html",[39,0.015,91,6.647,149,4.516,230,0.015,273,0.015,274,0.35,275,3.304,282,3.304,302,3.062,348,3.304,353,3.304,354,3.304,355,3.304,356,3.304,357,3.304,361,5.398,597,3.304,649,3.304,760,3.304,764,2.866,925,3.304,930,3.068,931,3.068,999,3.304,1267,3.304,1390,3.068,1455,3.304,1456,3.304,1714,6.693,1781,7.025]],["title/overview.html",[1782,4.341]],["body/overview.html",[0,0.069,1,1.245,39,0.019,43,1.742,81,0.137,82,0.08,117,2.273,179,0.948,192,1.043,194,2.468,230,0.012,231,0.433,237,1.651,239,1.651,241,1.651,243,1.372,245,1.307,247,1.372,249,1.372,250,1.307,252,1.651,254,1.651,256,1.372,259,1.307,261,1.307,262,1.372,264,1.651,266,1.651,268,1.307,269,1.651,271,1.439,273,0.012,274,0.334,275,4.358,276,0.994,277,1.148,278,1.094,279,3.04,280,3.04,281,3.04,282,3.62,283,1.592,284,1.148,348,4.824,349,3.04,350,3.04,351,3.04,352,3.04,353,3.62,354,3.62,355,4.25,356,4.443,357,4.689,559,1.043,597,4.107,598,3.04,599,3.04,649,4.107,650,3.04,651,3.04,760,4.358,761,3.04,762,3.04,763,3.04,764,3.854,925,4.745,926,3.04,927,3.04,928,3.04,929,3.04,930,4.189,931,4.241,932,3.62,949,3.04,950,3.04,951,3.04,995,3.04,996,3.04,997,3.04,998,3.04,999,4.25,1140,1.972,1267,4.567,1268,3.04,1269,3.04,1271,3.04,1381,3.04,1382,3.04,1383,3.04,1386,3.04,1387,3.04,1388,3.04,1389,3.04,1390,4.047,1396,3.04,1397,3.04,1398,3.04,1445,3.04,1446,3.04,1447,3.04,1452,3.04,1453,3.04,1454,3.04,1455,3.62,1456,4.745,1471,3.04,1472,3.04,1584,3.04,1782,3.04,1783,4.905,1784,3.536]],["title/routes.html",[43,2.488]],["body/routes.html",[39,0.017,43,2.992,230,0.017,273,0.017]],["title/miscellaneous/typealiases.html",[1785,2.146,1786,4.442]],["body/miscellaneous/typealiases.html",[22,1.101,39,0.018,41,1.279,113,0.665,149,3.715,174,4.034,175,3.449,230,0.016,273,0.016,961,3.222,962,4.034,974,3.715,981,5.441,1284,4.433,1300,6.097,1302,4.034,1303,4.433,1479,4.433,1785,4.034,1787,5.779,1788,5.779,1789,5.779]],["title/miscellaneous/variables.html",[1534,3.407,1785,2.146]],["body/miscellaneous/variables.html",[22,1.063,39,0.019,41,1.253,75,1.965,76,2.099,108,1.901,230,0.016,273,0.016,337,2.502,655,4.279,656,5.043,688,5.362,689,4.795,1534,4.279,1568,4.795,1569,5.724,1570,4.795,1785,3.893,1790,5.578,1791,5.578,1792,5.578,1793,7.218,1794,6.574]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1162,"title":{},"body":{"injectables/MatPaginatorCustom.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"coverage.html":{}}}],["0.1.0",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["0.8.26",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":117,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"overview.html":{}}}],["1.2.1",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["1.22.0",{"_index":1653,"title":{},"body":{"index.html":{}}}],["1/1",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1562,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1584,"title":{},"body":{"dependencies.html":{},"overview.html":{}}}],["10/10",{"_index":1552,"title":{},"body":{"coverage.html":{}}}],["10/11",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["10/12",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["100vh",{"_index":1236,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["100vw",{"_index":1234,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["13/14",{"_index":1563,"title":{},"body":{"coverage.html":{}}}],["13/15",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["14/15",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["15/16",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["15/17",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["16/17",{"_index":1565,"title":{},"body":{"coverage.html":{}}}],["18.06.0",{"_index":1649,"title":{},"body":{"index.html":{}}}],["19075",{"_index":1652,"title":{},"body":{"index.html":{}}}],["2",{"_index":160,"title":{},"body":{"components/AboutComponent.html":{},"injectables/HttpService.html":{},"components/SidenavTasksComponent.html":{},"index.html":{}}}],["2.0.8",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["2.22.2",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["2.5.7",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1533,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1783,"title":{},"body":{"overview.html":{}}}],["2000",{"_index":859,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["2018",{"_index":948,"title":{},"body":{"components/FooterComponent.html":{}}}],["23/25",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":1561,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":194,"title":{},"body":{"components/AboutComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"overview.html":{}}}],["3000",{"_index":1703,"title":{},"body":{"index.html":{}}}],["31/31",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["32/33",{"_index":1567,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":208,"title":{},"body":{"components/AboutComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/SidenavTasksComponent.html":{}}}],["4.7.0",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":382,"title":{},"body":{"modules/AppRoutingModule.html":{},"components/EditTaskComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["5",{"_index":211,"title":{},"body":{"components/AboutComponent.html":{}}}],["5.1.1",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":477,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{}}}],["6",{"_index":1612,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["6.0.9",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":1656,"title":{},"body":{"index.html":{}}}],["6.2.2",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1784,"title":{},"body":{"overview.html":{}}}],["7/8",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1232,"title":{},"body":{"components/SidenavTasksComponent.html":{},"injectables/UtilsService.html":{}}}],["8.9.1",{"_index":1654,"title":{},"body":{"index.html":{}}}],["8/10",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1530,"title":{},"body":{"coverage.html":{}}}],["86",{"_index":1557,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1559,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":1551,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":1550,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["94",{"_index":1564,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":1566,"title":{},"body":{"coverage.html":{}}}],["_sidenavmenuchang",{"_index":1482,"title":{},"body":{"injectables/UtilsService.html":{}}}],["about'},{'nam",{"_index":236,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["about.compon",{"_index":311,"title":{},"body":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{}}}],["about.component.css",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.rout",{"_index":312,"title":{},"body":{"modules/AboutModule.html":{}}}],["about/about.modul",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["about/about.module#aboutmodul",{"_index":378,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["aboutcompon",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["aboutel",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{}}}],["aboutmodul",{"_index":275,"title":{"modules/AboutModule.html":{}},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aboutroutingmodul",{"_index":282,"title":{"modules/AboutRoutingModule.html":{}},"body":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["abov",{"_index":201,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"index.html":{}}}],["abstract",{"_index":1149,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["access",{"_index":309,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"index.html":{}}}],["accessor",{"_index":677,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["accordingli",{"_index":1426,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["acknowledg",{"_index":1764,"title":{},"body":{"index.html":{}}}],["action",{"_index":1014,"title":{},"body":{"injectables/HttpService.html":{}}}],["activatedrout",{"_index":35,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["actual",{"_index":225,"title":{},"body":{"components/AboutComponent.html":{}}}],["actual_compon",{"_index":272,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["ad",{"_index":792,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["adapt",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["add",{"_index":90,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["addit",{"_index":1642,"title":{},"body":{"index.html":{}}}],["addition",{"_index":150,"title":{},"body":{"components/AboutComponent.html":{}}}],["after.clearvalid",{"_index":1369,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["after.dis",{"_index":1368,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["after.en",{"_index":1372,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["after.setvalidators([validators.requir",{"_index":1373,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["after.updatevalueandvalid",{"_index":1370,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["afterviewinit",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"components/TasksFilterComponent.html":{}}}],["again",{"_index":1684,"title":{},"body":{"index.html":{}}}],["against",{"_index":1718,"title":{},"body":{"index.html":{}}}],["alias",{"_index":1787,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allif",{"_index":1678,"title":{},"body":{"index.html":{}}}],["allow",{"_index":554,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ListItemComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["along",{"_index":543,"title":{},"body":{"components/CompleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["alreadi",{"_index":717,"title":{},"body":{"modules/CoreModule.html":{}}}],["anchor",{"_index":92,"title":{},"body":{"components/AboutComponent.html":{}}}],["and/or",{"_index":198,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["angular",{"_index":288,"title":{},"body":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"index.html":{}}}],["angular/angular",{"_index":1010,"title":{},"body":{"injectables/HttpService.html":{}}}],["angular/anim",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":1507,"title":{},"body":{"injectables/UtilsService.html":{}}}],["angular/common",{"_index":291,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":704,"title":{},"body":{"modules/CoreModule.html":{},"injectables/HttpService.html":{}}}],["angular/compil",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":294,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["angular/form",{"_index":561,"title":{},"body":{"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["angular/http",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["angular/materi",{"_index":297,"title":{},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"injectables/MatPaginatorCustom.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"dependencies.html":{}}}],["angular/rout",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutRoutingModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonsComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["answer",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{}}}],["anyth",{"_index":182,"title":{},"body":{"components/AboutComponent.html":{}}}],["api",{"_index":637,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"injectables/HttpService.html":{},"index.html":{}}}],["apidoc",{"_index":1749,"title":{},"body":{"index.html":{}}}],["app",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["app.compon",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":326,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":327,"title":{},"body":{"components/AppComponent.html":{}}}],["app.rout",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["app/core/services/logger.servic",{"_index":563,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"injectables/UtilsService.html":{}}}],["appcompon",{"_index":237,"title":{"components/AppComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["appli",{"_index":1088,"title":{},"body":{"components/ListItemComponent.html":{}}}],["applic",{"_index":112,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"index.html":{}}}],["application/json",{"_index":1064,"title":{},"body":{"injectables/HttpService.html":{}}}],["appmodul",{"_index":348,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["approut",{"_index":376,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["approutingmodul",{"_index":353,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["arg",{"_index":672,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["argument",{"_index":674,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"injectables/HttpService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["around",{"_index":718,"title":{},"body":{"modules/CoreModule.html":{},"modules/TasksModule.html":{}}}],["array",{"_index":389,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"index.html":{}}}],["ascend",{"_index":128,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{}}}],["associ",{"_index":665,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"modules/TasksModule.html":{}}}],["async",{"_index":1726,"title":{},"body":{"index.html":{}}}],["audit",{"_index":1681,"title":{},"body":{"index.html":{}}}],["authent",{"_index":1012,"title":{},"body":{"injectables/HttpService.html":{}}}],["author",{"_index":1757,"title":{},"body":{"index.html":{}}}],["automat",{"_index":1694,"title":{},"body":{"index.html":{}}}],["avail",{"_index":149,"title":{},"body":{"components/AboutComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["awesom",{"_index":1590,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["back",{"_index":421,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/EditTaskComponent.html":{}}}],["badg",{"_index":1091,"title":{},"body":{"components/ListItemComponent.html":{}}}],["bar",{"_index":200,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/HeaderComponent.html":{},"modules/TasksButtonBarModule.html":{}}}],["bar'},{'nam",{"_index":240,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["bar.compon",{"_index":820,"title":{},"body":{"components/EditTaskComponent.html":{},"modules/TasksButtonBarModule.html":{}}}],["bar.component.css",{"_index":395,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.html",{"_index":396,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.t",{"_index":386,"title":{},"body":{"components/ButtonBarComponent.html":{},"coverage.html":{}}}],["bar.component.ts:22",{"_index":410,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:24",{"_index":411,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:26",{"_index":412,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:28",{"_index":414,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:30",{"_index":415,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:32",{"_index":416,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:34",{"_index":417,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:36",{"_index":418,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:38",{"_index":419,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:40",{"_index":422,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:42",{"_index":425,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:44",{"_index":428,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:46",{"_index":431,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.component.ts:48",{"_index":409,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["bar.modul",{"_index":940,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksTableModule.html":{}}}],["bar.module.t",{"_index":1391,"title":{},"body":{"modules/TasksButtonBarModule.html":{}}}],["bar/button",{"_index":385,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/EditTaskComponent.html":{},"coverage.html":{}}}],["bar/task",{"_index":939,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksTableModule.html":{}}}],["base",{"_index":94,"title":{},"body":{"components/AboutComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["basic",{"_index":466,"title":{},"body":{"components/ButtonsComponent.html":{},"injectables/ConsoleLoggerService.html":{}}}],["be",{"_index":427,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{}}}],["befor",{"_index":1040,"title":{},"body":{"injectables/HttpService.html":{},"index.html":{}}}],["behaviorsubject",{"_index":1501,"title":{},"body":{"injectables/UtilsService.html":{}}}],["behaviorsubject(fals",{"_index":1509,"title":{},"body":{"injectables/UtilsService.html":{}}}],["belong",{"_index":814,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["below",{"_index":97,"title":{},"body":{"components/AboutComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["beta.16",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["between",{"_index":721,"title":{},"body":{"modules/CoreModule.html":{},"modules/TasksModule.html":{}}}],["bind",{"_index":660,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["bodi",{"_index":1042,"title":{},"body":{"injectables/HttpService.html":{}}}],["boolean",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["bootstrap",{"_index":278,"title":{},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"index.html":{},"overview.html":{}}}],["both",{"_index":1377,"title":{},"body":{"components/TaskFormComponent.html":{},"index.html":{}}}],["bottom",{"_index":184,"title":{},"body":{"components/AboutComponent.html":{}}}],["bound",{"_index":661,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["break",{"_index":1683,"title":{},"body":{"index.html":{}}}],["breakpoint",{"_index":1505,"title":{},"body":{"injectables/UtilsService.html":{},"index.html":{}}}],["breakpointobserv",{"_index":1489,"title":{},"body":{"injectables/UtilsService.html":{}}}],["breakpoints.smal",{"_index":1513,"title":{},"body":{"injectables/UtilsService.html":{}}}],["breakpointst",{"_index":1506,"title":{},"body":{"injectables/UtilsService.html":{}}}],["brows",{"_index":1714,"title":{},"body":{"index.html":{},"modules.html":{}}}],["browser",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/anim",{"_index":707,"title":{},"body":{"modules/CoreModule.html":{}}}],["browseranimationsmodul",{"_index":706,"title":{},"body":{"modules/CoreModule.html":{}}}],["browsermodul",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":1657,"title":{},"body":{"index.html":{}}}],["buildthat",{"_index":1661,"title":{},"body":{"index.html":{}}}],["built",{"_index":1611,"title":{},"body":{"index.html":{}}}],["bulk",{"_index":636,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["button",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksTableModule.html":{}}}],["buttonbar",{"_index":771,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["buttonbarcompon",{"_index":239,"title":{"components/ButtonBarComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonBarModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["buttonclass",{"_index":1083,"title":{},"body":{"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["buttons'},{'nam",{"_index":242,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["buttons.component.css",{"_index":437,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["buttons.component.html",{"_index":438,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["buttons.modul",{"_index":1395,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"modules/TasksTableModule.html":{}}}],["buttons.module.t",{"_index":1400,"title":{},"body":{"modules/TasksButtonsModule.html":{}}}],["buttonscompon",{"_index":241,"title":{"components/ButtonsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["cancel",{"_index":509,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["capabl",{"_index":391,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"modules/TasksButtonsModule.html":{},"index.html":{}}}],["cdk",{"_index":1616,"title":{},"body":{"index.html":{}}}],["ce",{"_index":1650,"title":{},"body":{"index.html":{}}}],["chai",{"_index":1707,"title":{},"body":{"index.html":{}}}],["challeng",{"_index":1767,"title":{},"body":{"index.html":{}}}],["chang",{"_index":834,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["changedetector",{"_index":785,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["changedetectorref",{"_index":331,"title":{},"body":{"components/AppComponent.html":{},"components/EditTaskComponent.html":{}}}],["check",{"_index":905,"title":{},"body":{"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{}}}],["checkbox",{"_index":207,"title":{},"body":{"components/AboutComponent.html":{}}}],["checkerror",{"_index":510,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["checkerror(param",{"_index":527,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["checkerror(properti",{"_index":1321,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["checkformerror",{"_index":1314,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["checkformerror(form",{"_index":1323,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["children",{"_index":1467,"title":{},"body":{"modules/TasksRoutingModule.html":{}}}],["chrome",{"_index":154,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["class",{"_index":82,"title":{"classes/Logger.html":{},"classes/Task.html":{}},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["class.mark",{"_index":513,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["classmark",{"_index":566,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["clean",{"_index":798,"title":{},"body":{"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["clear",{"_index":1415,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["click",{"_index":161,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["client",{"_index":1606,"title":{},"body":{"index.html":{}}}],["clipboard",{"_index":904,"title":{},"body":{"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["clone",{"_index":1630,"title":{},"body":{"index.html":{}}}],["close",{"_index":526,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["cluster_aboutmodul",{"_index":279,"title":{},"body":{"modules/AboutModule.html":{},"overview.html":{}}}],["cluster_aboutmodule_declar",{"_index":280,"title":{},"body":{"modules/AboutModule.html":{},"overview.html":{}}}],["cluster_aboutmodule_import",{"_index":281,"title":{},"body":{"modules/AboutModule.html":{},"overview.html":{}}}],["cluster_appmodul",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declar",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_import",{"_index":351,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_completetaskmodul",{"_index":598,"title":{},"body":{"modules/CompleteTaskModule.html":{},"overview.html":{}}}],["cluster_completetaskmodule_declar",{"_index":599,"title":{},"body":{"modules/CompleteTaskModule.html":{},"overview.html":{}}}],["cluster_confirmdeletetaskmodul",{"_index":650,"title":{},"body":{"modules/ConfirmDeleteTaskModule.html":{},"overview.html":{}}}],["cluster_confirmdeletetaskmodule_declar",{"_index":651,"title":{},"body":{"modules/ConfirmDeleteTaskModule.html":{},"overview.html":{}}}],["cluster_createtaskmodul",{"_index":761,"title":{},"body":{"modules/CreateTaskModule.html":{},"overview.html":{}}}],["cluster_createtaskmodule_declar",{"_index":762,"title":{},"body":{"modules/CreateTaskModule.html":{},"overview.html":{}}}],["cluster_createtaskmodule_import",{"_index":763,"title":{},"body":{"modules/CreateTaskModule.html":{},"overview.html":{}}}],["cluster_edittaskmodul",{"_index":926,"title":{},"body":{"modules/EditTaskModule.html":{},"overview.html":{}}}],["cluster_edittaskmodule_declar",{"_index":927,"title":{},"body":{"modules/EditTaskModule.html":{},"overview.html":{}}}],["cluster_edittaskmodule_import",{"_index":928,"title":{},"body":{"modules/EditTaskModule.html":{},"overview.html":{}}}],["cluster_edittaskmodule_provid",{"_index":929,"title":{},"body":{"modules/EditTaskModule.html":{},"overview.html":{}}}],["cluster_footermodul",{"_index":949,"title":{},"body":{"modules/FooterModule.html":{},"overview.html":{}}}],["cluster_footermodule_declar",{"_index":950,"title":{},"body":{"modules/FooterModule.html":{},"overview.html":{}}}],["cluster_footermodule_export",{"_index":951,"title":{},"body":{"modules/FooterModule.html":{},"overview.html":{}}}],["cluster_headermodul",{"_index":995,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_headermodule_declar",{"_index":996,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_headermodule_export",{"_index":998,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_headermodule_import",{"_index":997,"title":{},"body":{"modules/HeaderModule.html":{},"overview.html":{}}}],["cluster_sidenavtasksmodul",{"_index":1268,"title":{},"body":{"modules/SidenavTasksModule.html":{},"overview.html":{}}}],["cluster_sidenavtasksmodule_declar",{"_index":1269,"title":{},"body":{"modules/SidenavTasksModule.html":{},"overview.html":{}}}],["cluster_sidenavtasksmodule_export",{"_index":1271,"title":{},"body":{"modules/SidenavTasksModule.html":{},"overview.html":{}}}],["cluster_sidenavtasksmodule_import",{"_index":1270,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["cluster_taskformmodul",{"_index":1381,"title":{},"body":{"modules/TaskFormModule.html":{},"overview.html":{}}}],["cluster_taskformmodule_declar",{"_index":1382,"title":{},"body":{"modules/TaskFormModule.html":{},"overview.html":{}}}],["cluster_taskformmodule_export",{"_index":1383,"title":{},"body":{"modules/TaskFormModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonbarmodul",{"_index":1386,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonbarmodule_declar",{"_index":1387,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonbarmodule_export",{"_index":1389,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonbarmodule_import",{"_index":1388,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonsmodul",{"_index":1396,"title":{},"body":{"modules/TasksButtonsModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonsmodule_declar",{"_index":1397,"title":{},"body":{"modules/TasksButtonsModule.html":{},"overview.html":{}}}],["cluster_tasksbuttonsmodule_export",{"_index":1398,"title":{},"body":{"modules/TasksButtonsModule.html":{},"overview.html":{}}}],["cluster_tasksdialogmodul",{"_index":1403,"title":{},"body":{"modules/TasksDialogModule.html":{}}}],["cluster_tasksdialogmodule_import",{"_index":1404,"title":{},"body":{"modules/TasksDialogModule.html":{}}}],["cluster_tasksfiltermodul",{"_index":1445,"title":{},"body":{"modules/TasksFilterModule.html":{},"overview.html":{}}}],["cluster_tasksfiltermodule_declar",{"_index":1446,"title":{},"body":{"modules/TasksFilterModule.html":{},"overview.html":{}}}],["cluster_tasksfiltermodule_export",{"_index":1447,"title":{},"body":{"modules/TasksFilterModule.html":{},"overview.html":{}}}],["cluster_tasksmodul",{"_index":1452,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_declar",{"_index":1453,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_import",{"_index":1454,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_taskstablemodul",{"_index":1471,"title":{},"body":{"modules/TasksTableModule.html":{},"overview.html":{}}}],["cluster_taskstablemodule_declar",{"_index":1472,"title":{},"body":{"modules/TasksTableModule.html":{},"overview.html":{}}}],["cluster_taskstablemodule_import",{"_index":1473,"title":{},"body":{"modules/TasksTableModule.html":{}}}],["code",{"_index":1628,"title":{},"body":{"index.html":{}}}],["collaps",{"_index":962,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["color",{"_index":791,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["column",{"_index":214,"title":{},"body":{"components/AboutComponent.html":{}}}],["command",{"_index":1629,"title":{},"body":{"index.html":{}}}],["commonmodul",{"_index":290,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["compat",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["complet",{"_index":114,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["completedtask",{"_index":617,"title":{},"body":{"components/CompleteTasksTableComponent.html":{}}}],["completeselecteddialogref",{"_index":481,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["completeselecteddialogref.componentinstance.completetask.subscrib",{"_index":486,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["completetask",{"_index":485,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{}}}],["completetaskcompon",{"_index":243,"title":{"components/CompleteTaskComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["completetaskmodul",{"_index":597,"title":{"modules/CompleteTaskModule.html":{}},"body":{"modules/CompleteTaskModule.html":{},"modules/TasksDialogModule.html":{},"modules.html":{},"overview.html":{}}}],["completetaskstablecompon",{"_index":245,"title":{"components/CompleteTasksTableComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"coverage.html":{},"overview.html":{}}}],["compodoc",{"_index":1748,"title":{},"body":{"index.html":{}}}],["compon",{"_index":0,"title":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_templ",{"_index":235,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["components/pag",{"_index":366,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["compos",{"_index":1646,"title":{},"body":{"index.html":{}}}],["configur",{"_index":1626,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":210,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["confirmdeletedialogref",{"_index":493,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["confirmdeletedialogref.componentinstance.deletetask.subscrib",{"_index":497,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["confirmdeletetaskcompon",{"_index":247,"title":{"components/ConfirmDeleteTaskComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["confirmdeletetaskmodul",{"_index":649,"title":{"modules/ConfirmDeleteTaskModule.html":{}},"body":{"modules/ConfirmDeleteTaskModule.html":{},"modules/TasksDialogModule.html":{},"modules.html":{},"overview.html":{}}}],["connect",{"_index":1663,"title":{},"body":{"index.html":{}}}],["consist",{"_index":321,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{},"index.html":{}}}],["consol",{"_index":675,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["console)[typ",{"_index":695,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["console.error.bind(consol",{"_index":693,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["console.info.bind(consol",{"_index":691,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["console.log",{"_index":696,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["console.warn.bind(consol",{"_index":692,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["consoleloggerservic",{"_index":654,"title":{"injectables/ConsoleLoggerService.html":{}},"body":{"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"coverage.html":{}}}],["const",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/MatPaginatorCustom.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksRoutingModule.html":{},"injectables/UtilsService.html":{}}}],["constructor",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["constructor(breakpointobserv",{"_index":1488,"title":{},"body":{"injectables/UtilsService.html":{}}}],["constructor(changedetector",{"_index":782,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["constructor(changedetectorref",{"_index":330,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(data",{"_index":514,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["constructor(dialog",{"_index":442,"title":{},"body":{"components/ButtonsComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["constructor(dialogref",{"_index":730,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["constructor(formbuild",{"_index":1316,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["constructor(http",{"_index":1027,"title":{},"body":{"injectables/HttpService.html":{}}}],["constructor(priv",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/UtilsService.html":{}}}],["constructor(rout",{"_index":34,"title":{},"body":{"components/AboutComponent.html":{}}}],["constructor(taskservic",{"_index":1085,"title":{},"body":{"components/ListItemComponent.html":{},"components/TasksFilterComponent.html":{}}}],["constructor(utilsservic",{"_index":970,"title":{},"body":{"components/HeaderComponent.html":{}}}],["contain",{"_index":619,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["content",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"injectables/HttpService.html":{}}}],["context",{"_index":664,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["continu",{"_index":1687,"title":{},"body":{"index.html":{}}}],["conveni",{"_index":308,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{}}}],["copi",{"_index":1622,"title":{},"body":{"index.html":{}}}],["core",{"_index":303,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["core/core.modul",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["core/services/loader.servic",{"_index":341,"title":{},"body":{"components/AppComponent.html":{}}}],["coremodul",{"_index":354,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["coremodule.forroot",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["correct",{"_index":668,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/SidenavTasksComponent.html":{}}}],["correspond",{"_index":790,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["coverag",{"_index":1525,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creat",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["createdialogref",{"_index":1237,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["createtaskcompon",{"_index":249,"title":{"components/CreateTaskComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["createtaskmodul",{"_index":760,"title":{"modules/CreateTaskModule.html":{}},"body":{"modules/CreateTaskModule.html":{},"modules/SidenavTasksModule.html":{},"modules.html":{},"overview.html":{}}}],["creation",{"_index":734,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["css",{"_index":1087,"title":{},"body":{"components/ListItemComponent.html":{}}}],["current",{"_index":227,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/CompleteTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["custom",{"_index":944,"title":{},"body":{"modules/EditTaskModule.html":{},"injectables/HttpService.html":{},"injectables/MatPaginatorCustom.html":{},"components/TasksFilterComponent.html":{}}}],["custom.t",{"_index":1156,"title":{},"body":{"injectables/MatPaginatorCustom.html":{},"coverage.html":{}}}],["custom.ts:10",{"_index":1168,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["custom.ts:11",{"_index":1169,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["custom.ts:13",{"_index":1166,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["d30c21a2f24f",{"_index":1013,"title":{},"body":{"injectables/HttpService.html":{}}}],["daili",{"_index":1287,"title":{},"body":{"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["data",{"_index":522,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["data:ani",{"_index":568,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["databas",{"_index":1610,"title":{},"body":{"index.html":{}}}],["date",{"_index":127,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["datechang",{"_index":1427,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["datecomplet",{"_index":546,"title":{},"body":{"components/CompleteTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{}}}],["datecompletedform",{"_index":505,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["datepick",{"_index":1410,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["day",{"_index":892,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["days').utc",{"_index":890,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["days').utc().format('yyyi",{"_index":1125,"title":{},"body":{"components/ListItemComponent.html":{}}}],["db",{"_index":1690,"title":{},"body":{"index.html":{}}}],["dd",{"_index":1120,"title":{},"body":{"components/ListItemComponent.html":{}}}],["deboucetim",{"_index":1439,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["debouncetim",{"_index":1431,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["debouncetime(150",{"_index":1443,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["decid",{"_index":1774,"title":{},"body":{"index.html":{}}}],["declar",{"_index":277,"title":{},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"overview.html":{}}}],["decor",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/TasksFilterComponent.html":{}}}],["default",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutRoutingModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TasksRoutingModule.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["defaultbadg",{"_index":1216,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["defin",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["delay",{"_index":1436,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["delet",{"_index":115,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/HttpService.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"coverage.html":{}}}],["delete'},{'nam",{"_index":248,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["delete(url",{"_index":1030,"title":{},"body":{"injectables/HttpService.html":{}}}],["deletetask",{"_index":496,"title":{},"body":{"components/ButtonsComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{}}}],["depend",{"_index":276,"title":{"dependencies.html":{}},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["descript",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["design",{"_index":131,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["desir",{"_index":196,"title":{},"body":{"components/AboutComponent.html":{}}}],["desktop",{"_index":147,"title":{},"body":{"components/AboutComponent.html":{}}}],["destori",{"_index":1109,"title":{},"body":{"components/ListItemComponent.html":{}}}],["detail",{"_index":172,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["determin",{"_index":461,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"index.html":{}}}],["develop",{"_index":1688,"title":{},"body":{"index.html":{}}}],["devic",{"_index":135,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["devtool",{"_index":155,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["dialog",{"_index":170,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/TasksDialogModule.html":{},"injectables/UtilsService.html":{}}}],["dialog.modul",{"_index":942,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksTableModule.html":{}}}],["dialog.module.t",{"_index":1406,"title":{},"body":{"modules/TasksDialogModule.html":{}}}],["dialogconfig",{"_index":475,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["dialogconfig.autofocu",{"_index":478,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["dialogconfig.data",{"_index":479,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{}}}],["dialogconfig.maxheight",{"_index":1235,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["dialogconfig.maxwidth",{"_index":1233,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["dialogconfig.width",{"_index":476,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["dialogref",{"_index":515,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"injectables/UtilsService.html":{}}}],["dialogref.afterclosed().subscrib",{"_index":1522,"title":{},"body":{"injectables/UtilsService.html":{}}}],["dialogref.updatesize('100",{"_index":1520,"title":{},"body":{"injectables/UtilsService.html":{}}}],["dialogref.updatesize(larges",{"_index":1521,"title":{},"body":{"injectables/UtilsService.html":{}}}],["differ",{"_index":1440,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["direct",{"_index":233,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["directli",{"_index":958,"title":{},"body":{"components/HeaderComponent.html":{},"index.html":{}}}],["directori",{"_index":1660,"title":{},"body":{"index.html":{}}}],["dirti",{"_index":531,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["disabl",{"_index":392,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["disablecompletebutton",{"_index":397,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["disabledeletebutton",{"_index":398,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["disableeditbutton",{"_index":399,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["disk",{"_index":1693,"title":{},"body":{"index.html":{}}}],["display",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"injectables/MatPaginatorCustom.html":{},"components/PendingTasksTableComponent.html":{},"index.html":{}}}],["displayscrolltotop",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{}}}],["distinctuntilchang",{"_index":1432,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["div",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{}}}],["dive",{"_index":1780,"title":{},"body":{"index.html":{}}}],["divid",{"_index":1605,"title":{},"body":{"index.html":{}}}],["doc",{"_index":1744,"title":{},"body":{"index.html":{}}}],["docbuilt",{"_index":1753,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1645,"title":{},"body":{"index.html":{}}}],["document",{"_index":1526,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["document.queryselector",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{}}}],["doesn't",{"_index":550,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["don't",{"_index":865,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["down",{"_index":178,"title":{},"body":{"components/AboutComponent.html":{}}}],["download",{"_index":1621,"title":{},"body":{"index.html":{}}}],["drift",{"_index":1669,"title":{},"body":{"index.html":{}}}],["driver",{"_index":1756,"title":{},"body":{"index.html":{}}}],["drop",{"_index":177,"title":{},"body":{"components/AboutComponent.html":{}}}],["dropdown",{"_index":1079,"title":{},"body":{"components/ListItemComponent.html":{},"components/TasksFilterComponent.html":{}}}],["due",{"_index":126,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["duebutton",{"_index":956,"title":{},"body":{"components/HeaderComponent.html":{},"components/TasksFilterComponent.html":{}}}],["duedat",{"_index":748,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{}}}],["duedate.format('mm/dd/yyyi",{"_index":903,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["duetodaybadg",{"_index":1221,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["duetomorrowbadg",{"_index":1222,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["dummi",{"_index":1355,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["durat",{"_index":858,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["dynam",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["e2",{"_index":1698,"title":{},"body":{"index.html":{}}}],["e2e:headlessa",{"_index":1732,"title":{},"body":{"index.html":{}}}],["e2e:screenshotsif",{"_index":1742,"title":{},"body":{"index.html":{}}}],["e2ethi",{"_index":1717,"title":{},"body":{"index.html":{}}}],["each",{"_index":635,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/SidenavTasksComponent.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["easi",{"_index":960,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{}}}],["easili",{"_index":1017,"title":{},"body":{"injectables/HttpService.html":{}}}],["edg",{"_index":1737,"title":{},"body":{"index.html":{}}}],["edit",{"_index":251,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["editrecurringtaskform",{"_index":1180,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["edittaskcompon",{"_index":250,"title":{"components/EditTaskComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksRoutingModule.html":{},"coverage.html":{},"overview.html":{}}}],["edittaskmodul",{"_index":925,"title":{"modules/EditTaskModule.html":{}},"body":{"modules/EditTaskModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["element",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["element.scrollintoview({behavior:'smooth",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{}}}],["elementref",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"components/TasksFilterComponent.html":{}}}],["emit",{"_index":429,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["emitt",{"_index":629,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["emul",{"_index":152,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["enabl",{"_index":185,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["enablecreatebutton",{"_index":729,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["enableupdatebutton",{"_index":772,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["end",{"_index":186,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{}}}],["endindex",{"_index":1165,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["endsaft",{"_index":752,"title":{},"body":{"components/CreateTaskComponent.html":{},"classes/Task.html":{}}}],["enhanc",{"_index":136,"title":{},"body":{"components/AboutComponent.html":{}}}],["enjoy",{"_index":1769,"title":{},"body":{"index.html":{}}}],["enter",{"_index":171,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["entir",{"_index":1777,"title":{},"body":{"index.html":{}}}],["entrycompon",{"_index":287,"title":{},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{}}}],["environ",{"_index":1569,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":683,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"components/EditTaskComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/TaskFormComponent.html":{}}}],["error('coremodul",{"_index":716,"title":{},"body":{"modules/CoreModule.html":{}}}],["even",{"_index":870,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["event",{"_index":60,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["event.stoppropag",{"_index":492,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["eventemitt",{"_index":430,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["exampl",{"_index":1308,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["except",{"_index":1728,"title":{},"body":{"index.html":{}}}],["excit",{"_index":1766,"title":{},"body":{"index.html":{}}}],["execut",{"_index":663,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"index.html":{}}}],["exist",{"_index":770,"title":{},"body":{"components/EditTaskComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["expand",{"_index":974,"title":{},"body":{"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["expect",{"_index":1179,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["export",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"overview.html":{}}}],["express",{"_index":1607,"title":{},"body":{"index.html":{}}}],["extend",{"_index":394,"title":{},"body":{"components/ButtonBarComponent.html":{},"injectables/HttpService.html":{},"injectables/MatPaginatorCustom.html":{}}}],["extens",{"_index":1157,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["f",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{}}}],["fa",{"_index":810,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["faangleup",{"_index":304,"title":{},"body":{"modules/AboutModule.html":{},"modules/TasksTableModule.html":{}}}],["faarrowleft",{"_index":1392,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{}}}],["fabar",{"_index":1002,"title":{},"body":{"modules/HeaderModule.html":{}}}],["facheck",{"_index":610,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksTableModule.html":{}}}],["fachecksquar",{"_index":608,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksTableModule.html":{}}}],["faclipboardcheck",{"_index":1276,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["faclipboardlist",{"_index":1003,"title":{},"body":{"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{}}}],["faedit",{"_index":938,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksTableModule.html":{}}}],["fahourglass",{"_index":1275,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["fahourglassend",{"_index":1277,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["fahourglasshalf",{"_index":1278,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["fahourglassstart",{"_index":1279,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["fail",{"_index":1724,"title":{},"body":{"index.html":{}}}],["failur",{"_index":1730,"title":{},"body":{"index.html":{}}}],["fals",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["fapast",{"_index":765,"title":{},"body":{"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{}}}],["far",{"_index":809,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["fasearch",{"_index":1449,"title":{},"body":{"modules/TasksFilterModule.html":{}}}],["fatim",{"_index":1450,"title":{},"body":{"modules/TasksFilterModule.html":{}}}],["fatrash",{"_index":652,"title":{},"body":{"modules/ConfirmDeleteTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksTableModule.html":{}}}],["favorit",{"_index":1716,"title":{},"body":{"index.html":{}}}],["favotir",{"_index":1747,"title":{},"body":{"index.html":{}}}],["featur",{"_index":1618,"title":{},"body":{"index.html":{}}}],["few",{"_index":1637,"title":{},"body":{"index.html":{}}}],["field",{"_index":183,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"index.html":{}}}],["fill",{"_index":191,"title":{},"body":{"components/AboutComponent.html":{}}}],["filter",{"_index":116,"title":{},"body":{"components/AboutComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"index.html":{}}}],["filter'},{'nam",{"_index":270,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["filter(ev",{"_index":1247,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["filter.compon",{"_index":986,"title":{},"body":{"components/HeaderComponent.html":{},"modules/TasksFilterModule.html":{}}}],["filter.component.css",{"_index":1412,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.html",{"_index":1413,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.t",{"_index":1408,"title":{},"body":{"components/TasksFilterComponent.html":{},"coverage.html":{}}}],["filter.component.ts:24",{"_index":1429,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:26",{"_index":1428,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:28",{"_index":1417,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:38",{"_index":1418,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:46",{"_index":1421,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:53",{"_index":1422,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:66",{"_index":1419,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.component.ts:86",{"_index":1423,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["filter.modul",{"_index":1006,"title":{},"body":{"modules/HeaderModule.html":{}}}],["filter.module.t",{"_index":1448,"title":{},"body":{"modules/TasksFilterModule.html":{}}}],["filter/search",{"_index":1411,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["final",{"_index":1068,"title":{},"body":{"injectables/HttpService.html":{}}}],["find",{"_index":829,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["finish",{"_index":193,"title":{},"body":{"components/AboutComponent.html":{}}}],["first",{"_index":423,"title":{},"body":{"components/ButtonBarComponent.html":{},"index.html":{}}}],["fix",{"_index":1680,"title":{},"body":{"index.html":{}}}],["fixth",{"_index":1682,"title":{},"body":{"index.html":{}}}],["flexlayoutmodul",{"_index":293,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["follow",{"_index":1307,"title":{},"body":{"components/TaskFormComponent.html":{},"index.html":{}}}],["font",{"_index":1589,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fontawesom",{"_index":298,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["fontawesomemodul",{"_index":299,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{}}}],["footer",{"_index":322,"title":{},"body":{"components/AppComponent.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/SidenavTasksComponent.html":{}}}],["footer'},{'nam",{"_index":253,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["footer.compon",{"_index":953,"title":{},"body":{"modules/FooterModule.html":{}}}],["footer.component.css",{"_index":946,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer.component.html",{"_index":947,"title":{},"body":{"components/FooterComponent.html":{}}}],["footer/footer.modul",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["footercompon",{"_index":252,"title":{"components/FooterComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["footermodul",{"_index":355,"title":{"modules/FooterModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FooterModule.html":{},"modules.html":{},"overview.html":{}}}],["form",{"_index":180,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"components/TasksFilterComponent.html":{}}}],["form'},{'nam",{"_index":267,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["form.compon",{"_index":742,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"modules/TaskFormModule.html":{}}}],["form.component.css",{"_index":1309,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.html",{"_index":1310,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.t",{"_index":1306,"title":{},"body":{"components/TaskFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:106",{"_index":1328,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:113",{"_index":1329,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:197",{"_index":1331,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:34",{"_index":1320,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:36",{"_index":1318,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:38",{"_index":1319,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:40",{"_index":1332,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:42",{"_index":1334,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:44",{"_index":1337,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:46",{"_index":1333,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:48",{"_index":1335,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:50",{"_index":1317,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:63",{"_index":1322,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:81",{"_index":1324,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.component.ts:90",{"_index":1326,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.get(property).dirti",{"_index":1345,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.get(property).invalid",{"_index":1344,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.get(property).touch",{"_index":1346,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["form.modul",{"_index":767,"title":{},"body":{"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TasksDialogModule.html":{}}}],["form.module.t",{"_index":1384,"title":{},"body":{"modules/TaskFormModule.html":{}}}],["formbuild",{"_index":517,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["formdata",{"_index":1351,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["formdata.statu",{"_index":1353,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["formdata.value.descript",{"_index":912,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["formdata.value.du",{"_index":914,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["formdata.value.nam",{"_index":908,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["formdata.value.prior",{"_index":910,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["formgroup",{"_index":544,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["formsmodul",{"_index":601,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["formsvalid",{"_index":1374,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["formvalid",{"_index":728,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["forroot",{"_index":723,"title":{},"body":{"modules/CoreModule.html":{},"modules/TasksModule.html":{}}}],["fortawesome/angular",{"_index":300,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["fortawesome/fontawesom",{"_index":301,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["fortawesome/fre",{"_index":305,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["found",{"_index":830,"title":{},"body":{"components/EditTaskComponent.html":{},"components/PageNotFoundComponent.html":{},"components/SidenavTasksComponent.html":{},"index.html":{}}}],["found'},{'nam",{"_index":260,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["found.compon",{"_index":368,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["found.component.css",{"_index":1172,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.html",{"_index":1173,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.t",{"_index":1171,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["found/pag",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["fragment",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{}}}],["framework",{"_index":1754,"title":{},"body":{"index.html":{}}}],["frequenc",{"_index":1286,"title":{},"body":{"classes/Task.html":{}}}],["fromev",{"_index":1430,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["fromevent(this.taskfilterinput.nativeelement,'keyup",{"_index":1441,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["front",{"_index":1094,"title":{},"body":{"components/ListItemComponent.html":{}}}],["full",{"_index":380,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/TasksRoutingModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["fulli",{"_index":156,"title":{},"body":{"components/AboutComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["fullscreendialogsub",{"_index":1486,"title":{},"body":{"injectables/UtilsService.html":{}}}],["fullscreendialogsub(dialogref",{"_index":1491,"title":{},"body":{"injectables/UtilsService.html":{}}}],["function",{"_index":137,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/TasksFilterComponent.html":{}}}],["futur",{"_index":555,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["gave",{"_index":1778,"title":{},"body":{"index.html":{}}}],["gener",{"_index":1710,"title":{},"body":{"index.html":{}}}],["get",{"_index":1599,"title":{"index.html":{}},"body":{"index.html":{}}}],["get(url",{"_index":1032,"title":{},"body":{"injectables/HttpService.html":{}}}],["geterror",{"_index":684,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["getformdata",{"_index":1315,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["getformdata(form",{"_index":1325,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["getinfo",{"_index":678,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["getrangelabel",{"_index":1159,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["getrequestoptionarg",{"_index":1021,"title":{},"body":{"injectables/HttpService.html":{}}}],["getrequestoptionargs(opt",{"_index":1034,"title":{},"body":{"injectables/HttpService.html":{}}}],["getrouteparamsfromchild",{"_index":1195,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["getter",{"_index":659,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["getwarn",{"_index":681,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["git",{"_index":1624,"title":{},"body":{"index.html":{}}}],["github",{"_index":1751,"title":{},"body":{"index.html":{}}}],["given",{"_index":390,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/CompleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"injectables/UtilsService.html":{}}}],["go",{"_index":1775,"title":{},"body":{"index.html":{}}}],["goe",{"_index":787,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["graph",{"_index":1781,"title":{},"body":{"modules.html":{}}}],["half",{"_index":899,"title":{},"body":{"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["hammerj",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["hand",{"_index":166,"title":{},"body":{"components/AboutComponent.html":{}}}],["handl",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["handset",{"_index":1617,"title":{},"body":{"index.html":{}}}],["header",{"_index":212,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["header'},{'nam",{"_index":255,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["header.compon",{"_index":1005,"title":{},"body":{"modules/HeaderModule.html":{}}}],["header.component.css",{"_index":963,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.html",{"_index":964,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header/header.modul",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["headercompon",{"_index":254,"title":{"components/HeaderComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["headermodul",{"_index":356,"title":{"modules/HeaderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HeaderModule.html":{},"modules.html":{},"overview.html":{}}}],["headless",{"_index":1729,"title":{},"body":{"index.html":{}}}],["height",{"_index":1495,"title":{},"body":{"injectables/UtilsService.html":{}}}],["help",{"_index":1638,"title":{},"body":{"index.html":{}}}],["here",{"_index":872,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["hidden",{"_index":413,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/HeaderComponent.html":{}}}],["hide",{"_index":393,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["hidecompletebutton",{"_index":400,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{}}}],["hideeditbutton",{"_index":401,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["hideload",{"_index":1022,"title":{},"body":{"injectables/HttpService.html":{}}}],["hidepages",{"_index":402,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["high",{"_index":1302,"title":{},"body":{"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["highlight",{"_index":1206,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["highlightlistitem",{"_index":1196,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["highlightlistitem(param",{"_index":1204,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["hint",{"_index":506,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["hostbind",{"_index":512,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["hostbinding('class.mark",{"_index":565,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["hourglass",{"_index":895,"title":{},"body":{"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["html",{"_index":232,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["http",{"_index":1008,"title":{},"body":{"injectables/HttpService.html":{}}}],["http://localhost:3000/api",{"_index":1047,"title":{},"body":{"injectables/HttpService.html":{}}}],["http://localhost:3000/api/task",{"_index":1704,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":1701,"title":{},"body":{"index.html":{}}}],["http:httpclient",{"_index":1053,"title":{},"body":{"injectables/HttpService.html":{}}}],["httpclient",{"_index":1028,"title":{},"body":{"injectables/HttpService.html":{}}}],["httpclientmodul",{"_index":703,"title":{},"body":{"modules/CoreModule.html":{}}}],["httpheader",{"_index":1048,"title":{},"body":{"injectables/HttpService.html":{}}}],["https://github.com/angular/angular/issues/6595",{"_index":98,"title":{},"body":{"components/AboutComponent.html":{}}}],["https://github.com/jonathan",{"_index":1631,"title":{},"body":{"index.html":{}}}],["https://medium.com/beauti",{"_index":1009,"title":{},"body":{"injectables/HttpService.html":{}}}],["https://robferguson.org/blog/2017/09/09/a",{"_index":1150,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["httpservic",{"_index":709,"title":{"injectables/HttpService.html":{}},"body":{"modules/CoreModule.html":{},"injectables/HttpService.html":{},"coverage.html":{}}}],["hwclock",{"_index":1673,"title":{},"body":{"index.html":{}}}],["icon",{"_index":307,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{},"index.html":{}}}],["iconclass",{"_index":773,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["id",{"_index":576,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"classes/Task.html":{},"index.html":{}}}],["identifi",{"_index":1297,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["if(!task.iscomplet",{"_index":846,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(!this.task",{"_index":1354,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["if(!this.task.iscomplet",{"_index":886,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(!this.updateal",{"_index":881,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(chang",{"_index":856,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(duedate.isbefore(today",{"_index":891,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(duedate.issame(today",{"_index":898,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(duedate.issame(tomorrow",{"_index":901,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(el",{"_index":103,"title":{},"body":{"components/AboutComponent.html":{}}}],["if(filt",{"_index":1265,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["if(formvalid",{"_index":758,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["if(index",{"_index":641,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["if(isdevmod",{"_index":690,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["if(ismediumscreen",{"_index":1519,"title":{},"body":{"injectables/UtilsService.html":{}}}],["if(isnan(id",{"_index":863,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(next",{"_index":1249,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["if(num",{"_index":1131,"title":{},"body":{"components/ListItemComponent.html":{}}}],["if(parentmodul",{"_index":714,"title":{},"body":{"modules/CoreModule.html":{}}}],["if(properti",{"_index":1341,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["if(this.editrecurringtaskform.get('updateall').valu",{"_index":1185,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["if(this.isexpand",{"_index":1253,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["if(this.repeatpropertiesform.get(property).valu",{"_index":1367,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["if(this.router.url.indexof('complet",{"_index":1266,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["if(this.sidenavmenust",{"_index":992,"title":{},"body":{"components/HeaderComponent.html":{}}}],["if(this.task",{"_index":844,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["if(this.task.iscomplet",{"_index":824,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["if(this.tasks.length",{"_index":575,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{}}}],["if(this.text",{"_index":1110,"title":{},"body":{"components/ListItemComponent.html":{}}}],["implement",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["import",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{}}}],["includ",{"_index":215,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"injectables/HttpService.html":{},"modules/TasksButtonsModule.html":{},"index.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.html",{"_index":1715,"title":{},"body":{"index.html":{}}}],["index:numb",{"_index":639,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["indic",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["individu",{"_index":633,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{}}}],["inid",{"_index":804,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["initi",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["initiconclass",{"_index":778,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["initpagin",{"_index":779,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["inject",{"_index":559,"title":{"injectables/ConsoleLoggerService.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"injectables/UtilsService.html":{}},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/RecurringTaskComponent.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["inject(mat_dialog_data",{"_index":567,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["input",{"_index":144,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/ListItemComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["insert",{"_index":1015,"title":{},"body":{"injectables/HttpService.html":{},"index.html":{}}}],["instal",{"_index":1625,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":719,"title":{},"body":{"modules/CoreModule.html":{},"modules/TasksModule.html":{}}}],["instead",{"_index":1691,"title":{},"body":{"index.html":{}}}],["instruct",{"_index":1740,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1023,"title":{},"body":{"injectables/HttpService.html":{}}}],["intercept(observ",{"_index":1038,"title":{},"body":{"injectables/HttpService.html":{}}}],["interfac",{"_index":1140,"title":{"interfaces/LoaderState.html":{}},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"overview.html":{}}}],["intermitt",{"_index":1725,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":530,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["invokeconsolemethod",{"_index":670,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"injectables/LoggerService.html":{}}}],["invokeconsolemethod(typ",{"_index":671,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["iscomplet",{"_index":750,"title":{},"body":{"components/CreateTaskComponent.html":{},"classes/Task.html":{}}}],["iscomplete=fals",{"_index":1285,"title":{},"body":{"classes/Task.html":{}}}],["isdevmod",{"_index":686,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["isexpand",{"_index":1191,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["ismediumscreen",{"_index":965,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["ismediumscreensourc",{"_index":1484,"title":{},"body":{"injectables/UtilsService.html":{}}}],["issu",{"_index":96,"title":{},"body":{"components/AboutComponent.html":{}}}],["istanbul",{"_index":1713,"title":{},"body":{"index.html":{}}}],["it'",{"_index":727,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["item",{"_index":217,"title":{},"body":{"components/AboutComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["item'},{'nam",{"_index":258,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["item.compon",{"_index":1282,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["item.component.css",{"_index":1080,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.html",{"_index":1081,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.t",{"_index":1073,"title":{},"body":{"components/ListItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:25",{"_index":1090,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:27",{"_index":1095,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:29",{"_index":1093,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:31",{"_index":1097,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:33",{"_index":1098,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:35",{"_index":1099,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:37",{"_index":1102,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:39",{"_index":1103,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:41",{"_index":1104,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:43",{"_index":1086,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:50",{"_index":1100,"title":{},"body":{"components/ListItemComponent.html":{}}}],["item.component.ts:57",{"_index":1101,"title":{},"body":{"components/ListItemComponent.html":{}}}],["jonathan",{"_index":1758,"title":{},"body":{"index.html":{}}}],["jqueri",{"_index":1773,"title":{},"body":{"index.html":{}}}],["js",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1696,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":1011,"title":{},"body":{"injectables/HttpService.html":{}}}],["karma",{"_index":1705,"title":{},"body":{"index.html":{}}}],["keyup",{"_index":1420,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["keyword",{"_index":224,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["label",{"_index":1158,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["lack",{"_index":142,"title":{},"body":{"components/AboutComponent.html":{}}}],["laptop",{"_index":148,"title":{},"body":{"components/AboutComponent.html":{}}}],["larg",{"_index":955,"title":{},"body":{"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/UtilsService.html":{}}}],["larger",{"_index":975,"title":{},"body":{"components/HeaderComponent.html":{}}}],["larges",{"_index":1492,"title":{},"body":{"injectables/UtilsService.html":{}}}],["last",{"_index":424,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["latest",{"_index":1752,"title":{},"body":{"index.html":{}}}],["layout",{"_index":295,"title":{},"body":{"modules/AboutModule.html":{},"components/AppComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{},"index.html":{}}}],["learn",{"_index":1768,"title":{},"body":{"index.html":{}}}],["left",{"_index":165,"title":{},"body":{"components/AboutComponent.html":{}}}],["legend",{"_index":231,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"overview.html":{}}}],["length",{"_index":403,"title":{},"body":{"components/ButtonBarComponent.html":{},"injectables/MatPaginatorCustom.html":{}}}],["leverag",{"_index":1614,"title":{},"body":{"index.html":{}}}],["librari",{"_index":289,"title":{},"body":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"components/ListItemComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{}}}],["library.add(faangleup",{"_index":310,"title":{},"body":{"modules/AboutModule.html":{},"modules/TasksTableModule.html":{}}}],["library.add(faarrowleft",{"_index":1393,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{}}}],["library.add(fabar",{"_index":1004,"title":{},"body":{"modules/HeaderModule.html":{}}}],["library.add(facheck",{"_index":611,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/EditTaskModule.html":{}}}],["library.add(faclipboardlist",{"_index":1280,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["library.add(fapast",{"_index":766,"title":{},"body":{"modules/CreateTaskModule.html":{}}}],["library.add(fasearch",{"_index":1451,"title":{},"body":{"modules/TasksFilterModule.html":{}}}],["library.add(fatrash",{"_index":653,"title":{},"body":{"modules/ConfirmDeleteTaskModule.html":{}}}],["licens",{"_index":1760,"title":{},"body":{"index.html":{}}}],["license.md",{"_index":1763,"title":{},"body":{"index.html":{}}}],["limit",{"_index":138,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":669,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["link",{"_index":1639,"title":{},"body":{"index.html":{}}}],["link{buttonscompon",{"_index":387,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["list",{"_index":257,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["listen",{"_index":1424,"title":{},"body":{"components/TasksFilterComponent.html":{},"index.html":{}}}],["listitem",{"_index":1192,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["listitemcompon",{"_index":256,"title":{"components/ListItemComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["load",{"_index":328,"title":{},"body":{"components/AppComponent.html":{},"modules/CoreModule.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"modules/TasksModule.html":{}}}],["loadchildren",{"_index":377,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loader",{"_index":1037,"title":{},"body":{"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["loader.servic",{"_index":1052,"title":{},"body":{"injectables/HttpService.html":{}}}],["loaderservic",{"_index":332,"title":{"injectables/LoaderService.html":{}},"body":{"components/AppComponent.html":{},"modules/CoreModule.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"coverage.html":{}}}],["loaderservice:loaderservic",{"_index":1054,"title":{},"body":{"injectables/HttpService.html":{}}}],["loaderst",{"_index":340,"title":{"interfaces/LoaderState.html":{}},"body":{"components/AppComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"coverage.html":{}}}],["loaderstate.show",{"_index":345,"title":{},"body":{"components/AppComponent.html":{}}}],["loadersubject",{"_index":1134,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["loadtask",{"_index":780,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["loadtask(id",{"_index":795,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["locat",{"_index":162,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{}}}],["log",{"_index":658,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["logfn",{"_index":694,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["logfn.apply(consol",{"_index":697,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["logger",{"_index":518,"title":{"classes/Logger.html":{}},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["logger.servic",{"_index":687,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"injectables/HttpService.html":{}}}],["logger.service.t",{"_index":656,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.service.ts:21",{"_index":679,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["logger.service.ts:32",{"_index":682,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["logger.service.ts:43",{"_index":685,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["logger.service.ts:58",{"_index":673,"title":{},"body":{"injectables/ConsoleLoggerService.html":{}}}],["loggerservic",{"_index":519,"title":{"injectables/LoggerService.html":{}},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["long",{"_index":205,"title":{},"body":{"components/AboutComponent.html":{}}}],["look",{"_index":666,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"components/PageNotFoundComponent.html":{}}}],["lot",{"_index":552,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["low",{"_index":174,"title":{},"body":{"components/AboutComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["machin",{"_index":1627,"title":{},"body":{"index.html":{}}}],["made",{"_index":1665,"title":{},"body":{"index.html":{}}}],["main",{"_index":320,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["mainpropertiesform",{"_index":1311,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["maintain",{"_index":1108,"title":{},"body":{"components/ListItemComponent.html":{}}}],["make",{"_index":551,"title":{},"body":{"components/CompleteTaskComponent.html":{},"modules/CoreModule.html":{},"injectables/HttpService.html":{},"components/TaskFormComponent.html":{}}}],["manag",{"_index":120,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"modules/CreateTaskModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["manual",{"_index":1738,"title":{},"body":{"index.html":{}}}],["map((formdata",{"_index":1350,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["mark",{"_index":202,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{}}}],["marker",{"_index":1217,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["mat",{"_index":884,"title":{},"body":{"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{}}}],["mat_dialog_data",{"_index":562,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["matbadgemodul",{"_index":1273,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["matbuttonmodul",{"_index":296,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{}}}],["match",{"_index":273,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matcheckboxmodul",{"_index":1476,"title":{},"body":{"modules/TasksTableModule.html":{}}}],["matdatepickermodul",{"_index":603,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksFilterModule.html":{}}}],["matdialog",{"_index":443,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["matdialogconfig",{"_index":468,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["matdialogmodul",{"_index":604,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{}}}],["matdialogref",{"_index":516,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"injectables/UtilsService.html":{}}}],["materi",{"_index":1615,"title":{},"body":{"index.html":{}}}],["matformfieldmodul",{"_index":605,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksFilterModule.html":{}}}],["math.max(length",{"_index":1163,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["matinputmodul",{"_index":606,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksFilterModule.html":{}}}],["matlistmodul",{"_index":1274,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["matnativedatemodul",{"_index":607,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksFilterModule.html":{}}}],["matpagin",{"_index":432,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["matpaginatorcustom",{"_index":932,"title":{"injectables/MatPaginatorCustom.html":{}},"body":{"modules/EditTaskModule.html":{},"injectables/MatPaginatorCustom.html":{},"coverage.html":{},"overview.html":{}}}],["matpaginatorintl",{"_index":933,"title":{},"body":{"modules/EditTaskModule.html":{},"injectables/MatPaginatorCustom.html":{}}}],["matpaginatormodul",{"_index":934,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksTableModule.html":{}}}],["matprogressspinnermodul",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/TasksTableModule.html":{}}}],["matradiomodul",{"_index":935,"title":{},"body":{"modules/EditTaskModule.html":{}}}],["matselectmodul",{"_index":1385,"title":{},"body":{"modules/TaskFormModule.html":{}}}],["matsidenavmodul",{"_index":705,"title":{},"body":{"modules/CoreModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksModule.html":{}}}],["matsnackbar",{"_index":783,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["matsnackbarmodul",{"_index":937,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksTableModule.html":{}}}],["matsortmodul",{"_index":1477,"title":{},"body":{"modules/TasksTableModule.html":{}}}],["mattablemodul",{"_index":1478,"title":{},"body":{"modules/TasksTableModule.html":{}}}],["mattoolbarmodul",{"_index":1001,"title":{},"body":{"modules/HeaderModule.html":{}}}],["mattooltipmodul",{"_index":936,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksFilterModule.html":{}}}],["max",{"_index":549,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["maxdatecomplet",{"_index":507,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["meant",{"_index":119,"title":{},"body":{"components/AboutComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"index.html":{}}}],["medium",{"_index":961,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["memori",{"_index":1689,"title":{},"body":{"index.html":{}}}],["menu",{"_index":164,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["messag",{"_index":539,"title":{},"body":{"components/CompleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["method",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"injectables/LoggerService.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["microsoft",{"_index":1736,"title":{},"body":{"index.html":{}}}],["mindued",{"_index":1312,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["minimum",{"_index":1336,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["miscellan",{"_index":1785,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1762,"title":{},"body":{"index.html":{}}}],["mix",{"_index":1772,"title":{},"body":{"index.html":{}}}],["mm",{"_index":1119,"title":{},"body":{"components/ListItemComponent.html":{}}}],["mocha",{"_index":1706,"title":{},"body":{"index.html":{}}}],["modal",{"_index":169,"title":{},"body":{"components/AboutComponent.html":{}}}],["mode",{"_index":1686,"title":{},"body":{"index.html":{}}}],["modifi",{"_index":121,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["modul",{"_index":274,"title":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"modules.html":{}},"body":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"modules.html":{},"overview.html":{}}}],["modulewithprovid",{"_index":701,"title":{},"body":{"modules/CoreModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["moment",{"_index":558,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/TaskFormComponent.html":{},"dependencies.html":{}}}],["moment().startof('day').add(1",{"_index":889,"title":{},"body":{"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{}}}],["moment().startof('day').utc",{"_index":888,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["moment().startof('day').utc().format('yyyi",{"_index":1118,"title":{},"body":{"components/ListItemComponent.html":{}}}],["moment().startof('day').utc().tod",{"_index":586,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["moment(this.task.datecomplet",{"_index":1358,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["moment(this.task.dued",{"_index":1363,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["moment(this.task.duedate).utc",{"_index":887,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["moment.iso_8601",{"_index":1359,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["monthli",{"_index":1289,"title":{},"body":{"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["more",{"_index":204,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/TasksButtonsModule.html":{},"index.html":{}}}],["mous",{"_index":143,"title":{},"body":{"components/AboutComponent.html":{}}}],["msg",{"_index":540,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["multi",{"_index":1770,"title":{},"body":{"index.html":{}}}],["multipl",{"_index":1075,"title":{},"body":{"components/ListItemComponent.html":{}}}],["mytask",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"index.html":{}}}],["mytasks_serv",{"_index":1672,"title":{},"body":{"index.html":{}}}],["name",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["navig",{"_index":1213,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["need",{"_index":871,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["new",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["next",{"_index":1167,"title":{},"body":{"injectables/MatPaginatorCustom.html":{},"index.html":{}}}],["nextid",{"_index":1603,"title":{},"body":{"index.html":{}}}],["nextpagelabel",{"_index":1160,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["ngafterviewinit",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{},"components/TasksFilterComponent.html":{}}}],["ngmodul",{"_index":292,"title":{},"body":{"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{}}}],["ngondestroy",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["ngoninit",{"_index":329,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["node",{"_index":1647,"title":{},"body":{"index.html":{}}}],["none",{"_index":1062,"title":{},"body":{"injectables/HttpService.html":{}}}],["noop",{"_index":688,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["norepeat",{"_index":848,"title":{},"body":{"components/EditTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{}}}],["note",{"_index":221,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["notic",{"_index":885,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["notifyandclos",{"_index":511,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["notifyandclose(msg",{"_index":536,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["npm",{"_index":1655,"title":{},"body":{"index.html":{}}}],["null",{"_index":843,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["num",{"_index":1106,"title":{},"body":{"components/ListItemComponent.html":{}}}],["num.tostr",{"_index":1116,"title":{},"body":{"components/ListItemComponent.html":{}}}],["number",{"_index":187,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/CompleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{}}}],["number(params['id",{"_index":862,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["numtasksdu",{"_index":1082,"title":{},"body":{"components/ListItemComponent.html":{}}}],["numtasksduetoday",{"_index":1121,"title":{},"body":{"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["numtasksduetomorrow",{"_index":1126,"title":{},"body":{"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["numtasksoverdu",{"_index":1112,"title":{},"body":{"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["ob",{"_index":823,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["object",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obs.subscribe((task",{"_index":827,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["observ",{"_index":816,"title":{},"body":{"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["observable.catch((err",{"_index":1066,"title":{},"body":{"injectables/HttpService.html":{}}}],["observable.of(form.valu",{"_index":1347,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["observable.of(formdata",{"_index":1349,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["observable.throw(err",{"_index":1067,"title":{},"body":{"injectables/HttpService.html":{}}}],["observal",{"_index":1504,"title":{},"body":{"injectables/UtilsService.html":{}}}],["observe([breakpoints.handset",{"_index":1512,"title":{},"body":{"injectables/UtilsService.html":{}}}],["occurr",{"_index":1380,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["offset",{"_index":1092,"title":{},"body":{"components/ListItemComponent.html":{}}}],["on",{"_index":203,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CoreModule.html":{},"components/RecurringTaskComponent.html":{},"modules/TasksButtonsModule.html":{},"index.html":{}}}],["onaboutscrol",{"_index":31,"title":{},"body":{"components/AboutComponent.html":{}}}],["onc",{"_index":190,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["ondestroy",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["oninit",{"_index":324,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["onsidenavmenutoggl",{"_index":968,"title":{},"body":{"components/HeaderComponent.html":{}}}],["onupd",{"_index":774,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["open",{"_index":168,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"index.html":{}}}],["opencompletedialog",{"_index":439,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["opencompletedialog(ev",{"_index":455,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["openconfirmdeletedialog",{"_index":440,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["openconfirmdeletedialog(ev",{"_index":457,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["opencreatetaskdialog",{"_index":1197,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["openeditdialog",{"_index":441,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["openeditdialog(ev",{"_index":459,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["openrecurringtaskdialog",{"_index":781,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["opportun",{"_index":1779,"title":{},"body":{"index.html":{}}}],["option",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["options.head",{"_index":1063,"title":{},"body":{"injectables/HttpService.html":{}}}],["orang",{"_index":900,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["order",{"_index":129,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"index.html":{}}}],["orm",{"_index":1755,"title":{},"body":{"index.html":{}}}],["other",{"_index":1089,"title":{},"body":{"components/ListItemComponent.html":{}}}],["otherwis",{"_index":465,"title":{},"body":{"components/ButtonsComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"injectables/UtilsService.html":{}}}],["out",{"_index":192,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"overview.html":{}}}],["outlet",{"_index":323,"title":{},"body":{"components/AppComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{}}}],["output",{"_index":408,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["outsid",{"_index":1635,"title":{},"body":{"index.html":{}}}],["over",{"_index":218,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["overdu",{"_index":226,"title":{},"body":{"components/AboutComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["overduebadg",{"_index":1219,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["overload",{"_index":1438,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["overview",{"_index":1782,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":1572,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["page",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["pagenotfoundcompon",{"_index":259,"title":{"components/PageNotFoundComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["pages",{"_index":404,"title":{},"body":{"components/ButtonBarComponent.html":{},"injectables/MatPaginatorCustom.html":{}}}],["pagesizeopt",{"_index":405,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["pagin",{"_index":388,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"injectables/MatPaginatorCustom.html":{},"coverage.html":{}}}],["param",{"_index":498,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"injectables/UtilsService.html":{}}}],["paramet",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoggerService.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["params.subscribe(param",{"_index":1256,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["params['filt",{"_index":1264,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["paramssub",{"_index":860,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["paramt",{"_index":1105,"title":{},"body":{"components/ListItemComponent.html":{}}}],["parent",{"_index":490,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{}}}],["parentmodul",{"_index":713,"title":{},"body":{"modules/CoreModule.html":{}}}],["part",{"_index":1676,"title":{},"body":{"index.html":{}}}],["partial",{"_index":573,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["pass",{"_index":662,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["past",{"_index":1356,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["patch",{"_index":1024,"title":{},"body":{"injectables/HttpService.html":{}}}],["patch(url",{"_index":1041,"title":{},"body":{"injectables/HttpService.html":{}}}],["path",{"_index":316,"title":{},"body":{"modules/AboutRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/TasksRoutingModule.html":{}}}],["path:':id",{"_index":1470,"title":{},"body":{"modules/TasksRoutingModule.html":{}}}],["path:'complet",{"_index":1469,"title":{},"body":{"modules/TasksRoutingModule.html":{}}}],["path:'pend",{"_index":1468,"title":{},"body":{"modules/TasksRoutingModule.html":{}}}],["pathmatch",{"_index":379,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/TasksRoutingModule.html":{}}}],["pend",{"_index":124,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksRoutingModule.html":{},"index.html":{}}}],["pendingtask",{"_index":1176,"title":{},"body":{"components/PendingTasksTableComponent.html":{}}}],["pendingtaskstablecompon",{"_index":261,"title":{"components/PendingTasksTableComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"coverage.html":{},"overview.html":{}}}],["perform",{"_index":657,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"injectables/HttpService.html":{}}}],["persist",{"_index":1692,"title":{},"body":{"index.html":{}}}],["phillip",{"_index":1759,"title":{},"body":{"index.html":{}}}],["phillips/mi",{"_index":1633,"title":{},"body":{"index.html":{}}}],["picker",{"_index":216,"title":{},"body":{"components/AboutComponent.html":{}}}],["pipe",{"_index":1442,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["point",{"_index":1667,"title":{},"body":{"index.html":{}}}],["port",{"_index":1702,"title":{},"body":{"index.html":{}}}],["portion",{"_index":1746,"title":{},"body":{"index.html":{}}}],["post",{"_index":1025,"title":{},"body":{"injectables/HttpService.html":{}}}],["post(url",{"_index":1044,"title":{},"body":{"injectables/HttpService.html":{}}}],["power",{"_index":1721,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":775,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["prerequisit",{"_index":1643,"title":{},"body":{"index.html":{}}}],["present",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["prevent",{"_index":488,"title":{},"body":{"components/ButtonsComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["previou",{"_index":788,"title":{},"body":{"components/EditTaskComponent.html":{},"injectables/MatPaginatorCustom.html":{}}}],["previouspagelabel",{"_index":1161,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["prior",{"_index":1765,"title":{},"body":{"index.html":{}}}],["prioriti",{"_index":175,"title":{},"body":{"components/AboutComponent.html":{},"components/CreateTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["prioritytyp",{"_index":1300,"title":{},"body":{"classes/Task.html":{},"miscellaneous/typealiases.html":{}}}],["privat",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["privileg",{"_index":1671,"title":{},"body":{"index.html":{}}}],["processor",{"_index":1722,"title":{},"body":{"index.html":{}}}],["product",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":1623,"title":{},"body":{"index.html":{}}}],["propag",{"_index":489,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["properti",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["properties).subscribe((task",{"_index":580,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["protect",{"_index":1481,"title":{},"body":{"injectables/UtilsService.html":{}}}],["protractor",{"_index":1708,"title":{},"body":{"index.html":{}}}],["provid",{"_index":179,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AppModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"overview.html":{}}}],["purpos",{"_index":794,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["quantiti",{"_index":1096,"title":{},"body":{"components/ListItemComponent.html":{}}}],["re",{"_index":1077,"title":{},"body":{"components/ListItemComponent.html":{}}}],["reach",{"_index":1202,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["react",{"_index":1425,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["reactiveformsmodul",{"_index":602,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["readonli",{"_index":1483,"title":{},"body":{"injectables/UtilsService.html":{}}}],["receiv",{"_index":491,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["recommend",{"_index":145,"title":{},"body":{"components/AboutComponent.html":{}}}],["recur",{"_index":263,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["recurringdialogref",{"_index":876,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["recurringdialogref.componentinstance.updateall.subscribe((updateal",{"_index":879,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["recurringtaskcompon",{"_index":262,"title":{"components/RecurringTaskComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["red",{"_index":897,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["redirect",{"_index":864,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["redirectto",{"_index":381,"title":{},"body":{"modules/AppRoutingModule.html":{},"modules/TasksRoutingModule.html":{}}}],["refer",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{}}}],["regular",{"_index":609,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["rel",{"_index":1720,"title":{},"body":{"index.html":{}}}],["relat",{"_index":1602,"title":{},"body":{"index.html":{}}}],["remain",{"_index":464,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"index.html":{}}}],["render",{"_index":467,"title":{},"body":{"components/ButtonsComponent.html":{},"components/HeaderComponent.html":{}}}],["repeat",{"_index":181,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["repeatformdata.value.aft",{"_index":919,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["repeatformdata.value.repeat",{"_index":917,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["repeatproperti",{"_index":1371,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["repeatpropertiesform",{"_index":1313,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["repo",{"_index":1641,"title":{},"body":{"index.html":{}}}],["report",{"_index":1711,"title":{},"body":{"index.html":{}}}],["request",{"_index":634,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"injectables/HttpService.html":{}}}],["requir",{"_index":286,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"index.html":{}}}],["requri",{"_index":1016,"title":{},"body":{"injectables/HttpService.html":{}}}],["reset",{"_index":284,"title":{},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"overview.html":{}}}],["respons",{"_index":132,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"index.html":{}}}],["result",{"_index":230,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{},"injectables/UtilsService.html":{}}}],["right",{"_index":959,"title":{},"body":{"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{}}}],["rm",{"_index":1670,"title":{},"body":{"index.html":{}}}],["root",{"_index":325,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"modules/CoreModule.html":{},"components/TasksComponent.html":{},"index.html":{}}}],["root'},{'nam",{"_index":238,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["rout",{"_index":43,"title":{"routes.html":{}},"body":{"components/AboutComponent.html":{},"modules/AboutRoutingModule.html":{},"modules/AppRoutingModule.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/TasksRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["route.firstchild",{"_index":1262,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["route.param",{"_index":1263,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["route:activatedrout",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{}}}],["routeparam",{"_index":1220,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["router",{"_index":317,"title":{},"body":{"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{},"modules/TasksRoutingModule.html":{}}}],["routerlink",{"_index":1218,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["routermodul",{"_index":314,"title":{},"body":{"modules/AboutRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{}}}],["routermodule.forchild(rout",{"_index":318,"title":{},"body":{"modules/AboutRoutingModule.html":{},"modules/TasksRoutingModule.html":{}}}],["routermodule.forroot(approut",{"_index":383,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":195,"title":{},"body":{"components/AboutComponent.html":{}}}],["run",{"_index":1644,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["rxjs/add/observable/of",{"_index":1338,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["rxjs/add/operator/catch",{"_index":1050,"title":{},"body":{"injectables/HttpService.html":{}}}],["rxjs/add/operator/fin",{"_index":1051,"title":{},"body":{"injectables/HttpService.html":{}}}],["rxjs/add/operator/map",{"_index":1339,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["rxjs/add/operator/switchmap",{"_index":1340,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["rxjs/observ",{"_index":1049,"title":{},"body":{"injectables/HttpService.html":{}}}],["rxjs/oper",{"_index":818,"title":{},"body":{"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["rxjs/subscript",{"_index":740,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["s",{"_index":1632,"title":{},"body":{"index.html":{}}}],["same",{"_index":206,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"index.html":{}}}],["sampl",{"_index":189,"title":{},"body":{"components/AboutComponent.html":{}}}],["scope",{"_index":1636,"title":{},"body":{"index.html":{}}}],["screen",{"_index":140,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["screenshot",{"_index":158,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["script",{"_index":1675,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["scrolltotop",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{}}}],["search",{"_index":228,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"components/TasksFilterComponent.html":{}}}],["section",{"_index":209,"title":{},"body":{"components/AboutComponent.html":{}}}],["see",{"_index":229,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["seed",{"_index":1695,"title":{},"body":{"index.html":{}}}],["seem",{"_index":866,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["seen",{"_index":197,"title":{},"body":{"components/AboutComponent.html":{}}}],["segement",{"_index":1203,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["select",{"_index":176,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["select(index",{"_index":1211,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["selectedindex",{"_index":1193,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["send",{"_index":632,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["sens",{"_index":553,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["separ",{"_index":122,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["sequenc",{"_index":801,"title":{},"body":{"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"index.html":{}}}],["server",{"_index":1437,"title":{},"body":{"components/TasksFilterComponent.html":{},"index.html":{}}}],["server,and",{"_index":1608,"title":{},"body":{"index.html":{}}}],["servic",{"_index":339,"title":{},"body":{"components/AppComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["services/consol",{"_index":708,"title":{},"body":{"modules/CoreModule.html":{}}}],["services/http.servic",{"_index":710,"title":{},"body":{"modules/CoreModule.html":{}}}],["services/loader.servic",{"_index":711,"title":{},"body":{"modules/CoreModule.html":{}}}],["services/logger.servic",{"_index":712,"title":{},"body":{"modules/CoreModule.html":{}}}],["set",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["setshowsearchbar",{"_index":969,"title":{},"body":{"components/HeaderComponent.html":{}}}],["setshowsearchbar(showsearchbar",{"_index":977,"title":{},"body":{"components/HeaderComponent.html":{}}}],["setup",{"_index":1640,"title":{},"body":{"index.html":{}}}],["sever",{"_index":1719,"title":{},"body":{"index.html":{}}}],["share",{"_index":720,"title":{},"body":{"modules/CoreModule.html":{},"modules/CreateTaskModule.html":{},"modules/TasksModule.html":{},"injectables/UtilsService.html":{}}}],["show",{"_index":420,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["showbackbutton",{"_index":406,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["showfirstlastbutton",{"_index":407,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["showload",{"_index":1026,"title":{},"body":{"injectables/HttpService.html":{}}}],["shown",{"_index":173,"title":{},"body":{"components/AboutComponent.html":{}}}],["showsearchbar",{"_index":966,"title":{},"body":{"components/HeaderComponent.html":{}}}],["side",{"_index":167,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{},"index.html":{}}}],["sidenav",{"_index":163,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["sidenavmenuchang",{"_index":1485,"title":{},"body":{"injectables/UtilsService.html":{}}}],["sidenavmenuev",{"_index":981,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/typealiases.html":{}}}],["sidenavmenust",{"_index":967,"title":{},"body":{"components/HeaderComponent.html":{}}}],["sidenavrout",{"_index":1194,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["sidenavtaskscompon",{"_index":264,"title":{"components/SidenavTasksComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["sidenavtasksmodul",{"_index":1267,"title":{"modules/SidenavTasksModule.html":{}},"body":{"modules/SidenavTasksModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["simpl",{"_index":118,"title":{},"body":{"components/AboutComponent.html":{},"injectables/HttpService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["simpli",{"_index":1745,"title":{},"body":{"index.html":{}}}],["singl",{"_index":463,"title":{},"body":{"components/ButtonsComponent.html":{},"modules/CoreModule.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{}}}],["singleton",{"_index":699,"title":{},"body":{"modules/CoreModule.html":{}}}],["size",{"_index":151,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["size.match",{"_index":1516,"title":{},"body":{"injectables/UtilsService.html":{}}}],["skip",{"_index":1666,"title":{},"body":{"index.html":{}}}],["skipself",{"_index":702,"title":{},"body":{"modules/CoreModule.html":{}}}],["slower",{"_index":1723,"title":{},"body":{"index.html":{}}}],["small",{"_index":1409,"title":{},"body":{"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["smaller",{"_index":139,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["snackbar",{"_index":538,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["snode",{"_index":1674,"title":{},"body":{"index.html":{}}}],["solid",{"_index":306,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{}}}],["solut",{"_index":1776,"title":{},"body":{"index.html":{}}}],["someth",{"_index":338,"title":{},"body":{"components/AppComponent.html":{}}}],["sorri",{"_index":1174,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["sort",{"_index":125,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"modules/AboutModule.html":{},"modules/AboutRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"injectables/ConsoleLoggerService.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"modules/FooterModule.html":{},"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"modules/TasksDialogModule.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["space",{"_index":141,"title":{},"body":{"components/AboutComponent.html":{}}}],["special",{"_index":223,"title":{},"body":{"components/AboutComponent.html":{}}}],["specif",{"_index":1207,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["speed",{"_index":1664,"title":{},"body":{"index.html":{}}}],["spinner",{"_index":1133,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["sqlite",{"_index":1609,"title":{},"body":{"index.html":{}}}],["src/.../consol",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.t",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../task.model.t",{"_index":1788,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.service.t",{"_index":1789,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/about/about.component.t",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/about/about.component.ts:17",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:19",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:21",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:30",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:38",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:55",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.component.ts:67",{"_index":61,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/about/about.module.t",{"_index":285,"title":{},"body":{"modules/AboutModule.html":{}}}],["src/app/about/about.routing.t",{"_index":313,"title":{},"body":{"modules/AboutRoutingModule.html":{}}}],["src/app/app.component.t",{"_index":319,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:20",{"_index":336,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:22",{"_index":333,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:32",{"_index":334,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:39",{"_index":335,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.t",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.routing.t",{"_index":375,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/components/pag",{"_index":1170,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["src/app/core/core.module.t",{"_index":698,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/app/core/services/consol",{"_index":655,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/services/http.service.t",{"_index":1007,"title":{},"body":{"injectables/HttpService.html":{},"coverage.html":{}}}],["src/app/core/services/http.service.ts:107",{"_index":1046,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:114",{"_index":1036,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:25",{"_index":1029,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:39",{"_index":1033,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:50",{"_index":1045,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:62",{"_index":1043,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:73",{"_index":1031,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:83",{"_index":1035,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/http.service.ts:95",{"_index":1039,"title":{},"body":{"injectables/HttpService.html":{}}}],["src/app/core/services/loader.service.t",{"_index":1132,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"coverage.html":{}}}],["src/app/core/services/loader.service.ts:20",{"_index":1138,"title":{},"body":{"injectables/LoaderService.html":{}}}],["src/app/core/services/loader.service.ts:22",{"_index":1135,"title":{},"body":{"injectables/LoaderService.html":{}}}],["src/app/core/services/loader.service.ts:32",{"_index":1137,"title":{},"body":{"injectables/LoaderService.html":{}}}],["src/app/core/services/loader.service.ts:39",{"_index":1136,"title":{},"body":{"injectables/LoaderService.html":{}}}],["src/app/core/services/logger.service.t",{"_index":1145,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/app/core/services/logger.service.ts:11",{"_index":1148,"title":{},"body":{"classes/Logger.html":{}}}],["src/app/core/services/logger.service.ts:13",{"_index":1146,"title":{},"body":{"classes/Logger.html":{}}}],["src/app/core/services/logger.service.ts:25",{"_index":1153,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/app/core/services/logger.service.ts:27",{"_index":1154,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/app/core/services/logger.service.ts:29",{"_index":1152,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/app/core/services/logger.service.ts:38",{"_index":1151,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/app/core/services/logger.service.ts:9",{"_index":1147,"title":{},"body":{"classes/Logger.html":{}}}],["src/app/footer/footer.component.t",{"_index":945,"title":{},"body":{"components/FooterComponent.html":{},"coverage.html":{}}}],["src/app/footer/footer.module.t",{"_index":952,"title":{},"body":{"modules/FooterModule.html":{}}}],["src/app/header/header.component.t",{"_index":954,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/header/header.component.ts:24",{"_index":983,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:26",{"_index":979,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:28",{"_index":980,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:30",{"_index":982,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:32",{"_index":971,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:39",{"_index":972,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:47",{"_index":973,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:63",{"_index":976,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.component.ts:79",{"_index":978,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/header/header.module.t",{"_index":1000,"title":{},"body":{"modules/HeaderModule.html":{}}}],["src/app/tasks/button",{"_index":384,"title":{},"body":{"components/ButtonBarComponent.html":{},"modules/TasksButtonBarModule.html":{},"coverage.html":{}}}],["src/app/tasks/buttons/buttons.component.t",{"_index":436,"title":{},"body":{"components/ButtonsComponent.html":{},"coverage.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:102",{"_index":460,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:111",{"_index":453,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:118",{"_index":454,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:26",{"_index":446,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:28",{"_index":447,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:30",{"_index":448,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:32",{"_index":449,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:34",{"_index":450,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:36",{"_index":451,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:38",{"_index":452,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:40",{"_index":445,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:53",{"_index":456,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/buttons.component.ts:74",{"_index":458,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["src/app/tasks/buttons/task",{"_index":1399,"title":{},"body":{"modules/TasksButtonsModule.html":{}}}],["src/app/tasks/dialogs/complet",{"_index":501,"title":{},"body":{"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"coverage.html":{}}}],["src/app/tasks/dialogs/confirm",{"_index":623,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"coverage.html":{}}}],["src/app/tasks/dialogs/cr",{"_index":725,"title":{},"body":{"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"coverage.html":{}}}],["src/app/tasks/dialogs/task",{"_index":1405,"title":{},"body":{"modules/TasksDialogModule.html":{}}}],["src/app/tasks/edit/edit",{"_index":769,"title":{},"body":{"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"coverage.html":{}}}],["src/app/tasks/edit/recur",{"_index":1178,"title":{},"body":{"components/RecurringTaskComponent.html":{},"coverage.html":{}}}],["src/app/tasks/filter/task",{"_index":1407,"title":{},"body":{"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"coverage.html":{}}}],["src/app/tasks/form/task",{"_index":1305,"title":{},"body":{"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"coverage.html":{}}}],["src/app/tasks/shared/models/task.model.t",{"_index":1284,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/tasks/shared/models/task.model.ts:12",{"_index":1295,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:14",{"_index":1299,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:16",{"_index":1292,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:18",{"_index":1293,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:20",{"_index":1291,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:22",{"_index":1298,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:24",{"_index":1301,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:26",{"_index":1304,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/models/task.model.ts:28",{"_index":1294,"title":{},"body":{"classes/Task.html":{}}}],["src/app/tasks/shared/services/task.service.t",{"_index":1553,"title":{},"body":{"coverage.html":{}}}],["src/app/tasks/shared/services/tasks.datasource.t",{"_index":1555,"title":{},"body":{"coverage.html":{}}}],["src/app/tasks/shared/services/utils.service.t",{"_index":1479,"title":{},"body":{"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/tasks/shared/services/utils.service.ts:20",{"_index":1502,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/tasks/shared/services/utils.service.ts:22",{"_index":1498,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/tasks/shared/services/utils.service.ts:24",{"_index":1500,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/tasks/shared/services/utils.service.ts:26",{"_index":1490,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/tasks/shared/services/utils.service.ts:48",{"_index":1493,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/tasks/shared/services/utils.service.ts:68",{"_index":1497,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/tasks/shared/util/mat",{"_index":1155,"title":{},"body":{"injectables/MatPaginatorCustom.html":{},"coverage.html":{}}}],["src/app/tasks/sidenav/list",{"_index":1072,"title":{},"body":{"components/ListItemComponent.html":{},"coverage.html":{}}}],["src/app/tasks/sidenav/sidenav",{"_index":1187,"title":{},"body":{"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"coverage.html":{}}}],["src/app/tasks/table/complet",{"_index":612,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"coverage.html":{}}}],["src/app/tasks/table/pend",{"_index":1175,"title":{},"body":{"components/PendingTasksTableComponent.html":{},"coverage.html":{}}}],["src/app/tasks/table/task",{"_index":1474,"title":{},"body":{"modules/TasksTableModule.html":{},"coverage.html":{}}}],["src/app/tasks/tasks.component.t",{"_index":1402,"title":{},"body":{"components/TasksComponent.html":{},"coverage.html":{}}}],["src/app/tasks/tasks.module.t",{"_index":1457,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/app/tasks/tasks.routing.t",{"_index":1463,"title":{},"body":{"modules/TasksRoutingModule.html":{}}}],["src/environments/environment.prod.t",{"_index":1568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":1570,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":1604,"title":{},"body":{"index.html":{}}}],["start",{"_index":700,"title":{"index.html":{}},"body":{"modules/CoreModule.html":{},"components/EditTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"index.html":{}}}],["start:deval",{"_index":1697,"title":{},"body":{"index.html":{}}}],["startdevelop",{"_index":1685,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":1164,"title":{},"body":{"injectables/MatPaginatorCustom.html":{}}}],["state",{"_index":123,"title":{},"body":{"components/AboutComponent.html":{},"components/HeaderComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/SidenavTasksComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["statement",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":722,"title":{},"body":{"modules/CoreModule.html":{},"modules/TasksModule.html":{}}}],["statu",{"_index":1352,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["step",{"_index":1677,"title":{},"body":{"index.html":{}}}],["store",{"_index":1620,"title":{},"body":{"index.html":{}}}],["string",{"_index":528,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"injectables/UtilsService.html":{}}}],["style",{"_index":1074,"title":{},"body":{"components/ListItemComponent.html":{}}}],["styleurl",{"_index":18,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["sub",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["sub.unsubscrib",{"_index":1523,"title":{},"body":{"injectables/UtilsService.html":{}}}],["subform",{"_index":850,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["subject",{"_index":1139,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"injectables/UtilsService.html":{}}}],["subload",{"_index":342,"title":{},"body":{"components/AppComponent.html":{}}}],["submenutoggl",{"_index":1245,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["suboverdu",{"_index":1113,"title":{},"body":{"components/ListItemComponent.html":{}}}],["subscreens",{"_index":1252,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["subscrib",{"_index":484,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["subscribe((s",{"_index":1514,"title":{},"body":{"injectables/UtilsService.html":{}}}],["subscribe((task",{"_index":921,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["subscribe(next",{"_index":1248,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["subscript",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["subtoday",{"_index":1122,"title":{},"body":{"components/ListItemComponent.html":{}}}],["subtomorrow",{"_index":1127,"title":{},"body":{"components/ListItemComponent.html":{}}}],["successfulli",{"_index":582,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["support",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{},"modules.html":{}}}],["sure",{"_index":647,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"modules/CoreModule.html":{},"components/TaskFormComponent.html":{}}}],["svg",{"_index":302,"title":{},"body":{"modules/AboutModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksTableModule.html":{},"dependencies.html":{},"modules.html":{}}}],["switchmap(formdata",{"_index":1348,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["sync",{"_index":1668,"title":{},"body":{"index.html":{}}}],["system",{"_index":1659,"title":{},"body":{"index.html":{}}}],["tabl",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"index.html":{}}}],["table'},{'nam",{"_index":246,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["table.compon",{"_index":621,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{}}}],["table.component.css",{"_index":615,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{}}}],["table.component.html",{"_index":616,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{}}}],["table.component.t",{"_index":613,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{},"coverage.html":{}}}],["table.component.ts:18",{"_index":618,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{}}}],["table.modul",{"_index":1462,"title":{},"body":{"modules/TasksModule.html":{}}}],["table.module.t",{"_index":1475,"title":{},"body":{"modules/TasksTableModule.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1571,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{}}}],["take",{"_index":1662,"title":{},"body":{"index.html":{}}}],["taken",{"_index":159,"title":{},"body":{"components/AboutComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{}}}],["tap",{"_index":817,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task",{"_index":113,"title":{"classes/Task.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/MatPaginatorCustom.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonsModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["task'},{'nam",{"_index":244,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["task(",{"_index":426,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{}}}],["task.compon",{"_index":471,"title":{},"body":{"components/ButtonsComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"components/SidenavTasksComponent.html":{},"modules/TasksRoutingModule.html":{}}}],["task.component.css",{"_index":503,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.html",{"_index":504,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.t",{"_index":502,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"coverage.html":{}}}],["task.component.ts:105",{"_index":535,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:122",{"_index":796,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:137",{"_index":537,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:152",{"_index":799,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:179",{"_index":797,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:188",{"_index":800,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:21",{"_index":624,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:218",{"_index":789,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:22",{"_index":1182,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["task.component.ts:23",{"_index":630,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:24",{"_index":732,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:25",{"_index":631,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:258",{"_index":802,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:26",{"_index":738,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:27",{"_index":524,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:28",{"_index":739,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:29",{"_index":523,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:30",{"_index":731,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:31",{"_index":541,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:33",{"_index":545,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["task.component.ts:35",{"_index":547,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["task.component.ts:37",{"_index":803,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:38",{"_index":548,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:39",{"_index":812,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:40",{"_index":556,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:41",{"_index":733,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["task.component.ts:42",{"_index":557,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:43",{"_index":625,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:44",{"_index":521,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:45",{"_index":805,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:47",{"_index":806,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:48",{"_index":735,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["task.component.ts:49",{"_index":808,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:50",{"_index":626,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:51",{"_index":811,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:53",{"_index":813,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:55",{"_index":815,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:57",{"_index":525,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["task.component.ts:59",{"_index":807,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:61",{"_index":784,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:68",{"_index":529,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:72",{"_index":737,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["task.component.ts:75",{"_index":533,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.component.ts:76",{"_index":1183,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["task.component.ts:77",{"_index":627,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:78",{"_index":786,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:84",{"_index":628,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["task.component.ts:88",{"_index":793,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.component.ts:89",{"_index":736,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["task.component.ts:98",{"_index":534,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["task.id",{"_index":578,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["task.iscomplet",{"_index":841,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.modul",{"_index":1283,"title":{},"body":{"modules/SidenavTasksModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksModule.html":{}}}],["task.module.t",{"_index":600,"title":{},"body":{"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{}}}],["task.nam",{"_index":924,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task.repeat",{"_index":847,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["task/complet",{"_index":470,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/TasksDialogModule.html":{},"coverage.html":{}}}],["task/confirm",{"_index":473,"title":{},"body":{"components/ButtonsComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/TasksDialogModule.html":{},"coverage.html":{}}}],["task/creat",{"_index":726,"title":{},"body":{"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{},"coverage.html":{}}}],["taskfilt",{"_index":957,"title":{},"body":{"components/HeaderComponent.html":{},"components/TasksFilterComponent.html":{}}}],["taskfiltercompon",{"_index":984,"title":{},"body":{"components/HeaderComponent.html":{}}}],["taskfilterinput",{"_index":1414,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["taskformcompon",{"_index":266,"title":{"components/TaskFormComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"modules/TaskFormModule.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"coverage.html":{},"overview.html":{}}}],["taskformmodul",{"_index":764,"title":{"modules/TaskFormModule.html":{}},"body":{"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksDialogModule.html":{},"modules.html":{},"overview.html":{}}}],["tasks'},{'nam",{"_index":265,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["tasks.compon",{"_index":1281,"title":{},"body":{"modules/SidenavTasksModule.html":{},"modules/TasksModule.html":{}}}],["tasks.component.css",{"_index":1189,"title":{},"body":{"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{}}}],["tasks.component.html",{"_index":1190,"title":{},"body":{"components/SidenavTasksComponent.html":{},"components/TasksComponent.html":{}}}],["tasks.component.t",{"_index":1188,"title":{},"body":{"components/SidenavTasksComponent.html":{},"coverage.html":{}}}],["tasks.component.ts:132",{"_index":1212,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:141",{"_index":1199,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:159",{"_index":1205,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:25",{"_index":1214,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:27",{"_index":1215,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:29",{"_index":1226,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:31",{"_index":1224,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:33",{"_index":1225,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:35",{"_index":1227,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:37",{"_index":1231,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:39",{"_index":1230,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:47",{"_index":1223,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:53",{"_index":1198,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:66",{"_index":1210,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:80",{"_index":1208,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.component.ts:87",{"_index":1209,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks.modul",{"_index":1461,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.module.t",{"_index":1272,"title":{},"body":{"modules/SidenavTasksModule.html":{}}}],["tasks.rout",{"_index":1458,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/button",{"_index":819,"title":{},"body":{"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/TasksTableModule.html":{}}}],["tasks/buttons/buttons.compon",{"_index":1401,"title":{},"body":{"modules/TasksButtonsModule.html":{}}}],["tasks/buttons/task",{"_index":1394,"title":{},"body":{"modules/TasksButtonBarModule.html":{},"modules/TasksTableModule.html":{}}}],["tasks/complet",{"_index":1229,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks/dialogs/complet",{"_index":469,"title":{},"body":{"components/ButtonsComponent.html":{},"modules/CompleteTaskModule.html":{},"modules/TasksDialogModule.html":{}}}],["tasks/dialogs/confirm",{"_index":472,"title":{},"body":{"components/ButtonsComponent.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/TasksDialogModule.html":{}}}],["tasks/dialogs/cr",{"_index":768,"title":{},"body":{"modules/CreateTaskModule.html":{},"components/SidenavTasksComponent.html":{},"modules/SidenavTasksModule.html":{}}}],["tasks/dialogs/task",{"_index":941,"title":{},"body":{"modules/EditTaskModule.html":{},"modules/TasksTableModule.html":{}}}],["tasks/edit/edit",{"_index":1459,"title":{},"body":{"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{}}}],["tasks/filter/task",{"_index":985,"title":{},"body":{"components/HeaderComponent.html":{},"modules/HeaderModule.html":{},"modules/TasksFilterModule.html":{}}}],["tasks/form/task",{"_index":741,"title":{},"body":{"components/CreateTaskComponent.html":{},"modules/CreateTaskModule.html":{},"components/EditTaskComponent.html":{},"modules/EditTaskModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksDialogModule.html":{}}}],["tasks/pend",{"_index":1228,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["tasks/shared/models/task.model",{"_index":433,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["tasks/shared/services/task.servic",{"_index":564,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{}}}],["tasks/shared/services/utils.servic",{"_index":474,"title":{},"body":{"components/ButtonsComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{}}}],["tasks/shared/util/mat",{"_index":943,"title":{},"body":{"modules/EditTaskModule.html":{}}}],["tasks/sidenav/sidenav",{"_index":1460,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks/table/complet",{"_index":1464,"title":{},"body":{"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{}}}],["tasks/table/pend",{"_index":1465,"title":{},"body":{"modules/TasksRoutingModule.html":{},"modules/TasksTableModule.html":{}}}],["tasks/table/task",{"_index":620,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"components/PendingTasksTableComponent.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{}}}],["tasks/tasks.compon",{"_index":1466,"title":{},"body":{"modules/TasksRoutingModule.html":{}}}],["tasks/tasks.modul",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["tasks[0",{"_index":583,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["tasksbuttonbarmodul",{"_index":930,"title":{"modules/TasksButtonBarModule.html":{}},"body":{"modules/EditTaskModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksTableModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksbuttonsmodul",{"_index":1390,"title":{"modules/TasksButtonsModule.html":{}},"body":{"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksTableModule.html":{},"modules.html":{},"overview.html":{}}}],["taskscompon",{"_index":268,"title":{"components/TasksComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"coverage.html":{},"overview.html":{}}}],["tasksdatasourc",{"_index":1556,"title":{},"body":{"coverage.html":{}}}],["tasksdialogmodul",{"_index":931,"title":{"modules/TasksDialogModule.html":{}},"body":{"modules/EditTaskModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksTableModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksdu",{"_index":1084,"title":{},"body":{"components/ListItemComponent.html":{}}}],["taskservic",{"_index":520,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"modules/CoreModule.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksfiltercompon",{"_index":269,"title":{"components/TasksFilterComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksFilterModule.html":{},"coverage.html":{},"overview.html":{}}}],["tasksfiltermodul",{"_index":999,"title":{"modules/TasksFilterModule.html":{}},"body":{"modules/HeaderModule.html":{},"modules/TasksFilterModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksinstal",{"_index":1634,"title":{},"body":{"index.html":{}}}],["tasksmodul",{"_index":357,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksmodule.forroot",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksroutingmodul",{"_index":1455,"title":{"modules/TasksRoutingModule.html":{}},"body":{"modules/TasksModule.html":{},"modules/TasksRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["taskstablecompon",{"_index":271,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksTableModule.html":{},"coverage.html":{},"overview.html":{}}}],["taskstablemodul",{"_index":1456,"title":{"modules/TasksTableModule.html":{}},"body":{"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksub",{"_index":838,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["templat",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["test",{"_index":157,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["test:coveragesepar",{"_index":1712,"title":{},"body":{"index.html":{}}}],["testa",{"_index":1709,"title":{},"body":{"index.html":{}}}],["text",{"_index":542,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/ListItemComponent.html":{},"injectables/MatPaginatorCustom.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["thing",{"_index":1019,"title":{},"body":{"injectables/HttpService.html":{}}}],["third",{"_index":1733,"title":{},"body":{"index.html":{}}}],["this._sidenavmenuchang",{"_index":1503,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this._sidenavmenuchanges.next(ev",{"_index":1524,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.aboutelement.nativeelement.scrolltop",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.breakpointobserv",{"_index":1511,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.buttonbar.paginator.page.pip",{"_index":835,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.buttonbar.paginator.pageindex",{"_index":831,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.changedetector.detectchang",{"_index":828,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.changedetectorref.detectchang",{"_index":346,"title":{},"body":{"components/AppComponent.html":{}}}],["this.checkformerror(this.mainpropertiesform",{"_index":1343,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.checkformerror(this.repeatpropertiesform",{"_index":1342,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.click",{"_index":435,"title":{},"body":{"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["this.click.emit(tru",{"_index":487,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.completetask.emit(task",{"_index":595,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.cont",{"_index":588,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.data.task",{"_index":587,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["this.datecompletedform",{"_index":591,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.datecompletedform.controls['datecompleted'].valu",{"_index":574,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.datecompletedform.get(param).dirti",{"_index":571,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.datecompletedform.get(param).invalid",{"_index":570,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.datecompletedform.get(param).touch",{"_index":572,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.deletetask.emit(tru",{"_index":643,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.dialog.open(completetaskcompon",{"_index":482,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.dialog.open(confirmdeletetaskcompon",{"_index":494,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.dialog.open(createtaskcompon",{"_index":1238,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.dialog.open(recurringtaskcompon",{"_index":877,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.dialogref.clos",{"_index":569,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["this.dialogref.close(msg",{"_index":596,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.dialogref.close(task",{"_index":756,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.dialogref.disableclos",{"_index":744,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.displayscrolltotop",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.editrecurringtaskform",{"_index":1184,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["this.enablecreatebutton",{"_index":759,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.enableupdatebutton",{"_index":852,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.filt",{"_index":1111,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.formbuilder.group",{"_index":592,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.formvalid.emit(formsvalid",{"_index":1379,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.getrequestoptionargs(opt",{"_index":1056,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.getrouteparamsfromchild",{"_index":1255,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.hidecompletebutton",{"_index":840,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.hideload",{"_index":1069,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.highlightlistitem(param",{"_index":1257,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.hint",{"_index":589,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.icon",{"_index":894,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.iconclass",{"_index":883,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.initiconclass",{"_index":842,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.initpagin",{"_index":845,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.intercept(this.http.delete(`${this.url}/${url",{"_index":1061,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.intercept(this.http.get(`${this.url}/${url",{"_index":1055,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.intercept(this.http.patch(`${this.url}/${url",{"_index":1060,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.intercept(this.http.post(`${this.url}/${url",{"_index":1059,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.isexpand",{"_index":1250,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.ismediumscreen",{"_index":990,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["this.ismediumscreen.subscribe((ismediumscreen",{"_index":1518,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.ismediumscreensourc",{"_index":1508,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.ismediumscreensource.asobserv",{"_index":1510,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.ismediumscreensource.next(size.match",{"_index":1517,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.load",{"_index":344,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loaderservice.hid",{"_index":1071,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.loaderservice.loaderstate.subscribe((loaderst",{"_index":343,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loaderservice.show",{"_index":1070,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.loaderst",{"_index":1142,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["this.loadersubject",{"_index":1141,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["this.loadersubject.asobserv",{"_index":1143,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["this.loadersubject.next({show",{"_index":1144,"title":{},"body":{"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{}}}],["this.loadtask(id",{"_index":874,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.loadtask(this.tasks[this.buttonbar.paginator.pageindex].id",{"_index":836,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.location.back",{"_index":822,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.logger.info('confirmdeletetaskcompon",{"_index":645,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.logger.info('createtaskcompon",{"_index":755,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.logger.info('edittaskcompon",{"_index":922,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.logger.info(`completetaskcompon",{"_index":594,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.logger.info(`httpservic",{"_index":1057,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.logger.info(`utilsservic",{"_index":1515,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.mainpropertiesform",{"_index":1362,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.mainpropertiesform.valid",{"_index":1376,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.maxdatecomplet",{"_index":585,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.mindued",{"_index":1357,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.notifyandclose('task",{"_index":581,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.numtasksdu",{"_index":1115,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.numtasksduetoday",{"_index":1240,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.numtasksduetomorrow",{"_index":1242,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.numtasksoverdu",{"_index":1243,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.onupdate.emit('task",{"_index":923,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.openrecurringtaskdialog",{"_index":849,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.prefix",{"_index":893,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.repeatpropertiesform",{"_index":1365,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.repeatpropertiesform.get('aft",{"_index":1366,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.repeatpropertiesform.get('repeats').valu",{"_index":1375,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.repeatpropertiesform.valid",{"_index":1378,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.rout",{"_index":1260,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.route.fragment.subscribe(f",{"_index":100,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.route.params.subscribe(param",{"_index":861,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.router.navigate(['/404",{"_index":873,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.router.navigate(['task",{"_index":499,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.router.navigate(this.sidenavroutes[index",{"_index":1259,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.selectedindex",{"_index":1258,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.showload",{"_index":1065,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.showsearchbar",{"_index":988,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.sidenavmenust",{"_index":991,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.snackbar.open(chang",{"_index":857,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.sub",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["this.sub.add(pag",{"_index":837,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.sub.add(paramssub",{"_index":875,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.sub.add(sub",{"_index":105,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["this.sub.add(subform",{"_index":853,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.sub.add(subload",{"_index":347,"title":{},"body":{"components/AppComponent.html":{}}}],["this.sub.add(submenutoggl",{"_index":1251,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.sub.add(suboverdu",{"_index":1117,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.sub.add(subscreens",{"_index":1254,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.sub.add(subtoday",{"_index":1124,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.sub.add(subtomorrow",{"_index":1129,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.sub.add(tasksub",{"_index":854,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.sub.unsubscrib",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["this.task",{"_index":480,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.descript",{"_index":911,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.dued",{"_index":913,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.endsaft",{"_index":918,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.id",{"_index":833,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.iscomplet",{"_index":1364,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["this.task.nam",{"_index":907,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.prior",{"_index":909,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.task.repeat",{"_index":916,"title":{},"body":{"components/EditTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["this.taskfilterinput.nativeelement.valu",{"_index":1434,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["this.taskformcomponent.formvalid.subscribe((en",{"_index":851,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskformcomponent.formvalid.subscribe((formvalid",{"_index":757,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskformcomponent.getformdata(this.taskformcomponent.mainpropertiesform).switchmap(formdata",{"_index":906,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskformcomponent.getformdata(this.taskformcomponent.repeatpropertiesform).switchmap(repeatformdata",{"_index":915,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskformcomponent.mainpropertiesform.get('description').valu",{"_index":747,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskformcomponent.mainpropertiesform.get('due').valu",{"_index":749,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskformcomponent.mainpropertiesform.get('name').valu",{"_index":745,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskformcomponent.mainpropertiesform.get('priority').valu",{"_index":746,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskformcomponent.repeatpropertiesform.dis",{"_index":882,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskformcomponent.repeatpropertiesform.get('after').valu",{"_index":753,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskformcomponent.repeatpropertiesform.get('repeats').valu",{"_index":751,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.tasks.findindex((task",{"_index":832,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.tasks.foreach((task",{"_index":638,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.tasks.length",{"_index":642,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.tasks.map((task",{"_index":577,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.tasks[0].id",{"_index":500,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.taskservice.changes.subscribe((chang",{"_index":855,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskservice.complete(this.tasks[0",{"_index":584,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.taskservice.completeall(id",{"_index":579,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.taskservice.completetask",{"_index":825,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskservice.create(task).subscribe((task",{"_index":754,"title":{},"body":{"components/CreateTaskComponent.html":{}}}],["this.taskservice.delete(task).subscrib",{"_index":640,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.taskservice.delete(this.tasks[0]).subscribe((task",{"_index":644,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.taskservice.get(id).subscribe((task",{"_index":839,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskservice.initnumtask",{"_index":1107,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.taskservice.numpendingtasks.subscribe((num",{"_index":1130,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.taskservice.numtasksduetoday",{"_index":1241,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.taskservice.numtasksduetoday.subscribe((num",{"_index":1123,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.taskservice.numtasksduetomorrow.subscribe((num",{"_index":1128,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.taskservice.numtasksoverdu",{"_index":1244,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.taskservice.numtasksoverdue.subscribe((num",{"_index":1114,"title":{},"body":{"components/ListItemComponent.html":{}}}],["this.taskservice.pendingtask",{"_index":826,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.taskservice.settaskfilter(this.taskfilterinput.nativeelement.valu",{"_index":1444,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["this.taskservice.update(this.task",{"_index":920,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.text",{"_index":646,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{}}}],["this.titl",{"_index":590,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["this.tooltip",{"_index":896,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.updateal",{"_index":880,"title":{},"body":{"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["this.updateall.emit(updateal",{"_index":1186,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["this.updatetaskfilt",{"_index":1435,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["this.url}/${url",{"_index":1058,"title":{},"body":{"injectables/HttpService.html":{}}}],["this.utilsservice.fullscreendialogsub(completeselecteddialogref",{"_index":483,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.utilsservice.fullscreendialogsub(confirmdeletedialogref",{"_index":495,"title":{},"body":{"components/ButtonsComponent.html":{}}}],["this.utilsservice.fullscreendialogsub(createdialogref",{"_index":1239,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.utilsservice.fullscreendialogsub(recurringdialogref",{"_index":878,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["this.utilsservice.ismediumscreen.subscribe((ismediumscreen",{"_index":989,"title":{},"body":{"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["this.utilsservice.sidenavmenuchanges.pip",{"_index":1246,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["this.utilsservice.togglesidenavmenu('collaps",{"_index":994,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.utilsservice.togglesidenavmenu('expand",{"_index":993,"title":{},"body":{"components/HeaderComponent.html":{}}}],["though",{"_index":1771,"title":{},"body":{"index.html":{}}}],["through",{"_index":153,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"index.html":{}}}],["throughout",{"_index":1735,"title":{},"body":{"index.html":{}}}],["throw",{"_index":715,"title":{},"body":{"modules/CoreModule.html":{}}}],["time",{"_index":188,"title":{},"body":{"components/AboutComponent.html":{},"classes/Task.html":{},"index.html":{}}}],["timeout",{"_index":1727,"title":{},"body":{"index.html":{}}}],["titl",{"_index":508,"title":{},"body":{"components/CompleteTaskComponent.html":{}}}],["today",{"_index":219,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["todo",{"_index":1750,"title":{},"body":{"index.html":{}}}],["togeth",{"_index":868,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["togglesidenavmenu",{"_index":1487,"title":{},"body":{"injectables/UtilsService.html":{}}}],["togglesidenavmenu(ev",{"_index":1496,"title":{},"body":{"injectables/UtilsService.html":{}}}],["token",{"_index":1018,"title":{},"body":{"injectables/HttpService.html":{}}}],["tomorrow",{"_index":220,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["toolbar",{"_index":1078,"title":{},"body":{"components/ListItemComponent.html":{}}}],["tooltip",{"_index":776,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["top",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{}}}],["touch",{"_index":532,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["track",{"_index":1499,"title":{},"body":{"injectables/UtilsService.html":{}}}],["travers",{"_index":1200,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["treat",{"_index":869,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["tri",{"_index":1731,"title":{},"body":{"index.html":{}}}],["trigger",{"_index":222,"title":{},"body":{"components/AboutComponent.html":{},"injectables/HttpService.html":{}}}],["true",{"_index":108,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["true).isvalid",{"_index":1360,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["true).utc().tod",{"_index":1361,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["two",{"_index":1658,"title":{},"body":{"index.html":{}}}],["type",{"_index":41,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"injectables/MatPaginatorCustom.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":1786,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":1619,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":1613,"title":{},"body":{"index.html":{}}}],["ui",{"_index":130,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["undefin",{"_index":689,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":1761,"title":{},"body":{"index.html":{}}}],["uniqu",{"_index":1296,"title":{},"body":{"classes/Task.html":{}}}],["unit",{"_index":1699,"title":{},"body":{"index.html":{}}}],["unsubscrib",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{}}}],["until",{"_index":1201,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["up",{"_index":667,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"index.html":{}}}],["updat",{"_index":199,"title":{},"body":{"components/AboutComponent.html":{},"components/CompleteTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"index.html":{}}}],["update(properti",{"_index":1330,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["updateal",{"_index":777,"title":{},"body":{"components/EditTaskComponent.html":{},"components/RecurringTaskComponent.html":{}}}],["updateall=tru",{"_index":1181,"title":{},"body":{"components/RecurringTaskComponent.html":{}}}],["updatetaskfilt",{"_index":1416,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["urgent",{"_index":1303,"title":{},"body":{"classes/Task.html":{},"components/TaskFormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["url",{"_index":1020,"title":{},"body":{"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/SidenavTasksComponent.html":{}}}],["us",{"_index":146,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonsComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/ListItemComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"index.html":{}}}],["useclass",{"_index":724,"title":{},"body":{"modules/CoreModule.html":{},"modules/EditTaskModule.html":{}}}],["user",{"_index":462,"title":{},"body":{"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TasksFilterComponent.html":{}}}],["util",{"_index":1480,"title":{},"body":{"injectables/UtilsService.html":{},"index.html":{}}}],["utilsservic",{"_index":444,"title":{"injectables/UtilsService.html":{}},"body":{"components/ButtonsComponent.html":{},"modules/CoreModule.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"modules/TasksModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["valid",{"_index":560,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["validators.requir",{"_index":593,"title":{},"body":{"components/CompleteTaskComponent.html":{},"components/RecurringTaskComponent.html":{},"components/TaskFormComponent.html":{}}}],["valu",{"_index":337,"title":{},"body":{"components/AppComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/MatPaginatorCustom.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"classes/Task.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":234,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/FooterComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksComponent.html":{},"components/TasksFilterComponent.html":{}}}],["variabl",{"_index":1534,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["varieti",{"_index":134,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["variou",{"_index":1734,"title":{},"body":{"index.html":{}}}],["veri",{"_index":1601,"title":{},"body":{"index.html":{}}}],["version",{"_index":1648,"title":{},"body":{"index.html":{}}}],["view",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"modules/CreateTaskModule.html":{},"modules/TasksTableModule.html":{},"index.html":{}}}],["viewchild",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/CompleteTasksTableComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/PendingTasksTableComponent.html":{},"components/TasksFilterComponent.html":{}}}],["viewchild('aboutscrol",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{}}}],["viewchild('completedtask",{"_index":622,"title":{},"body":{"components/CompleteTasksTableComponent.html":{}}}],["viewchild('pendingtask",{"_index":1177,"title":{},"body":{"components/PendingTasksTableComponent.html":{}}}],["viewchild('taskfilt",{"_index":1433,"title":{},"body":{"components/TasksFilterComponent.html":{}}}],["viewchild('taskfilterlargescreen",{"_index":987,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viewchild(buttonbarcompon",{"_index":821,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["viewchild(matpagin",{"_index":434,"title":{},"body":{"components/ButtonBarComponent.html":{}}}],["viewchild(taskformcompon",{"_index":743,"title":{},"body":{"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{}}}],["visibl",{"_index":213,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/ButtonsComponent.html":{}}}],["visual",{"_index":1600,"title":{},"body":{"index.html":{}}}],["void",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/ButtonsComponent.html":{},"components/CompleteTaskComponent.html":{},"components/ConfirmDeleteTaskComponent.html":{},"injectables/ConsoleLoggerService.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"injectables/HttpService.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"components/TaskFormComponent.html":{},"components/TasksFilterComponent.html":{},"injectables/UtilsService.html":{}}}],["vulner",{"_index":1679,"title":{},"body":{"index.html":{}}}],["want",{"_index":648,"title":{},"body":{"components/ConfirmDeleteTaskComponent.html":{},"index.html":{}}}],["warn",{"_index":680,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"classes/Logger.html":{},"injectables/LoggerService.html":{},"index.html":{}}}],["way",{"_index":1076,"title":{},"body":{"components/ListItemComponent.html":{},"index.html":{}}}],["web",{"_index":1700,"title":{},"body":{"index.html":{}}}],["webdriv",{"_index":1739,"title":{},"body":{"index.html":{}}}],["webriv",{"_index":1741,"title":{},"body":{"index.html":{}}}],["weekli",{"_index":1288,"title":{},"body":{"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["well",{"_index":867,"title":{},"body":{"components/EditTaskComponent.html":{},"index.html":{}}}],["whether",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"components/ButtonBarComponent.html":{},"components/CreateTaskComponent.html":{},"components/EditTaskComponent.html":{},"components/HeaderComponent.html":{},"components/ListItemComponent.html":{},"injectables/LoaderService.html":{},"interfaces/LoaderState.html":{},"components/RecurringTaskComponent.html":{},"components/SidenavTasksComponent.html":{},"injectables/UtilsService.html":{}}}],["while(route.firstchild",{"_index":1261,"title":{},"body":{"components/SidenavTasksComponent.html":{}}}],["whose",{"_index":1327,"title":{},"body":{"components/TaskFormComponent.html":{}}}],["width",{"_index":1494,"title":{},"body":{"injectables/UtilsService.html":{}}}],["win70",{"_index":1651,"title":{},"body":{"index.html":{}}}],["window",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["within",{"_index":315,"title":{},"body":{"modules/AboutRoutingModule.html":{},"modules/TasksRoutingModule.html":{}}}],["without",{"_index":1743,"title":{},"body":{"index.html":{}}}],["work",{"_index":133,"title":{},"body":{"components/AboutComponent.html":{},"components/EditTaskComponent.html":{},"index.html":{}}}],["wrapper",{"_index":614,"title":{},"body":{"components/CompleteTasksTableComponent.html":{},"modules/CoreModule.html":{},"components/PendingTasksTableComponent.html":{},"modules/TasksModule.html":{}}}],["ye",{"_index":676,"title":{},"body":{"injectables/ConsoleLoggerService.html":{},"injectables/HttpService.html":{},"injectables/LoggerService.html":{}}}],["yearli",{"_index":1290,"title":{},"body":{"classes/Task.html":{},"components/TaskFormComponent.html":{},"index.html":{}}}],["yellow",{"_index":902,"title":{},"body":{"components/EditTaskComponent.html":{}}}],["zone.j",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":283,"title":{},"body":{"modules/AboutModule.html":{},"modules/AppModule.html":{},"modules/CompleteTaskModule.html":{},"modules/ConfirmDeleteTaskModule.html":{},"modules/CreateTaskModule.html":{},"modules/EditTaskModule.html":{},"modules/FooterModule.html":{},"modules/HeaderModule.html":{},"modules/SidenavTasksModule.html":{},"modules/TaskFormModule.html":{},"modules/TasksButtonBarModule.html":{},"modules/TasksButtonsModule.html":{},"modules/TasksDialogModule.html":{},"modules/TasksFilterModule.html":{},"modules/TasksModule.html":{},"modules/TasksTableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/about/about.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the about page for the app.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                about\n            \n\n            \n                styleUrls\n                about.component.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aboutElement\n                            \n                            \n                                displayScrollToTop\n                            \n                            \n                                    Private\n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onAboutScroll\n                            \n                            \n                                scrollToTop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/about/about.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:38\n                            \n                        \n\n\n                \n                    \n                            Initialize subscription for route fragment after view is initialized\nso element at fragment can be scrolled into view (if fragment present).\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:30\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onAboutScroll\n                            \n                            \n                        \n                    \n                \n                \n                    \nonAboutScroll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:55\n                            \n                        \n\n\n                \n                    \n                            Handles setting displayScrollToTop on window scroll event.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scrollToTop\n                            \n                            \n                        \n                    \n                \n                \n                    \nscrollToTop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/about/about.component.ts:67\n                            \n                        \n\n\n                \n                    \n                            Scrolls the about div to the top.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aboutElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        aboutElement:     ElementRef\n\n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/about/about.component.ts:17\n                            \n                        \n\n                \n                    \n                        Reference to the element that scrolls in the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayScrollToTop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        displayScrollToTop:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/about/about.component.ts:19\n                            \n                        \n\n                \n                    \n                        Boolean to indicate whether the button to scroll to top should display (defaults to false). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/about/about.component.ts:21\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\n/**\n * Creates the about page for the app.\n */\n@Component({\n    selector: 'about',\n    templateUrl: './about.component.html',\n    styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements AfterViewInit, OnDestroy {\n\n    /** Reference to the element that scrolls in the component. */\n    @ViewChild('aboutScroll') aboutElement: ElementRef;\n    /** Boolean to indicate whether the button to scroll to top should display (defaults to false). */\n    displayScrollToTop: boolean;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(private route:ActivatedRoute) {\n        this.displayScrollToTop = false;\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize subscription for route fragment after view is initialized\n     * so element at fragment can be scrolled into view (if fragment present).\n     */\n    ngAfterViewInit() {\n        this.sub = new Subscription();\n\n        // Add support for handling anchor tags based on answers from issue below.\n        // https://github.com/angular/angular/issues/6595\n        const sub = this.route.fragment.subscribe(f => {\n            const element = document.querySelector('#' + f);\n            if(element) {\n                element.scrollIntoView({behavior:'smooth'});\n            }\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Handles setting displayScrollToTop on window scroll event.\n     */\n    onAboutScroll() {\n        if (this.aboutElement.nativeElement.scrollTop > 100) {\n            this.displayScrollToTop = true;\n        } \n        else if (this.aboutElement.nativeElement.scrollTop \n    \n\n    \n        \n    \n        MyTasks\n\n        TABLE OF CONTENTS\n\n        \n            Description of Application\n            Create Task\n            Complete Task\n            Delete Task\n            Filter Tasks\n        \n\n        1. Description of Application\n        \n            MyTasks is a simple application meant to create and manage Tasks. Tasks can be\n            modified, completed, and deleted. Tasks are displayed in tables and are separated \n            by state; pending or complete. By default tasks are sorted by due date in \n            ascending order.\n        \n        \n            The UI is designed to be responsive, and meant to work across a variety of devices. Some\n            of the enhanced functionality is limited on smaller devices (due to the smaller screen \n            space and lack of mouse input), so it is recommended to use a desktop or laptop if \n            available. Additionally smaller screen sizes have only been emulated through chrome \n            devtools and have not been fully tested.\n        \n        \n            *All screenshots below were taken on a desktop.\n        \n\n        2. Create Task\n\n        \n            To create a Task click the \n            button located in the sidenav menu on the left hand side of the screen. This \n            will open a modal dialog where you can enter the details for a Task. You must \n            enter a name, description, and due date as shown below.\n        \n\n        \n            \n        \n\n        \n            All Tasks will default to a \"Low\" priority, but you may modify this using the\n            \"Priority\" select drop down provided on the form. You may also create a \n            repeating Task by selecting anything other than \"Does not repeat\" in the \n            \"Repeat\" field at the bottom of the form. This will enable the \"End After\" \n            field where you can enter the number of times you would like this Task to \n            repeat. A sample repeating Task is shown below.\n        \n\n        \n            \n        \n\n        \n            Click the  \n            button once you have completely filled out the form to finish creating your Task.\n        \n\n        3. Complete Task\n\n        \n            To complete a Task click the row of the desired Task in the table to modify\n            the Task. This will open a page as seen below where you can complete and/or \n            update the the details of the Task.\n        \n\n        \n            \n        \n\n        \n            Click the  button\n            in the button bar above the Task details to open the dialog to complete a Task. \n            You must enter the date the Task is completed as displayed below. Then click the\n            \n            button to finish completing the Task.\n        \n\n        \n            \n        \n\n        \n            Additionally you may mark one or more Tasks complete from the pending Tasks table,\n            as long as they were all complete on the same date. Select the checkbox \n            of one or more Tasks to enable the  \n            button in the button bar above the table. Then click the \n            \n            button to display the same dialog as above and complete all selected Tasks.  \n        \n\n        4. Delete Task\n\n        \n            To delete a Task click the row of the desired Task in the table as in the \"Complete\n            Task\" section. Then click the \n            button in the button bar displayed above the Task details. This will open a confirmation\n            dialog as displayed below.\n        \n\n        \n            \n        \n\n        \n            You must click the  \n            button to delete the Task.\n        \n\n        \n            Additionally you may delete one or more Tasks from the table views (pending\n            or complete). Select the checkbox of one or more Tasks to enable the \n             \n            button in the button bar above the table. Click the \n            \n            button to display the same dialog as above and delete all selected Tasks.  \n        \n\n        5. Filter Tasks\n\n        \n            Tasks can be filtered using the \n             \n            input in the header. You may filter Tasks on any visible column (including due date \n            and date completed). To sort by date click the \n            \n            button to open the date picker and select the desired date. Additionally, pending \n            Tasks can be filtered using the sidenav menu items to filter Tasks over due, due \n            today, and due tomorrow. *Note the menu items are just triggering special keyword \n            filters which can also be used in the \n            \n            input. The actual filters are \"overdue\", \"today\", and \"tomorrow\". You may also\n            enter the current date in the search field and you will see the same results as\n            \"today\".\n        \n    \n \n\n    \n    \n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            MyTasks        TABLE OF CONTENTS                    Description of Application            Create Task            Complete Task            Delete Task            Filter Tasks                1. Description of Application                    MyTasks is a simple application meant to create and manage Tasks. Tasks can be            modified, completed, and deleted. Tasks are displayed in tables and are separated             by state; pending or complete. By default tasks are sorted by due date in             ascending order.                            The UI is designed to be responsive, and meant to work across a variety of devices. Some            of the enhanced functionality is limited on smaller devices (due to the smaller screen             space and lack of mouse input), so it is recommended to use a desktop or laptop if             available. Additionally smaller screen sizes have only been emulated through chrome             devtools and have not been fully tested.                            *All screenshots below were taken on a desktop.                2. Create Task                    To create a Task click the             button located in the sidenav menu on the left hand side of the screen. This             will open a modal dialog where you can enter the details for a Task. You must             enter a name, description, and due date as shown below.                                                        All Tasks will default to a \"Low\" priority, but you may modify this using the            \"Priority\" select drop down provided on the form. You may also create a             repeating Task by selecting anything other than \"Does not repeat\" in the             \"Repeat\" field at the bottom of the form. This will enable the \"End After\"             field where you can enter the number of times you would like this Task to             repeat. A sample repeating Task is shown below.                                                        Click the              button once you have completely filled out the form to finish creating your Task.                3. Complete Task                    To complete a Task click the row of the desired Task in the table to modify            the Task. This will open a page as seen below where you can complete and/or             update the the details of the Task.                                                        Click the  button            in the button bar above the Task details to open the dialog to complete a Task.             You must enter the date the Task is completed as displayed below. Then click the                        button to finish completing the Task.                                                        Additionally you may mark one or more Tasks complete from the pending Tasks table,            as long as they were all complete on the same date. Select the checkbox             of one or more Tasks to enable the              button in the button bar above the table. Then click the                         button to display the same dialog as above and complete all selected Tasks.                  4. Delete Task                    To delete a Task click the row of the desired Task in the table as in the \"Complete            Task\" section. Then click the             button in the button bar displayed above the Task details. This will open a confirmation            dialog as displayed below.                                                        You must click the              button to delete the Task.                            Additionally you may delete one or more Tasks from the table views (pending            or complete). Select the checkbox of one or more Tasks to enable the                          button in the button bar above the table. Click the                         button to display the same dialog as above and delete all selected Tasks.                  5. Filter Tasks                    Tasks can be filtered using the                          input in the header. You may filter Tasks on any visible column (including due date             and date completed). To sort by date click the                         button to open the date picker and select the desired date. Additionally, pending             Tasks can be filtered using the sidenav menu items to filter Tasks over due, due             today, and due tomorrow. *Note the menu items are just triggering special keyword             filters which can also be used in the                         input. The actual filters are \"overdue\", \"today\", and \"tomorrow\". You may also            enter the current date in the search field and you will see the same results as            \"today\".                         '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AboutModule.html":{"url":"modules/AboutModule.html","title":"module - AboutModule","body":"\n                   \n\n\n\n\n  Modules\n  AboutModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AboutModule\n\n\n\ncluster_AboutModule_declarations\n\n\n\ncluster_AboutModule_imports\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAboutModule\n\nAboutModule\n\nAboutModule -->\n\nAboutComponent->AboutModule\n\n\n\n\n\nAboutRoutingModule\n\nAboutRoutingModule\n\nAboutModule -->\n\nAboutRoutingModule->AboutModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/about/about.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components and modules required for the about page.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AboutComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                AboutComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    AboutRoutingModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleUp } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faAngleUp);\n\n/* module */\nimport { AboutComponent } from './about.component';\nimport { AboutRoutingModule } from './about.routing';\n\n/**\n * Defines the components and modules required for the about page.\n */\n@NgModule({\n    declarations: [\n        AboutComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        MatButtonModule,\n\n        FontAwesomeModule,\n        \n        AboutRoutingModule\n    ],\n    entryComponents: [\n        AboutComponent\n    ]\n})\nexport class AboutModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AboutRoutingModule.html":{"url":"modules/AboutRoutingModule.html","title":"module - AboutRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  AboutRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/about/about.routing.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/* About module components */\nimport { AboutComponent } from './about.component';\n\n/* The routes within the About module. Defaults to the AboutComponent. */\nconst routes: Routes = [\n    {\n        path: 'about',\n        component: AboutComponent\n    }\n];\n\n/**\n * The router module for the About module.\n */\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AboutRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the main layout for the application. The main layout currently\nconsists of the header, side menu, footer, and router-outlet.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loading\n                            \n                            \n                                    Private\n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetectorRef: ChangeDetectorRef, loaderService: LoaderService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetectorRef\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        loaderService\n                                                  \n                                                        \n                                                                    LoaderService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/app.component.ts:32\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/app.component.ts:39\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loading:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:20\n                            \n                        \n\n                \n                    \n                        Boolean value to indicate when the application is loading something. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:22\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\n/* app services */\nimport { LoaderService, LoaderState } from './core/services/loader.service';\n\n/**\n * Creates the main layout for the application. The main layout currently\n * consists of the header, side menu, footer, and router-outlet.\n */\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnDestroy, OnInit {\n\n    /** Boolean value to indicate when the application is loading something. */\n    loading: boolean;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private loaderService: LoaderService\n    ) {}\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.sub = new Subscription();        \n        const subLoading = this.loaderService.loaderState.subscribe((loaderState: LoaderState) => {\n            this.loading = loaderState.show;\n            this.changeDetectorRef.detectChanges();\n        });\n        this.sub.add(subLoading);\n    }\n}\n\n    \n\n    \n        \n    \n\n\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n  Modules\n  AppModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nPageNotFoundComponent\n\nPageNotFoundComponent\n\nAppModule -->\n\nPageNotFoundComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAboutModule\n\nAboutModule\n\nAppModule -->\n\nAboutModule->AppModule\n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nFooterModule\n\nFooterModule\n\nAppModule -->\n\nFooterModule->AppModule\n\n\n\n\n\nHeaderModule\n\nHeaderModule\n\nAppModule -->\n\nHeaderModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                AppComponent\n                            \n                            \n                                PageNotFoundComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                PageNotFoundComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    AboutModule\n                            \n                            \n                                    AppRoutingModule\n                            \n                            \n                                    CoreModule\n                            \n                            \n                                    FooterModule\n                            \n                            \n                                    HeaderModule\n                            \n                            \n                                    TasksModule\n                            \n                    \n                \n                \n                    Bootstrap\n                    \n                            \n                                AppComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatProgressSpinnerModule } from '@angular/material';\n\n/* app components */\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app.routing';\nimport { AboutModule } from './about/about.module';\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\nimport { CoreModule } from './core/core.module';\nimport { FooterModule } from './footer/footer.module';\nimport { HeaderModule } from './header/header.module';\nimport { TasksModule } from './tasks/tasks.module'; \n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PageNotFoundComponent\n  ],\n  imports: [\n    /* angular libraries */\n    BrowserModule,\n    MatProgressSpinnerModule,\n\n    /* app modules */\n    AboutModule,\n    CoreModule.forRoot(),\n    FooterModule,\n    HeaderModule,\n    TasksModule.forRoot(),\n    AppRoutingModule\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [PageNotFoundComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  AppRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.routing.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/* components */\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\n\n/* The routes for the app. Defaults to the tasks module at the root. */\nconst appRoutes: Routes = [\n    {\n        path: 'about',\n        loadChildren: './about/about.module#AboutModule'\n    },\n    {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'tasks'\n    },\n    {\n        path: '404',\n        component: PageNotFoundComponent\n    },\n    {\n        path: '**',\n        component: PageNotFoundComponent\n    }\n];\n\n/**\n * The router module for the application.\n */\n@NgModule({\n    imports: [RouterModule.forRoot(appRoutes)],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {};\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ButtonBarComponent.html":{"url":"components/ButtonBarComponent.html","title":"component - ButtonBarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ButtonBarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/button-bar/button-bar.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a bar that consists of the main @link{ButtonsComponent} and\na paginator to page through an array of given Tasks. The capability\nto disable and/or hide buttons on ButtonsComponent is extended through\nthe provided @Inputs that match the @Inputs in the ButtonsComponent.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                button-bar\n            \n\n            \n                styleUrls\n                button-bar.component.css\n            \n\n\n\n            \n                templateUrl\n                ./button-bar.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paginator\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disableCompleteButton\n                            \n                            \n                                disableDeleteButton\n                            \n                            \n                                disableEditButton\n                            \n                            \n                                hideCompleteButton\n                            \n                            \n                                hideEditButton\n                            \n                            \n                                hidePageSize\n                            \n                            \n                                length\n                            \n                            \n                                pageSize\n                            \n                            \n                                pageSizeOptions\n                            \n                            \n                                showBackButton\n                            \n                            \n                                showFirstLastButtons\n                            \n                            \n                                tasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/button-bar/button-bar.component.ts:48\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disableCompleteButton\n                    \n                    \n                        Boolean to indicate if the complete button should be disabled (enabled by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        disableDeleteButton\n                    \n                    \n                        Boolean to indicate if the delete button should be disabled (enabled by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        disableEditButton\n                    \n                    \n                        Boolean to indicate if the edit button should be disabled (enabled by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        hideCompleteButton\n                    \n                    \n                        Boolean to indicate if the complete button should be hidden (hidden by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        hideEditButton\n                    \n                    \n                        Boolean to indicate if the edit button should be hidden (visible by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        hidePageSize\n                    \n                    \n                        Boolean to indicate if the pageSize options in paginator should be hidden (hidden by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        length\n                    \n                    \n                        The length of the paginator. \n\n                            \n                            Type:    number\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageSize\n                    \n                    \n                        The size for the paginator. \n\n                            \n                            Type:    number\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        pageSizeOptions\n                    \n                    \n                        The size options for pages. \n\n                            \n                            Type:    number[]\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showBackButton\n                    \n                    \n                        Boolean to indicate whether to show the back button (hidden by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showFirstLastButtons\n                    \n                    \n                        Boolean to indicate whether to show first and last buttons (hidden by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:42\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        tasks\n                    \n                    \n                        The Task(s) being managed with the buttons. \n\n                            \n                            Type:    Task[]\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:44\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        click\n                    \n                    \n                        Event emitted when one of the buttons is clicked. \n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:46\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paginator\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        paginator:     MatPaginator\n\n                    \n                \n                    \n                        \n                            Type :     MatPaginator\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/button-bar/button-bar.component.ts:48\n                            \n                        \n\n                \n                    \n                        The paginator component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material';\n\n/* app */\nimport { Task } from '@tasks/shared/models/task.model';\n\n/**\n * Creates a bar that consists of the main @link{ButtonsComponent} and\n * a paginator to page through an array of given Tasks. The capability\n * to disable and/or hide buttons on ButtonsComponent is extended through\n * the provided @Inputs that match the @Inputs in the ButtonsComponent.\n */\n@Component({\n    selector: 'button-bar',\n    templateUrl: './button-bar.component.html',\n    styleUrls: ['./button-bar.component.css']\n})\nexport class ButtonBarComponent { \n\n    /** Boolean to indicate if the complete button should be disabled (enabled by default). */\n    @Input() disableCompleteButton: boolean;\n    /** Boolean to indicate if the delete button should be disabled (enabled by default). */\n    @Input() disableDeleteButton: boolean;\n    /** Boolean to indicate if the edit button should be disabled (enabled by default). */\n    @Input() disableEditButton: boolean;\n    /** Boolean to indicate if the complete button should be hidden (hidden by default). */\n    @Input() hideCompleteButton: boolean;\n    /** Boolean to indicate if the edit button should be hidden (visible by default). */\n    @Input() hideEditButton: boolean;\n    /** Boolean to indicate if the pageSize options in paginator should be hidden (hidden by default). */\n    @Input() hidePageSize: boolean;\n    /** The length of the paginator. */\n    @Input() length: number;\n    /** The size for the paginator. */\n    @Input() pageSize: number;\n    /** The size options for pages. */\n    @Input() pageSizeOptions: number[];\n    /** Boolean to indicate whether to show the back button (hidden by default). */\n    @Input() showBackButton: boolean;\n    /** Boolean to indicate whether to show first and last buttons (hidden by default). */\n    @Input() showFirstLastButtons: boolean;\n    /** The Task(s) being managed with the buttons. */\n    @Input() tasks: Task[];\n    /** Event emitted when one of the buttons is clicked. */\n    @Output() click: EventEmitter;\n    /** The paginator component. */\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n\n    constructor(){\n        this.click = new EventEmitter();\n    }\n}\n\n    \n\n    \n        \n    \n         \n    \n    \n    \n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                             '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ButtonBarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ButtonsComponent.html":{"url":"components/ButtonsComponent.html","title":"component - ButtonsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ButtonsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/buttons/buttons.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the main buttons to manage one or more Tasks. The main management\ncapabilities for Tasks include completing, deleting, and editing. Any \nbutton can be disabled and/or hidden using the provided @Inputs.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                buttons\n            \n\n            \n                styleUrls\n                buttons.component.css\n            \n\n\n\n            \n                templateUrl\n                ./buttons.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openCompleteDialog\n                            \n                            \n                                openConfirmDeleteDialog\n                            \n                            \n                                openEditDialog\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disableCompleteButton\n                            \n                            \n                                disableDeleteButton\n                            \n                            \n                                disableEditButton\n                            \n                            \n                                hideCompleteButton\n                            \n                            \n                                hideEditButton\n                            \n                            \n                                tasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, router: Router, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/buttons/buttons.component.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                    UtilsService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disableCompleteButton\n                    \n                    \n                        Boolean to indicate if the complete button should be disabled (enabled by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        disableDeleteButton\n                    \n                    \n                        Boolean to indicate if the delete button should be disabled (enabled by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        disableEditButton\n                    \n                    \n                        Boolean to indicate if the edit button should be disabled (enabled by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        hideCompleteButton\n                    \n                    \n                        Boolean to indicate if the complete button should be hidden (visible by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        hideEditButton\n                    \n                    \n                        Boolean to indicate if the edit button should be hidden (visible by default). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:34\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        tasks\n                    \n                    \n                        The Task(s) being managed with the buttons. \n\n                            \n                            Type:    Task[]\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:36\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        click\n                    \n                    \n                        Event emitted when one of the buttons is clicked. \n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:38\n                            \n                        \n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:111\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:118\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openCompleteDialog\n                            \n                            \n                        \n                    \n                \n                \n                    \nopenCompleteDialog(event: )\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:53\n                            \n                        \n\n\n                \n                    \n                            Opens the dialog to complete the selected Task(s).\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openConfirmDeleteDialog\n                            \n                            \n                        \n                    \n                \n                \n                    \nopenConfirmDeleteDialog(event: )\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:74\n                            \n                        \n\n\n                \n                    \n                            Opens the dialog to confirm if the selected Task(s) should be deleted.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openEditDialog\n                            \n                            \n                        \n                    \n                \n                \n                    \nopenEditDialog(event: )\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:102\n                            \n                        \n\n\n                \n                    \n                            Opens the dialog to edit the selected Task. If the Task is not complete\nand it is a repeating Task, then the RecurringTaskComponent is displayed\nto determine if the user wants to edit the single selected Task or all\nremaining Tasks (including the one selected). Otherwise the basic edit\nTask dialog is rendered.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/buttons/buttons.component.ts:40\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, OnDestroy, OnInit, Input, Output } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from \"@angular/material\";\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\n/* app */\nimport { CompleteTaskComponent } from '@tasks/dialogs/complete-task/complete-task.component';\nimport { ConfirmDeleteTaskComponent } from '@tasks/dialogs/confirm-delete-task/confirm-delete-task.component';\nimport { Task } from '@tasks/shared/models/task.model';\nimport { UtilsService } from '@tasks/shared/services/utils.service';\n\n/**\n * Creates the main buttons to manage one or more Tasks. The main management\n * capabilities for Tasks include completing, deleting, and editing. Any \n * button can be disabled and/or hidden using the provided @Inputs.\n */\n@Component({\n    selector: 'buttons',\n    templateUrl: './buttons.component.html',\n    styleUrls: ['./buttons.component.css']\n})\nexport class ButtonsComponent implements OnDestroy, OnInit { \n\n    /** Boolean to indicate if the complete button should be disabled (enabled by default). */\n    @Input() disableCompleteButton: boolean;\n    /** Boolean to indicate if the delete button should be disabled (enabled by default). */\n    @Input() disableDeleteButton: boolean;\n    /** Boolean to indicate if the edit button should be disabled (enabled by default). */\n    @Input() disableEditButton: boolean;\n    /** Boolean to indicate if the complete button should be hidden (visible by default). */\n    @Input() hideCompleteButton: boolean;\n    /** Boolean to indicate if the edit button should be hidden (visible by default). */\n    @Input() hideEditButton: boolean;\n    /** The Task(s) being managed with the buttons. */\n    @Input() tasks: Task[];\n    /** Event emitted when one of the buttons is clicked. */\n    @Output() click: EventEmitter;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(\n        private dialog: MatDialog,\n        private router: Router,\n        private utilsService: UtilsService\n    ){\n        this.click = new EventEmitter();\n    }\n\n    /**\n     * Opens the dialog to complete the selected Task(s).\n     */\n    openCompleteDialog(event) {\n        const dialogConfig = new MatDialogConfig();\n        dialogConfig.width = '50%';\n        dialogConfig.autoFocus = false;\n        dialogConfig.data = { tasks: this.tasks };\n        let completeSelectedDialogRef = this.dialog.open(CompleteTaskComponent, dialogConfig);\n        this.utilsService.fullScreenDialogSub(completeSelectedDialogRef, '50%');\n\n        // subscribe to the completeTask event from the dialog\n        const sub = completeSelectedDialogRef.componentInstance.completeTask.subscribe(() => {\n            this.click.emit(true);\n        });\n        this.sub.add(sub);\n\n        // prevent propagation so parent components do not receive the click event\n        event.stopPropagation();\n    }\n\n    /**\n     * Opens the dialog to confirm if the selected Task(s) should be deleted.\n     */\n    openConfirmDeleteDialog(event) {\n        const dialogConfig = new MatDialogConfig();\n        dialogConfig.width = '50%';\n        dialogConfig.autoFocus = false;\n        dialogConfig.data = { tasks: this.tasks };\n        let confirmDeleteDialogRef = this.dialog.open(ConfirmDeleteTaskComponent, dialogConfig);\n\n        this.utilsService.fullScreenDialogSub(confirmDeleteDialogRef);\n\n        // subscribe to the deleteTask event from the dialog\n        const sub = confirmDeleteDialogRef.componentInstance.deleteTask.subscribe(() => {\n            this.click.emit(true);\n        });\n        this.sub.add(sub);\n\n        // prevent propagation so parent components do not receive the click event\n        event.stopPropagation();\n    }\n\n    /**\n     * Opens the dialog to edit the selected Task. If the Task is not complete\n     * and it is a repeating Task, then the RecurringTaskComponent is displayed\n     * to determine if the user wants to edit the single selected Task or all\n     * remaining Tasks (including the one selected). Otherwise the basic edit\n     * Task dialog is rendered.\n     * \n     * @param event\n     */\n    openEditDialog(event) {\n        this.router.navigate(['tasks', this.tasks[0].id]);\n        // prevent propagation so parent components do not receive the click event\n        event.stopPropagation();\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.sub = new Subscription();\n    }\n}\n\n    \n\n    \n        \n    \n    \n    \n\n\n     \n    \n    \n\n\n    \n    \n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                     '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ButtonsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CompleteTaskComponent.html":{"url":"components/CompleteTaskComponent.html","title":"component - CompleteTaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CompleteTaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/dialogs/complete-task/complete-task.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a dialog to complete a Task or list of Tasks. If more than one\nTask is completed, then they will all be marked complete with the same\ndate.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                complete-task\n            \n\n            \n                styleUrls\n                complete-task.component.css\n            \n\n\n\n            \n                templateUrl\n                ./complete-task.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                dateCompletedForm\n                            \n                            \n                                hint\n                            \n                            \n                                maxDateCompleted\n                            \n                            \n                                    Private\n                                sub\n                            \n                            \n                                tasks\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                checkError\n                            \n                            \n                                complete\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                notifyAndClose\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                completeTask\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.marker-complete-task-dialog\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any, dialogRef: MatDialogRef, formBuilder: FormBuilder, logger: LoggerService, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        completeTask\n                    \n                    \n                        Event emitted when the Task(s) are complete. \n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:29\n                            \n                        \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.marker-complete-task-dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        class.marker-complete-task-dialog:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \ncancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:57\n                            \n                        \n\n\n                \n                    \n                            Cancels the Task edit and closes the dialog.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkError\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckError(param: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:68\n                            \n                        \n\n\n                \n                    \n                            Returns true if the form is invalid and the property of the given form is dirty or it has\nbeen touched.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        param\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            complete\n                            \n                            \n                        \n                    \n                \n                \n                    \ncomplete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:75\n                            \n                        \n\n\n                \n                    \n                            Completes the Task(s).\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:98\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:105\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            notifyAndClose\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        notifyAndClose(msg: string, task: Task)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:137\n                            \n                        \n\n\n                \n                    \n                            Displays a snackBar with the given message, emits the given Task to this\ncomponents parent, and closes this dialog.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        msg\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The message to display to the user.\n\n                                                        \n                                                \n                                                \n                                                        task\n                                                        \n                                                                    Task\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        content:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:31\n                            \n                        \n\n                \n                    \n                        The text to display in the content along with the date completed field. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateCompletedForm\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dateCompletedForm:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:33\n                            \n                        \n\n                \n                    \n                        The form for the dateCompleted property. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hint\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        hint:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:35\n                            \n                        \n\n                \n                    \n                        The text to display for the dateCompleted hint. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxDateCompleted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxDateCompleted:     Date\n\n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:38\n                            \n                        \n\n                \n                    \n                        The max date a Task can be marked as complete (set to current date; it doesn't \nmake a lot of sense to allow user to mark a task complete in the future).\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:44\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tasks:     Task[]\n\n                    \n                \n                    \n                        \n                            Type :     Task[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:40\n                            \n                        \n\n                \n                    \n                        The Task(s) to complete. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        title:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/complete-task/complete-task.component.ts:42\n                            \n                        \n\n                \n                    \n                        The title text for the dialog. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import * as moment from 'moment';\n\n/* angular libraries */\nimport { Component, EventEmitter, HostBinding, Inject, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { Subscription } from 'rxjs';\n\n/* app */\nimport { LoggerService } from 'app/core/services/logger.service';\nimport { Task } from '@tasks/shared/models/task.model';\nimport { TaskService} from '@tasks/shared/services/task.service';\n\n/**\n * Creates a dialog to complete a Task or list of Tasks. If more than one\n * Task is completed, then they will all be marked complete with the same\n * date.\n */\n@Component({\n    selector: 'complete-task',\n    templateUrl: './complete-task.component.html',\n    styleUrls: ['./complete-task.component.css']\n})\nexport class CompleteTaskComponent implements OnInit, OnDestroy {\n\n    @HostBinding('class.marker-complete-task-dialog') classMarker : boolean = true;\n    /** Event emitted when the Task(s) are complete. */\n    @Output() completeTask: EventEmitter = new EventEmitter();\n    /** The text to display in the content along with the date completed field. */\n    content: string;\n    /** The form for the dateCompleted property. */\n    dateCompletedForm: FormGroup;\n    /** The text to display for the dateCompleted hint. */\n    hint: string;\n    /** The max date a Task can be marked as complete (set to current date; it doesn't \n        make a lot of sense to allow user to mark a task complete in the future).*/\n    maxDateCompleted: Date;\n    /** The Task(s) to complete. */\n    tasks: Task[];\n    /** The title text for the dialog. */\n    title: string;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data:any,\n        private dialogRef: MatDialogRef,\n        private formBuilder: FormBuilder,\n        private logger: LoggerService,\n        private taskService: TaskService\n    ) {}\n\n    /**\n     * Cancels the Task edit and closes the dialog.\n     */\n    cancel() {\n        this.dialogRef.close();\n    }\n\n    /**\n     * Returns true if the form is invalid and the property of the given form is dirty or it has\n     * been touched.\n     * \n     * @param form The form to validate.\n     * @param property The property that was updated.\n     */\n    checkError(param: string) {\n        return this.dateCompletedForm.get(param).invalid && (this.dateCompletedForm.get(param).dirty || this.dateCompletedForm.get(param).touched);      \n    }\n\n    /**\n     * Completes the Task(s).\n     */\n    complete() {\n        let properties: Partial = {\n            dateCompleted: this.dateCompletedForm.controls['dateCompleted'].value\n        }\n\n        if(this.tasks.length > 1) {\n            let ids: number[] = this.tasks.map((task: Task) => task.id);\n            const sub = this.taskService.completeAll(ids, properties).subscribe((tasks: Task[]) => {\n                this.notifyAndClose('Tasks Completed Successfully', tasks[0]);\n            });\n            this.sub.add(sub);\n        }\n        else {\n            const sub = this.taskService.complete(this.tasks[0], properties).subscribe((task: Task) => {\n                this.notifyAndClose('Task Completed Successfully', task);\n            });\n            this.sub.add(sub);\n        }\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.maxDateCompleted = moment().startOf('day').utc().toDate();\n        this.sub = new Subscription();\n        this.tasks = this.data.tasks;\n        if(this.tasks.length > 1) { \n            this.content = 'Enter the date the Tasks are completed. All Tasks will get the same date completed.';\n            this.hint = 'The date the tasks are completed';\n            this.title = 'Complete Tasks';\n        }\n        else {\n            this.content = 'Enter the date the Task is completed.';\n            this.hint = 'The date the task is completed';\n            this.title = 'Complete Task';\n        }\n\n        this.dateCompletedForm = this.formBuilder.group({\n            dateCompleted: [\n                {\n                    value: '',\n                    disabled: false\n                },\n                [Validators.required]\n            ]\n        });\n    }\n\n    /**\n     * Displays a snackBar with the given message, emits the given Task to this\n     * components parent, and closes this dialog.\n     * \n     * @param msg The message to display to the user.\n     */\n    private notifyAndClose(msg: string, task: Task): void {\n        this.logger.info(`CompleteTaskComponent: ${msg}`, task);\n        this.completeTask.emit(task);\n        this.dialogRef.close(msg);\n    }\n}\n\n    \n\n    \n        \n    {{title}}\n\n\n    {{content}}\n    \n        \n        \n            Date Completed\n            \n            \n            You must enter a date the task was completed\n            {{hint}}\n        \n        \n    \n\n\n    Cancel\n    \n        \n             \n            Complete\n        \n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{title}}    {{content}}                                Date Completed                                    You must enter a date the task was completed            {{hint}}                        Cancel                                     Complete            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CompleteTaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompleteTaskModule.html":{"url":"modules/CompleteTaskModule.html","title":"module - CompleteTaskModule","body":"\n                   \n\n\n\n\n  Modules\n  CompleteTaskModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CompleteTaskModule\n\n\n\ncluster_CompleteTaskModule_declarations\n\n\n\n\nCompleteTaskComponent\n\nCompleteTaskComponent\n\n\n\nCompleteTaskModule\n\nCompleteTaskModule\n\nCompleteTaskModule -->\n\nCompleteTaskComponent->CompleteTaskModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/dialogs/complete-task/complete-task.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to complete Tasks.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                CompleteTaskComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                CompleteTaskComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatDatepickerModule, MatDialogModule, MatFormFieldModule, MatInputModule, MatNativeDateModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckSquare } from '@fortawesome/free-regular-svg-icons';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faCheck, faCheckSquare);\n\n/* module */\nimport { CompleteTaskComponent } from '@tasks/dialogs/complete-task/complete-task.component';\n\n/**\n * Defines the components, services, and modules required to complete Tasks.\n */\n@NgModule({\n    declarations: [\n        CompleteTaskComponent,\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatButtonModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatNativeDateModule,\n        ReactiveFormsModule,\n        RouterModule,\n\n        FontAwesomeModule\n    ],\n    entryComponents: [\n        CompleteTaskComponent,\n    ]\n})\nexport class CompleteTaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CompleteTasksTableComponent.html":{"url":"components/CompleteTasksTableComponent.html","title":"component - CompleteTasksTableComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CompleteTasksTableComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/table/complete-tasks-table.component.ts\n\n\n    \n        Description\n    \n    \n        A wrapper for the TasksTableComponent which only displays complete Tasks.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                complete-tasks-table\n            \n\n            \n                styleUrls\n                complete-tasks-table.component.css\n            \n\n\n\n            \n                templateUrl\n                ./complete-tasks-table.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                completedTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            completedTasks\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        completedTasks:     TasksTableComponent\n\n                    \n                \n                    \n                        \n                            Type :     TasksTableComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/table/complete-tasks-table.component.ts:18\n                            \n                        \n\n                \n                    \n                        The table containing the complete Tasks. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild } from '@angular/core';\n\n/* app */\nimport { TasksTableComponent } from '@tasks/table/tasks-table.component';\n\n/**\n * A wrapper for the TasksTableComponent which only displays complete Tasks.\n */\n@Component({\n    selector: 'complete-tasks-table',\n    templateUrl: './complete-tasks-table.component.html',\n    styleUrls: ['./complete-tasks-table.component.css']\n})\nexport class CompleteTasksTableComponent {\n\n    /** The table containing the complete Tasks. */\n    @ViewChild('completedTasks') completedTasks: TasksTableComponent;\n}\n\n    \n\n    \n        \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CompleteTasksTableComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ConfirmDeleteTaskComponent.html":{"url":"components/ConfirmDeleteTaskComponent.html","title":"component - ConfirmDeleteTaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ConfirmDeleteTaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a confirmation dialog to delete a Task or list of Tasks.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                confirm-delete\n            \n\n            \n                styleUrls\n                confirm-delete-task.component.css\n            \n\n\n\n            \n                templateUrl\n                ./confirm-delete-task.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                deleteTask\n                            \n                            \n                                sub\n                            \n                            \n                                task\n                            \n                            \n                                tasks\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                delete\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.marker-confirm-delete-task-dialog\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any, dialogRef: MatDialogRef, logger: LoggerService, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.marker-confirm-delete-task-dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        class.marker-confirm-delete-task-dialog:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \ncancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:43\n                            \n                        \n\n\n                \n                    \n                            Cancel out of delete and close this dialog\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:50\n                            \n                        \n\n\n                \n                    \n                            Delete the task\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:77\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:84\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleteTask\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deleteTask:     \n\n                    \n                \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:29\n                            \n                        \n\n                \n                    \n                        The event emitter when the task is deleted. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:31\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            task\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        task:     Task\n\n                    \n                \n                    \n                        \n                            Type :     Task\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:23\n                            \n                        \n\n                \n                    \n                        The task to delete \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tasks:     Task[]\n\n                    \n                \n                    \n                        \n                            Type :     Task[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:25\n                            \n                        \n\n                \n                    \n                        The tasks to delete \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        text:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts:27\n                            \n                        \n\n                \n                    \n                        The confirmation text to display in the dialog. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, HostBinding, Inject, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { Subscription } from 'rxjs';\n\n/* app */\nimport { LoggerService } from 'app/core/services/logger.service';\nimport { Task } from '@tasks/shared/models/task.model';\nimport { TaskService } from '@tasks/shared/services/task.service';\n\n/**\n * Creates a confirmation dialog to delete a Task or list of Tasks.\n */\n@Component({\n    selector: 'confirm-delete',\n    templateUrl: './confirm-delete-task.component.html',\n    styleUrls: ['./confirm-delete-task.component.css']\n})\nexport class ConfirmDeleteTaskComponent implements OnDestroy, OnInit {\n\n    @HostBinding('class.marker-confirm-delete-task-dialog') classMarker : boolean = true;\n    /** The task to delete */\n    task: Task;\n    /** The tasks to delete */\n    tasks: Task[];\n    /** The confirmation text to display in the dialog. */\n    text: string;\n    /** The event emitter when the task is deleted. */\n    deleteTask = new EventEmitter();\n    /** The subscriptions for the component. */\n    sub: Subscription;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data:any,\n        private dialogRef: MatDialogRef,\n        private logger: LoggerService,\n        private taskService: TaskService\n    ) {}\n\n    /**\n     * Cancel out of delete and close this dialog\n     */\n    cancel() {\n        this.dialogRef.close();\n    }\n\n    /**\n     * Delete the task\n     */\n    delete() {\n        if(this.tasks.length > 1) {\n            // send individual requests to delete each Task since bulk delete\n            // is not available through the API.\n            this.tasks.forEach((task: Task, index:number) => {\n                const sub = this.taskService.delete(task).subscribe(() => {\n                    if(index == this.tasks.length - 1) {\n                        this.deleteTask.emit(true);   // emit the deleteTask event to the edit-task parent component \n                        this.dialogRef.close(); // and close the this dialog\n                    }\n                });\n                this.sub.add(sub);\n            });\n        }\n        else {\n            const sub = this.taskService.delete(this.tasks[0]).subscribe((task: Task) => {\n                this.logger.info('ConfirmDeleteTaskComponent: Task deleted successfully', task);\n                this.deleteTask.emit(true);   // emit the deleteTask event to the edit-task parent component \n                this.dialogRef.close(); // and close the this dialog\n            });\n            this.sub.add(sub);\n        }\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.sub = new Subscription();\n        this.tasks = this.data.tasks;\n        if(this.tasks.length > 1) {\n            this.text = `Are you sure you want to delete the selected ${this.tasks.length} tasks?`;\n        }\n        else {\n            this.text = 'Are you sure you want to delete the selected task?';\n        }\n    }\n}\n\n    \n\n    \n        \n    \n         \n        Delete Task\n    \n\n\n    {{text}}\n\n\n    Cancel\n    \n        \n             \n            Delete\n        \n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                     Delete Task        {{text}}    Cancel                                     Delete            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ConfirmDeleteTaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfirmDeleteTaskModule.html":{"url":"modules/ConfirmDeleteTaskModule.html","title":"module - ConfirmDeleteTaskModule","body":"\n                   \n\n\n\n\n  Modules\n  ConfirmDeleteTaskModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfirmDeleteTaskModule\n\n\n\ncluster_ConfirmDeleteTaskModule_declarations\n\n\n\n\nConfirmDeleteTaskComponent\n\nConfirmDeleteTaskComponent\n\n\n\nConfirmDeleteTaskModule\n\nConfirmDeleteTaskModule\n\nConfirmDeleteTaskModule -->\n\nConfirmDeleteTaskComponent->ConfirmDeleteTaskModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to delete Tasks.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                ConfirmDeleteTaskComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                ConfirmDeleteTaskComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faTrash);\n\n/* module */\nimport { ConfirmDeleteTaskComponent } from '@tasks/dialogs/confirm-delete-task/confirm-delete-task.component';\n\n/**\n * Defines the components, services, and modules required to delete Tasks.\n */\n@NgModule({\n    declarations: [\n        ConfirmDeleteTaskComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatButtonModule,\n        MatDialogModule,\n        ReactiveFormsModule,\n        RouterModule,\n\n        FontAwesomeModule\n    ],\n    entryComponents: [\n        ConfirmDeleteTaskComponent\n    ]\n})\nexport class ConfirmDeleteTaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsoleLoggerService.html":{"url":"injectables/ConsoleLoggerService.html","title":"injectable - ConsoleLoggerService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  ConsoleLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/console-logger.service.ts\n        \n\n            \n                Description\n            \n            \n                Performs basic logging functions. A getter method is defined for each of the \nproperties which uses the bind() method to create a bound function. The passed\nin function is executed in the given context when the associated property is \nlooked up (so we log the correct source file name and line number).\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                invokeConsoleMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            invokeConsoleMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \ninvokeConsoleMethod(type: string, args?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/console-logger.service.ts:58\n                            \n                        \n\n\n                \n                    \n                            Logs to the correct source file name and line number and passes along any\narguments.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The console type.\n\n                                                        \n                                                \n                                                \n                                                        args\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                Any optional args.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        info\n                    \n                \n\n                \n                    \n                        getinfo()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/console-logger.service.ts:21\n                                \n                            \n                    \n                        \n                                Creates bound function for log messages.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        warn\n                    \n                \n\n                \n                    \n                        getwarn()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/console-logger.service.ts:32\n                                \n                            \n                    \n                        \n                                Creates bound function for warn messages.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n\n                \n                    \n                        geterror()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/console-logger.service.ts:43\n                                \n                            \n                    \n                        \n                                Creates bound function for error messages.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, isDevMode } from '@angular/core';\n\n/* app */\nimport { Logger } from './logger.service';\n\nconst noop = (): any => undefined;\n\n/**\n * Performs basic logging functions. A getter method is defined for each of the \n * properties which uses the bind() method to create a bound function. The passed\n * in function is executed in the given context when the associated property is \n * looked up (so we log the correct source file name and line number).\n */\n@Injectable()\nexport class ConsoleLoggerService implements Logger {\n\n    /**\n     * Creates bound function for log messages.\n     */\n    get info() {\n        if(isDevMode) {\n            return console.info.bind(console);\n        } else {\n            return noop;\n        }\n    }\n\n    /**\n     * Creates bound function for warn messages.\n     */\n    get warn() {\n        if(isDevMode) {\n            return console.warn.bind(console);\n        } else {\n            return noop;\n        }\n    }\n\n    /**\n     * Creates bound function for error messages.\n     */\n    get error() {\n        if(isDevMode) {\n            return console.error.bind(console);\n        } else {\n            return noop;\n        }\n    }\n  \n    /**\n     * Logs to the correct source file name and line number and passes along any\n     * arguments.\n     * \n     * @param type The console type.\n     * @param args Any optional args.\n     */\n    invokeConsoleMethod(type: string, args?: any): void {\n        const logFn: Function = (console)[type] || console.log || noop;\n        logFn.apply(console, [args]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n  Modules\n  CoreModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/core.module.ts\n        \n\n\n            \n                Description\n            \n            \n                The CoreModule defines all the providers for the singleton services\nthat should be loaded when the app starts. This should only be imported\nat the root AppModule.\n\n            \n        \n\n        \n            \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatProgressSpinnerModule, MatSidenavModule } from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterModule } from '@angular/router';\n\n/* services */\nimport { ConsoleLoggerService } from './services/console-logger.service';\nimport { HttpService } from './services/http.service';\nimport { LoaderService } from './services/loader.service';\nimport { LoggerService } from './services/logger.service';\n\n/**\n * The CoreModule defines all the providers for the singleton services\n * that should be loaded when the app starts. This should only be imported\n * at the root AppModule.\n */\n@NgModule({\n    imports: [\n        /* angular libraries */\n        BrowserAnimationsModule,\n        CommonModule,\n        FlexLayoutModule,\n        HttpClientModule,\n        MatProgressSpinnerModule,\n        MatSidenavModule,\n        RouterModule\n    ],\n    exports: [\n        /* angular libraries */\n        BrowserAnimationsModule,\n        CommonModule,\n        FlexLayoutModule,\n        HttpClientModule,\n        RouterModule\n    ]\n})\nexport class CoreModule {\n    \n    constructor (@Optional() @SkipSelf() parentModule: CoreModule) {\n        // make sure CoreModule is imported only by one NgModule the AppModule\n        if(parentModule) {\n            throw new Error('CoreModule is already loaded. Import only in AppModule');\n        }\n    }\n\n    /**\n     * Returns a wrapper around this module that associates it with the\n     * TaskService and UtilsService providers so a single instance of each\n     * service can be loaded and shared between any modules in the app.\n     */\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: CoreModule,\n            providers: [\n                HttpService,\n                LoaderService,\n                { provide: LoggerService, useClass: ConsoleLoggerService }\n            ]\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreateTaskComponent.html":{"url":"components/CreateTaskComponent.html","title":"component - CreateTaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CreateTaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/dialogs/create-task/create-task.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a dialog to create a new Task. The dialog uses the TaskFormComponent\nand subscribes to it's formValid EventEmitter to enable and disable the \n\"create\" button.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                create-task\n            \n\n            \n                styleUrls\n                create-task.component.css\n            \n\n\n\n            \n                templateUrl\n                ./create-task.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                enableCreateButton\n                            \n                            \n                                    Private\n                                sub\n                            \n                            \n                                taskFormComponent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                create\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.marker-create-task-dialog\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialogRef: MatDialogRef, logger: LoggerService, taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.marker-create-task-dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        class.marker-create-task-dialog:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \ncancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:41\n                            \n                        \n\n\n                \n                    \n                            Cancels the Task creation and closes the dialog.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:48\n                            \n                        \n\n\n                \n                    \n                            Creates a new task.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:89\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:72\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enableCreateButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        enableCreateButton:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:26\n                            \n                        \n\n                \n                    \n                        Boolean to indicate whether or not to enable the create button (true to enable button). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:30\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taskFormComponent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        taskFormComponent:     TaskFormComponent\n\n                    \n                \n                    \n                        \n                            Type :     TaskFormComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/dialogs/create-task/create-task.component.ts:28\n                            \n                        \n\n                \n                    \n                        The form to create a Task. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, HostBinding, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\nimport { Subscription } from 'rxjs/Subscription';\n\n/* app */\nimport { LoggerService } from 'app/core/services/logger.service';\nimport { TaskFormComponent } from '@tasks/form/task-form.component';\nimport { Task } from '@tasks/shared/models/task.model';\nimport { TaskService } from '@tasks/shared/services/task.service';\n\n/**\n * Creates a dialog to create a new Task. The dialog uses the TaskFormComponent\n * and subscribes to it's formValid EventEmitter to enable and disable the \n * \"create\" button.\n */\n@Component({\n    selector: 'create-task',\n    templateUrl: './create-task.component.html',\n    styleUrls: ['./create-task.component.css']\n})\nexport class CreateTaskComponent implements OnInit, OnDestroy {\n    \n    @HostBinding('class.marker-create-task-dialog') classMarker : boolean = true;\n    /** Boolean to indicate whether or not to enable the create button (true to enable button). */\n    enableCreateButton: boolean = false;\n    /** The form to create a Task. */\n    @ViewChild(TaskFormComponent) taskFormComponent: TaskFormComponent;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(\n        private dialogRef: MatDialogRef,\n        private logger: LoggerService,\n        private taskService: TaskService\n    ) {}\n\n    /**\n     * Cancels the Task creation and closes the dialog.\n     */\n    cancel() {\n        this.dialogRef.close();\n    }\n\n    /**\n     * Creates a new task.\n     */\n    create() {\n        this.dialogRef.disableClose = true;\n\n        // create a Task based on the values from the TaskFormComponent\n        let task: Task = {\n            name: this.taskFormComponent.mainPropertiesForm.get('name').value,\n            priority: this.taskFormComponent.mainPropertiesForm.get('priority').value,\n            description: this.taskFormComponent.mainPropertiesForm.get('description').value,\n            dueDate: this.taskFormComponent.mainPropertiesForm.get('due').value,\n            isComplete: false,\n            repeats: this.taskFormComponent.repeatPropertiesForm.get('repeats').value,\n            endsAfter: this.taskFormComponent.repeatPropertiesForm.get('after').value\n        } as Task;\n\n        const sub = this.taskService.create(task).subscribe((task: Task) => {\n            this.logger.info('CreateTaskComponent: Task created successfully', task);\n            this.dialogRef.close(task);\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.sub = new Subscription();\n\n        const sub = this.taskFormComponent.formValid.subscribe((formValid) => {\n            if(formValid) {\n                this.enableCreateButton = true;\n            }\n            else {\n                this.enableCreateButton = false;\n            }\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n}\n\n    \n\n    \n        \n     Create Task\n\n\n    \n\n\n    Cancel\n    \n        \n            Create\n        \n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '     Create Task        Cancel                        Create            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreateTaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CreateTaskModule.html":{"url":"modules/CreateTaskModule.html","title":"module - CreateTaskModule","body":"\n                   \n\n\n\n\n  Modules\n  CreateTaskModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CreateTaskModule\n\n\n\ncluster_CreateTaskModule_declarations\n\n\n\ncluster_CreateTaskModule_imports\n\n\n\n\nCreateTaskComponent\n\nCreateTaskComponent\n\n\n\nCreateTaskModule\n\nCreateTaskModule\n\nCreateTaskModule -->\n\nCreateTaskComponent->CreateTaskModule\n\n\n\n\n\nTaskFormModule\n\nTaskFormModule\n\nCreateTaskModule -->\n\nTaskFormModule->CreateTaskModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/dialogs/create-task/create-task.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to manage and view\nTasks.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                CreateTaskComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                CreateTaskComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    TaskFormModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatDatepickerModule, MatDialogModule, MatFormFieldModule, MatInputModule, MatNativeDateModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPaste } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to fortawesome/fontawesome-svg-core library for convenient access in components\nlibrary.add(faPaste);\n\n/* app modules */\nimport { TaskFormModule } from '@tasks/form/task-form.module';\n\n/* Task shared components and services */\nimport { CreateTaskComponent } from '@tasks/dialogs/create-task/create-task.component';\n\n/**\n * Defines the components, services, and modules required to manage and view\n * Tasks.\n */\n@NgModule({\n    declarations: [\n        CreateTaskComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatButtonModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatNativeDateModule,\n        ReactiveFormsModule,\n        RouterModule,\n\n        FontAwesomeModule,\n\n        /* app modules */\n        TaskFormModule\n    ],\n    entryComponents: [\n        CreateTaskComponent\n    ]\n})\nexport class CreateTaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EditTaskComponent.html":{"url":"components/EditTaskComponent.html","title":"component - EditTaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  EditTaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/edit/edit-task.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the page to edit an existing Task. The page uses the TaskFormComponent \nand subscribes to it's formValid EventEmitter to enable and disable the \n\"update\" button.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                edit-task\n            \n\n            \n                styleUrls\n                edit-task.component.css\n            \n\n\n\n            \n                templateUrl\n                ./edit-task.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonBar\n                            \n                            \n                                enableUpdateButton\n                            \n                            \n                                hideCompleteButton\n                            \n                            \n                                icon\n                            \n                            \n                                iconClass\n                            \n                            \n                                index\n                            \n                            \n                                onUpdate\n                            \n                            \n                                prefix\n                            \n                            \n                                    Private\n                                sub\n                            \n                            \n                                task\n                            \n                            \n                                taskFormComponent\n                            \n                            \n                                tasks\n                            \n                            \n                                tooltip\n                            \n                            \n                                updateAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                initIconClass\n                            \n                            \n                                initPaginator\n                            \n                            \n                                loadTask\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openRecurringTaskDialog\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.marker-edit-task-dialog\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, dialog: MatDialog, location: Location, logger: LoggerService, route: ActivatedRoute, router: Router, snackBar: MatSnackBar, taskService: TaskService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/edit/edit-task.component.ts:61\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        snackBar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                    UtilsService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.marker-edit-task-dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        class.marker-edit-task-dialog:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:33\n                            \n                        \n\n\n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \ncancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:78\n                            \n                        \n\n\n                \n                    \n                            Cancels the Task edit and goes back to the previous page.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initIconClass\n                            \n                            \n                        \n                    \n                \n                \n                    \ninitIconClass()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:218\n                            \n                        \n\n\n                \n                    \n                            Initializes the icon and corresponding class for the icon based on the\nproperties of the Task being modified. Color classes are added to the \nicon using the iconClass string property for Tasks that are over due, \ndue today, or due tomorrow.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initPaginator\n                            \n                            \n                        \n                    \n                \n                \n                    \ninitPaginator()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:88\n                            \n                        \n\n\n                \n                    \n                            Initializes the paginator at the top of the page. The paginator pages\nthrough Tasks that are either pending or complete (based on the Task\nbeing modified). Tasks are sorted by due date in ascending order for\nthe purposes of this paginator.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loadTask\n                            \n                            \n                        \n                    \n                \n                \n                    \nloadTask(id: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:122\n                            \n                        \n\n\n                \n                    \n                            Load the Task with the given id.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The id of the Task to load. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:179\n                            \n                        \n\n\n                \n                    \n                            Clean the component \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:152\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openRecurringTaskDialog\n                            \n                            \n                        \n                    \n                \n                \n                    \nopenRecurringTaskDialog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:188\n                            \n                        \n\n\n                \n                    \n                            Opens the dialog to confirm whether to modify a single Task or the\ngiven Task and all remaining Tasks in it's sequence (if the Task is\na repeating Task).\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:258\n                            \n                        \n\n\n                \n                    \n                            Updates the Task passed into the component.  \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            buttonBar\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        buttonBar:     ButtonBarComponent\n\n                    \n                \n                    \n                        \n                            Type :     ButtonBarComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:37\n                            \n                        \n\n                \n                    \n                        The buttonBar component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enableUpdateButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        enableUpdateButton:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:35\n                            \n                        \n\n                \n                    \n                        Boolean to indicate whether or not to enable the update button (true to enable button). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hideCompleteButton\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        hideCompleteButton:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:41\n                            \n                        \n\n                \n                    \n                        Boolean to inidicate whether to display or hide the complete button. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            icon\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        icon:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:43\n                            \n                        \n\n                \n                    \n                        The icon to display in the header. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            iconClass\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        iconClass:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:45\n                            \n                        \n\n                \n                    \n                        The class to add to the icon in the header of the component (if over due, due today, or tomorrow). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            index\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        index:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:47\n                            \n                        \n\n                \n                    \n                        The index of the Task being editted in the list of tasks. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onUpdate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUpdate:     \n\n                    \n                \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:59\n                            \n                        \n\n                \n                    \n                        Event emitted when Task is updated. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            prefix\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        prefix:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:49\n                            \n                        \n\n                \n                    \n                        The prefix for the icon to display (\"far\" or \"fas\"). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:61\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            task\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        task:     Task\n\n                    \n                \n                    \n                        \n                            Type :     Task\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:51\n                            \n                        \n\n                \n                    \n                        The Task to edit. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taskFormComponent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        taskFormComponent:     TaskFormComponent\n\n                    \n                \n                    \n                        \n                            Type :     TaskFormComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:39\n                            \n                        \n\n                \n                    \n                        The form to edit a Task. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tasks:     Task[]\n\n                    \n                \n                    \n                        \n                            Type :     Task[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:53\n                            \n                        \n\n                \n                    \n                        The list of Tasks the Task being editted belongs to (pending or complete). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltip\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tooltip:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:55\n                            \n                        \n\n                \n                    \n                        The tooltip to display with the icon in the header of the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateAll\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        updateAll:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/edit-task.component.ts:57\n                            \n                        \n\n                \n                    \n                        Boolean to indicate whether or not update this and all remaining Tasks in a sequence (if applicable).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import * as moment from 'moment';\n\n/* angular libraries */\nimport { Location } from '@angular/common';\nimport { Component, EventEmitter, HostBinding, OnInit, OnDestroy, ViewChild, ChangeDetectorRef } from '@angular/core';\nimport { MatDialog, MatDialogConfig, MatSnackBar } from '@angular/material';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/* app */\nimport { LoggerService } from 'app/core/services/logger.service';\nimport { ButtonBarComponent } from '@tasks/button-bar/button-bar.component';\nimport { TaskFormComponent } from '@tasks/form/task-form.component';\nimport { Task } from '@tasks/shared/models/task.model';\nimport { TaskService } from '@tasks/shared/services/task.service';\nimport { UtilsService } from '@tasks/shared/services/utils.service';\nimport { RecurringTaskComponent } from './recurring-task.component';\n\n/**\n * Creates the page to edit an existing Task. The page uses the TaskFormComponent \n * and subscribes to it's formValid EventEmitter to enable and disable the \n * \"update\" button.\n */\n@Component({\n    selector: 'edit-task',\n    templateUrl: './edit-task.component.html',\n    styleUrls: ['./edit-task.component.css']\n})\nexport class EditTaskComponent implements OnInit, OnDestroy {\n    \n    @HostBinding('class.marker-edit-task-dialog') classMarker : boolean = true;\n    /** Boolean to indicate whether or not to enable the update button (true to enable button). */\n    enableUpdateButton: boolean = true;\n    /** The buttonBar component. */\n    @ViewChild(ButtonBarComponent) buttonBar: ButtonBarComponent;\n    /** The form to edit a Task. */\n    @ViewChild(TaskFormComponent) taskFormComponent: TaskFormComponent;\n    /** Boolean to inidicate whether to display or hide the complete button. */\n    hideCompleteButton: boolean;\n    /** The icon to display in the header. */\n    icon: string;\n    /** The class to add to the icon in the header of the component (if over due, due today, or tomorrow). */\n    iconClass: string;\n    /** The index of the Task being editted in the list of tasks. */\n    index: number;\n    /** The prefix for the icon to display (\"far\" or \"fas\"). */\n    prefix: string;\n    /** The Task to edit. */\n    task: Task;\n    /** The list of Tasks the Task being editted belongs to (pending or complete). */\n    tasks: Task[];\n    /** The tooltip to display with the icon in the header of the component. */\n    tooltip: string;\n    /** Boolean to indicate whether or not update this and all remaining Tasks in a sequence (if applicable).*/\n    updateAll: boolean = false;\n    /** Event emitted when Task is updated. */\n    onUpdate = new EventEmitter();\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(\n        private changeDetector: ChangeDetectorRef,\n        private dialog: MatDialog,\n        private location: Location,\n        private logger: LoggerService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private snackBar: MatSnackBar,\n        private taskService: TaskService,\n        private utilsService: UtilsService\n    ) {}\n\n    /**\n     * Cancels the Task edit and goes back to the previous page.\n     */\n    cancel() {\n        this.location.back();\n    }\n\n    /**\n     * Initializes the paginator at the top of the page. The paginator pages\n     * through Tasks that are either pending or complete (based on the Task\n     * being modified). Tasks are sorted by due date in ascending order for\n     * the purposes of this paginator.\n     */\n    initPaginator() {\n        let obs: Observable;\n        // determine which observable to use from the TaskService based on\n        // whether the Task being modified is complete or not\n        if(this.task.isComplete) {\n            obs = this.taskService.completeTasks;\n        }\n        else {\n            obs = this.taskService.pendingTasks;\n        }\n\n        // subscribe to the observable\n        const sub = obs.subscribe((tasks: Task[]) => {\n            // the list of Tasks (pending or complete)\n            this.tasks = tasks;\n            this.changeDetector.detectChanges();\n\n            // find the index of the Task being modified in the list of Tasks found above\n            this.buttonBar.paginator.pageIndex = this.tasks.findIndex((task: Task) => { return task.id == this.task.id });\n            // subscribe to the paginator page changes\n            const page = this.buttonBar.paginator.page.pipe(\n                tap(() => {\n                    this.loadTask(this.tasks[this.buttonBar.paginator.pageIndex].id);\n                })).subscribe();\n            this.sub.add(page);\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Load the Task with the given id.\n     * \n     * @param id The id of the Task to load. \n     */\n    loadTask(id: number) {\n        const taskSub = this.taskService.get(id).subscribe((task: Task) => {\n            this.task = task;\n            this.hideCompleteButton = task.isComplete;\n            this.initIconClass();\n\n            // initialize the paginator if the Tasks array is null\n            if(this.tasks == null) {\n                this.initPaginator();\n            }\n            \n            // open dialog to modify just single task or all remaining tasks if task is not complete and\n            // it is repeating Task\n            if(!task.isComplete && task.repeats != null && task.repeats !== 'noRepeat') {\n                this.openRecurringTaskDialog();\n            }\n            else {\n                this.changeDetector.detectChanges();\n                const subForm = this.taskFormComponent.formValid.subscribe((enable: boolean) => {\n                    this.enableUpdateButton = enable;\n                });\n                this.sub.add(subForm);\n            }\n        });\n        this.sub.add(taskSub);\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.sub = new Subscription();\n        const sub = this.taskService.changes.subscribe((changes: string) => {\n            if(changes) {\n                this.snackBar.open(changes, '', { duration: 2000 });\n            }\n        });\n        this.sub.add(sub);\n\n        const paramsSub = this.sub = this.route.params.subscribe(params => {\n            let id: number = Number(params['id']);\n            if(isNaN(id)) {\n                // redirect to 404 since id and ** don't seem to work well\n                // together in router module; any value treated as id even if\n                // not a number so need to handle error here if id is not number\n                this.router.navigate(['/404']);\n            }\n            else {\n                this.loadTask(id);\n            }\n        });\n        this.sub.add(paramsSub);\n    }\n\n    /**\n     * Clean the component \n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Opens the dialog to confirm whether to modify a single Task or the\n     * given Task and all remaining Tasks in it's sequence (if the Task is\n     * a repeating Task).\n     */\n    openRecurringTaskDialog() {\n        let dialogConfig = new MatDialogConfig();\n        dialogConfig.autoFocus = false;\n        dialogConfig.data = { task: this.task };\n        dialogConfig.width = '50%';\n        let recurringDialogRef = this.dialog.open(RecurringTaskComponent, dialogConfig);\n        this.utilsService.fullScreenDialogSub(recurringDialogRef, '50%');\n\n        let sub = recurringDialogRef.componentInstance.updateAll.subscribe((updateAll: boolean) => {\n            this.updateAll = updateAll;\n            if(!this.updateAll) {\n                this.taskFormComponent.repeatPropertiesForm.disable();\n            }\n\n            this.changeDetector.detectChanges();\n\n            const subForm = this.taskFormComponent.formValid.subscribe((enable: boolean) => {\n                this.enableUpdateButton = enable;\n            });\n            this.sub.add(subForm);\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Initializes the icon and corresponding class for the icon based on the\n     * properties of the Task being modified. Color classes are added to the \n     * icon using the iconClass string property for Tasks that are over due, \n     * due today, or due tomorrow.\n     */\n    initIconClass() {\n        this.iconClass = 'mat-icon-button notice';\n        if(!this.task.isComplete) {\n            let dueDate = moment(this.task.dueDate).utc();\n            let today = moment().startOf('day').utc();\n            let tomorrow = moment().startOf('day').add(1, 'days').utc();\n\n            if(dueDate.isBefore(today, 'day')) {\n                this.prefix = 'fas';\n                this.icon = 'hourglass-end';\n                this.tooltip = 'Over Due'\n                this.iconClass += ' red';\n            }\n            else if(dueDate.isSame(today, 'day')) {\n                this.prefix = 'fas';\n                this.icon = 'hourglass-half';\n                this.tooltip = 'Due Today'\n                this.iconClass += ' orange';\n            }\n            else if(dueDate.isSame(tomorrow, 'day')) {\n                this.prefix = 'fas';\n                this.icon = 'hourglass-start';\n                this.tooltip = 'Due Tomorrow'\n                this.iconClass += ' yellow';\n            }\n            else {\n                this.prefix = 'far';\n                this.icon = 'hourglass';\n                this.tooltip = `Due ${dueDate.format('MM/DD/YYYY')}`;\n            }\n        }\n        else {\n            this.icon = 'clipboard-check';\n            this.tooltip = 'Complete';\n        }\n    }\n\n    /**\n     * Updates the Task passed into the component.  \n     */\n    update() {\n        const sub = this.taskFormComponent.getFormData(this.taskFormComponent.mainPropertiesForm).switchMap(formData => {\n            this.task.name = formData.value.name;\n            this.task.priority = formData.value.priority;\n            this.task.description = formData.value.description;\n\n            // Only update the dueDate if the task is not complete\n            if(!this.task.isComplete) {\n                this.task.dueDate = formData.value.due;\n                return this.taskFormComponent.getFormData(this.taskFormComponent.repeatPropertiesForm).switchMap(repeatFormData => {\n                    this.task.repeats = repeatFormData.value.repeats;\n                    this.task.endsAfter = repeatFormData.value.after;\n                    return this.taskService.update(this.task, this.updateAll);\n                });\n            }\n            else {\n                return this.taskService.update(this.task, this.updateAll);\n            }\n        }).subscribe((task: Task) => {\n            this.logger.info('EditTaskComponent: Task updated successfully', task);\n            this.onUpdate.emit('Task Updated Successfully');\n            this.location.back();\n        });\n        this.sub.add(sub);\n    }\n}\n\n    \n\n    \n        \n\n    \n        {{task.name}}\n        \n             \n        \n    \n    \n    \n        Cancel\n        \n            \n                 \n                Update\n            \n        \n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{task.name}}                                                 Cancel                                                     Update                        '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EditTaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EditTaskModule.html":{"url":"modules/EditTaskModule.html","title":"module - EditTaskModule","body":"\n                   \n\n\n\n\n  Modules\n  EditTaskModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EditTaskModule\n\n\n\ncluster_EditTaskModule_declarations\n\n\n\ncluster_EditTaskModule_imports\n\n\n\ncluster_EditTaskModule_providers\n\n\n\n\nEditTaskComponent\n\nEditTaskComponent\n\n\n\nEditTaskModule\n\nEditTaskModule\n\nEditTaskModule -->\n\nEditTaskComponent->EditTaskModule\n\n\n\n\n\nRecurringTaskComponent\n\nRecurringTaskComponent\n\nEditTaskModule -->\n\nRecurringTaskComponent->EditTaskModule\n\n\n\n\n\nTaskFormModule\n\nTaskFormModule\n\nEditTaskModule -->\n\nTaskFormModule->EditTaskModule\n\n\n\n\n\nTasksButtonBarModule\n\nTasksButtonBarModule\n\nEditTaskModule -->\n\nTasksButtonBarModule->EditTaskModule\n\n\n\n\n\nTasksDialogModule\n\nTasksDialogModule\n\nEditTaskModule -->\n\nTasksDialogModule->EditTaskModule\n\n\n\n\n\nMatPaginatorCustom\n\nMatPaginatorCustom\n\nEditTaskModule -->\n\nMatPaginatorCustom->EditTaskModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/edit/edit-task.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to edit a Task.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                EditTaskComponent\n                            \n                            \n                                RecurringTaskComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                EditTaskComponent\n                            \n                            \n                                RecurringTaskComponent\n                            \n                    \n                \n                \n                    Providers\n                    \n                            \n                                     MatPaginatorCustom\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    TaskFormModule\n                            \n                            \n                                    TasksButtonBarModule\n                            \n                            \n                                    TasksDialogModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatDatepickerModule, MatDialogModule, MatFormFieldModule, MatInputModule, MatNativeDateModule, MatPaginatorIntl, MatPaginatorModule, MatRadioModule, MatTooltipModule, MatSnackBarModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckSquare } from '@fortawesome/free-regular-svg-icons';\nimport { faCheck, faEdit, faPaste, faTrash } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faCheck, faCheckSquare, faEdit, faPaste, faTrash);\n\n/* app */\nimport { EditTaskComponent } from './edit-task.component';\nimport { RecurringTaskComponent } from './recurring-task.component';\nimport { TasksButtonBarModule } from '@tasks/button-bar/tasks-button-bar.module';\nimport { TasksDialogModule } from '@tasks/dialogs/tasks-dialog.module';\nimport { TaskFormModule } from '@tasks/form/task-form.module';\nimport { MatPaginatorCustom } from '@tasks/shared/util/mat-paginator-custom';\n\n/**\n * Defines the components, services, and modules required to edit a Task.\n */\n@NgModule({\n    declarations: [\n        EditTaskComponent,\n        RecurringTaskComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatButtonModule, \n        MatDatepickerModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatNativeDateModule,\n        MatPaginatorModule, \n        MatRadioModule,\n        MatTooltipModule, \n        MatSnackBarModule,\n        ReactiveFormsModule,\n        RouterModule,\n\n        FontAwesomeModule,\n\n        /* Task modules */\n        TasksButtonBarModule,\n        TasksDialogModule,\n        TaskFormModule\n    ],\n    entryComponents: [\n        EditTaskComponent,\n        RecurringTaskComponent\n    ],\n    providers: [\n        MatPaginatorCustom,\n        { provide: MatPaginatorIntl, useClass: MatPaginatorCustom }\n    ]\n})\nexport class EditTaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FooterComponent.html":{"url":"components/FooterComponent.html","title":"component - FooterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  FooterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/footer/footer.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the footer component for the app.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-footer\n            \n\n            \n                styleUrls\n                footer.component.css\n            \n\n\n\n            \n                templateUrl\n                ./footer.component.html\n            \n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * Creates the footer component for the app.\n */\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent {}\n\n    \n\n    \n        \n    \n        About\n        © 2018\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            About        © 2018    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FooterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FooterModule.html":{"url":"modules/FooterModule.html","title":"module - FooterModule","body":"\n                   \n\n\n\n\n  Modules\n  FooterModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FooterModule\n\n\n\ncluster_FooterModule_declarations\n\n\n\ncluster_FooterModule_exports\n\n\n\n\nFooterComponent\n\nFooterComponent\n\n\n\nFooterModule\n\nFooterModule\n\nFooterModule -->\n\nFooterComponent->FooterModule\n\n\n\n\n\nFooterComponent \n\nFooterComponent \n\nFooterComponent  -->\n\nFooterModule->FooterComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/footer/footer.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components and modules for the footer.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                FooterComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                FooterComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    FooterComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { RouterModule } from '@angular/router';\n\n/* module */\nimport { FooterComponent } from './footer.component';\n\n/**\n * Defines the components and modules for the footer.\n */\n@NgModule({\n    declarations: [\n        FooterComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        RouterModule\n    ],\n    exports: [\n        FooterComponent\n    ],\n    entryComponents: [\n        FooterComponent\n    ]\n})\nexport class FooterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/header/header.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the main header element for the app. The header is responsive based on the size of the screen. If\nthe screen is large, then the dueButtons and taskFilter components are rendered directly in the header on\nthe right side of the screen for easy access. If the screen is medium or smaller, then the right side of\nthe header collapses into a single \"search\" icon button, which when clicked displays the taskFilter\ncomponent.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                styleUrls\n                header.component.css\n            \n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMediumScreen\n                            \n                            \n                                showSearchBar\n                            \n                            \n                                sidenavMenuState\n                            \n                            \n                                sub\n                            \n                            \n                                taskFilter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSidenavMenuToggle\n                            \n                            \n                                setShowSearchBar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/header/header.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                    UtilsService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/header/header.component.ts:39\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/header/header.component.ts:47\n                            \n                        \n\n\n                \n                    \n                            Initialize the component. The search bar should be hidden initially, and the sidenav menu should be set\nto 'Collapse' on medium or smaller devices and 'Expand' on larger devices.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            onSidenavMenuToggle\n                            \n                            \n                        \n                    \n                \n                \n                    \nonSidenavMenuToggle()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/header/header.component.ts:63\n                            \n                        \n\n\n                \n                    \n                            Expands and collapses the sidenav menu based on the current state of the sidenav menu. If the sidenav\nmenu is collapsed, then it is expanded. Otherwise the sidenav menu is collapsed.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setShowSearchBar\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetShowSearchBar(showSearchBar: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/header/header.component.ts:79\n                            \n                        \n\n\n                \n                    \n                            Displays or hides the search bar based on the boolean parameter passed in.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        showSearchBar\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                true if the search bar should be displayed, otherwise false. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMediumScreen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isMediumScreen:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/header/header.component.ts:26\n                            \n                        \n\n                \n                    \n                        Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            showSearchBar\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        showSearchBar:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/header/header.component.ts:28\n                            \n                        \n\n                \n                    \n                        Boolean to indicate whether or not to show the search bar (shows search bar if true). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sidenavMenuState\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sidenavMenuState:     SidenavMenuEvent\n\n                    \n                \n                    \n                        \n                            Type :     SidenavMenuEvent\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/header/header.component.ts:30\n                            \n                        \n\n                \n                    \n                        The current state of the sidenav ('Collapse' or 'Expand'). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/header/header.component.ts:32\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taskFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        taskFilter:     TasksFilterComponent\n\n                    \n                \n                    \n                        \n                            Type :     TasksFilterComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/header/header.component.ts:24\n                            \n                        \n\n                \n                    \n                        Reference to the TaskFilterComponent in the templateUrl. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\n/* app */\nimport { TasksFilterComponent } from '@tasks/filter/tasks-filter.component';\nimport { SidenavMenuEvent, UtilsService } from '@tasks/shared/services/utils.service';\n\n/**\n * Creates the main header element for the app. The header is responsive based on the size of the screen. If\n * the screen is large, then the dueButtons and taskFilter components are rendered directly in the header on\n * the right side of the screen for easy access. If the screen is medium or smaller, then the right side of\n * the header collapses into a single \"search\" icon button, which when clicked displays the taskFilter\n * component.\n */\n@Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n\n    /** Reference to the TaskFilterComponent in the templateUrl. */\n    @ViewChild('taskFilterLargeScreen') taskFilter: TasksFilterComponent;\n    /** Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). */\n    isMediumScreen: boolean;\n    /** Boolean to indicate whether or not to show the search bar (shows search bar if true). */\n    showSearchBar: boolean;\n    /** The current state of the sidenav ('Collapse' or 'Expand'). */\n    sidenavMenuState: SidenavMenuEvent;\n    /** The subscriptions for the component. */\n    sub: Subscription;\n\n    constructor(private utilsService: UtilsService) {}\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component. The search bar should be hidden initially, and the sidenav menu should be set\n     * to 'Collapse' on medium or smaller devices and 'Expand' on larger devices.\n     */\n    ngOnInit() {\n        this.showSearchBar = false;\n\n        this.sub = new Subscription();\n        const sub = this.utilsService.isMediumScreen.subscribe((isMediumScreen: boolean) => {\n            this.isMediumScreen = isMediumScreen;\n            // set to 'Collapse' on medium or smaller devices, otherwise to 'Expand'\n            this.sidenavMenuState = this.isMediumScreen ? 'Collapse' : 'Expand';\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Expands and collapses the sidenav menu based on the current state of the sidenav menu. If the sidenav\n     * menu is collapsed, then it is expanded. Otherwise the sidenav menu is collapsed.\n     */\n    onSidenavMenuToggle() {\n        if(this.sidenavMenuState === 'Collapse') {\n            this.sidenavMenuState = 'Expand';\n            this.utilsService.toggleSidenavMenu('Expand');\n        }\n        else {\n            this.sidenavMenuState = 'Collapse';\n            this.utilsService.toggleSidenavMenu('Collapse');\n        }\n    }\n\n    /**\n     * Displays or hides the search bar based on the boolean parameter passed in.\n     * \n     * @param showSearchBar true if the search bar should be displayed, otherwise false. \n     */\n    setShowSearchBar(showSearchBar: boolean) {\n        this.showSearchBar = showSearchBar;\n    }\n}\n\n    \n\n    \n        \n    \n        \n        \n            \n            \n            \n        \n    \n    \n        \n            \n                \n                \n                \n            \n            \n                \n                    \n                    MyTasks\n                \n                \n                \n            \n            \n            \n\n            \n            \n                \n                    \n                \n                \n                \n            \n        \n        \n            \n                \n                    \n                    \n                    \n                \n                \n                    \n                        \n                        MyTasks\n                    \n                    \n                    \n                \n                \n                \n                \n            \n        \n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                            MyTasks                                                                                                                                                                                                                                                                                                                                                                                                                        MyTasks                                                                                                                                                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HeaderModule.html":{"url":"modules/HeaderModule.html","title":"module - HeaderModule","body":"\n                   \n\n\n\n\n  Modules\n  HeaderModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HeaderModule\n\n\n\ncluster_HeaderModule_declarations\n\n\n\ncluster_HeaderModule_imports\n\n\n\ncluster_HeaderModule_exports\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\n\n\nHeaderModule\n\nHeaderModule\n\nHeaderModule -->\n\nHeaderComponent->HeaderModule\n\n\n\n\n\nHeaderComponent \n\nHeaderComponent \n\nHeaderComponent  -->\n\nHeaderModule->HeaderComponent \n\n\n\n\n\nTasksFilterModule\n\nTasksFilterModule\n\nHeaderModule -->\n\nTasksFilterModule->HeaderModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/header/header.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required for the header.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                HeaderComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                HeaderComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    TasksFilterModule\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    HeaderComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule, MatToolbarModule, MatTooltipModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faBars, faClipboardList } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faBars, faClipboardList);\n\n/* module */\nimport { HeaderComponent } from './header.component';\nimport { TasksFilterModule } from '@tasks/filter/tasks-filter.module';\n\n/**\n * Defines the components, services, and modules required for the header.\n */\n@NgModule({\n    declarations: [\n        HeaderComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        MatButtonModule, \n        MatToolbarModule, \n        MatTooltipModule,\n        RouterModule,\n\n        FontAwesomeModule,\n\n        /* app modules */\n        TasksFilterModule\n    ],\n    exports: [\n        HeaderComponent\n    ],\n    entryComponents: [\n        HeaderComponent\n    ]\n})\nexport class HeaderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpService.html":{"url":"injectables/HttpService.html","title":"injectable - HttpService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  HttpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/http.service.ts\n        \n\n            \n                Description\n            \n            \n                Performs HTTP requests. This service is based on service from \nhttps://medium.com/beautiful-angular/angular-2-and-jwt-authentication-d30c21a2f24f\nIt is meant to perform actions like inserting custom headers requried \nin all requests. Currently this only adds simple \"Content-Type\" header, \nbut could easily be extended to add other headers (like JWT Token). It\nalso makes triggering things like loading indicator for all HTTP \nrequests easy.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                getRequestOptionArgs\n                            \n                            \n                                    Private\n                                hideLoader\n                            \n                            \n                                    Private\n                                intercept\n                            \n                            \n                                patch\n                            \n                            \n                                post\n                            \n                            \n                                    Private\n                                showLoader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, loaderService: LoaderService, logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/http.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        loaderService\n                                                  \n                                                        \n                                                                    LoaderService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            delete\n                            \n                            \n                        \n                    \n                \n                \n                    \ndelete(url: string, options?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:73\n                            \n                        \n\n\n                \n                    \n                            Performs an HTTP DELETE request.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The URL to perform the DELETE request on. \n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                The options to include with the request.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \nget(url: string, options?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:39\n                            \n                        \n\n\n                \n                    \n                            Performs an HTTP GET request.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The URL to perform the GET request on. \n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                The options to include with the request.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            getRequestOptionArgs\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getRequestOptionArgs(options?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:83\n                            \n                        \n\n\n                \n                    \n                            Returns request option arguments that can be included in a request.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                The options to include in the request.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            hideLoader\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hideLoader()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:114\n                            \n                        \n\n\n                \n                    \n                            Hide the loader.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            intercept\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercept(observable: Observable)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:95\n                            \n                        \n\n\n                \n                    \n                            Intercepts the given Observable and performs any custom actions before\nand after the Observable completes (like showing and hiding the loader).\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        observable\n                                                        \n                                                                    Observable\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The Observable to intercept. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            patch\n                            \n                            \n                        \n                    \n                \n                \n                    \npatch(url: string, body: any, options?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:62\n                            \n                        \n\n\n                \n                    \n                            Performs an HTTP PATCH request.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The URL to perform the PATCH request on.\n\n                                                        \n                                                \n                                                \n                                                        body\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The body of the request.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                The options to include with the request.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            post\n                            \n                            \n                        \n                    \n                \n                \n                    \npost(url: string, body: any, options?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:50\n                            \n                        \n\n\n                \n                    \n                            Performs an HTTP POST request.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The URL to perform the POST request on. \n\n                                                        \n                                                \n                                                \n                                                        body\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The body of the request.\n\n                                                        \n                                                \n                                                \n                                                        options\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                The options to include with the request.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            showLoader\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        showLoader()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:107\n                            \n                        \n\n\n                \n                    \n                            Display the loader.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            url\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        url:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'http://localhost:3000/api'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/http.service.ts:25\n                            \n                        \n\n                \n                    \n                        The base URL for the API. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/finally';\n\n/* app */\nimport { LoaderService } from './loader.service';\nimport { LoggerService } from './logger.service';\n\n/**\n * Performs HTTP requests. This service is based on service from \n * https://medium.com/beautiful-angular/angular-2-and-jwt-authentication-d30c21a2f24f\n * It is meant to perform actions like inserting custom headers requried \n * in all requests. Currently this only adds simple \"Content-Type\" header, \n * but could easily be extended to add other headers (like JWT Token). It\n * also makes triggering things like loading indicator for all HTTP \n * requests easy.\n */\n@Injectable()\nexport class HttpService {\n\n    /** The base URL for the API. */\n    private url: string = 'http://localhost:3000/api';\n\n    constructor(\n        private http:HttpClient, \n        private loaderService:LoaderService,\n        private logger: LoggerService\n    ) {}\n \n    /**\n     * Performs an HTTP GET request.\n     * \n     * @param url The URL to perform the GET request on. \n     * @param options The options to include with the request.\n     */\n    get(url: string, options?: any): Observable {\n        return this.intercept(this.http.get(`${this.url}/${url}`, this.getRequestOptionArgs(options)));\n    }\n \n    /**\n     * Performs an HTTP POST request.\n     * \n     * @param url The URL to perform the POST request on. \n     * @param body The body of the request.\n     * @param options The options to include with the request.\n     */\n    post(url: string, body: any, options?: any): Observable { \n        this.logger.info(`HttpService: POST ${this.url}/${url}`, body);\n        return this.intercept(this.http.post(`${this.url}/${url}`, body, this.getRequestOptionArgs(options)));\n    }\n \n    /**\n     * Performs an HTTP PATCH request.\n     * \n     * @param url The URL to perform the PATCH request on.\n     * @param body The body of the request.\n     * @param options The options to include with the request.\n     */\n    patch(url: string, body: any, options?: any): Observable {\n        this.logger.info(`HttpService: PATCH ${this.url}/${url}`, body);   \n        return this.intercept(this.http.patch(`${this.url}/${url}`, body, this.getRequestOptionArgs(options)));\n    }\n \n    /**\n     * Performs an HTTP DELETE request.\n     * \n     * @param url The URL to perform the DELETE request on. \n     * @param options The options to include with the request.\n     */\n    delete(url: string, options?: any): Observable {\n        this.logger.info(`HttpService: DELETE ${this.url}/${url}`);\n        return this.intercept(this.http.delete(`${this.url}/${url}`, this.getRequestOptionArgs(options)));\n    }\n    \n    /**\n     * Returns request option arguments that can be included in a request.\n     * \n     * @param options The options to include in the request.\n     */\n    private getRequestOptionArgs(options?: any) : any {\n        options = options || {}; // define the options if none included\n        options.headers = options.headers || new HttpHeaders({ 'Content-Type': 'application/json' });\n        return options;\n    }\n \n    /**\n     * Intercepts the given Observable and performs any custom actions before\n     * and after the Observable completes (like showing and hiding the loader).\n     * \n     * @param observable The Observable to intercept. \n     */\n    private intercept(observable: Observable): Observable {\n        this.showLoader();\n        return observable.catch((err, source) => {\n            return Observable.throw(err);\n        }).finally(() => {\n            this.hideLoader();\n        });\n    }\n\n    /**\n     * Display the loader.\n     */\n    private showLoader(): void {\n        this.loaderService.show();\n    }\n\n    /**\n     * Hide the loader.\n     */\n    private hideLoader(): void {\n        this.loaderService.hide();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ListItemComponent.html":{"url":"components/ListItemComponent.html","title":"component - ListItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ListItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/sidenav/list-item.component.ts\n\n\n    \n        Description\n    \n    \n        Creates 3 buttons meant for filtering Tasks \"Over Due\", \"Due Today\", and \"Due Tomorrow\". Allows \nfor the buttons to be styled in multiple ways so the buttons can be re-used on the header toolbar \nfor large screens as \"mat-button\" elements and in the task filter as \"mat-menu-item\" elements in \nthe dropdown menu.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                list-item\n            \n\n            \n                styleUrls\n                list-item.component.css\n            \n\n\n\n            \n                templateUrl\n                ./list-item.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filter\n                            \n                            \n                                numTasksDue\n                            \n                            \n                                params\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                buttonClass\n                            \n                            \n                                expand\n                            \n                            \n                                icon\n                            \n                            \n                                tasksDue\n                            \n                            \n                                text\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/sidenav/list-item.component.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        buttonClass\n                    \n                    \n                        The CSS class to apply to the buttons (only \"mat-button\" or \"mat-menu-item\" currently, but could use others). \n\n                            \n                            Type:    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        expand\n                    \n                    \n                        Boolean value to indicate whether the button should be displayed expanded (true if the badge should be offset to right). \n\n                            \n                            Type:    boolean\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                    \n                        The icon to display in front of the button text. \n\n                            \n                            Type:    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        tasksDue\n                    \n                    \n                        The Observable that can be subscribed to (for displaying quantities in badge). \n\n                            \n                            Type:    Observable\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                    \n                        The text to display for the button. \n\n                            \n                            Type:    \"Over Due\" | \"Due Today\" | \"Due Tomorrow\" | \"Pending\" | \"Complete\"\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                    \n                        The base URL to use when list-item clicked. \n\n                            \n                            Type:    string\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:35\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:50\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:57\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        filter:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:37\n                            \n                        \n\n                \n                    \n                        The filter parameter to apply to the URL when the due button clicked. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numTasksDue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        numTasksDue:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:39\n                            \n                        \n\n                \n                    \n                        The number of Tasks due. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            params\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        params:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:41\n                            \n                        \n\n                \n                    \n                        The URL paramters. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/list-item.component.ts:43\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import * as moment from 'moment';\n\n/* angular libraries */\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription, Observable } from 'rxjs';\n\n/* app */\nimport { TaskService } from '@tasks/shared/services/task.service';\n\n/**\n * Creates 3 buttons meant for filtering Tasks \"Over Due\", \"Due Today\", and \"Due Tomorrow\". Allows \n * for the buttons to be styled in multiple ways so the buttons can be re-used on the header toolbar \n * for large screens as \"mat-button\" elements and in the task filter as \"mat-menu-item\" elements in \n * the dropdown menu.\n */\n@Component({\n    selector: 'list-item',\n    templateUrl: './list-item.component.html',\n    styleUrls: ['./list-item.component.css']\n})\nexport class ListItemComponent implements OnDestroy, OnInit {\n\n    /** The CSS class to apply to the buttons (only \"mat-button\" or \"mat-menu-item\" currently, but could use others). */\n    @Input() buttonClass: string;\n    /** The icon to display in front of the button text. */\n    @Input() icon: string;\n    /** Boolean value to indicate whether the button should be displayed expanded (true if the badge should be offset to right). */\n    @Input() expand: boolean;\n    /** The Observable that can be subscribed to (for displaying quantities in badge). */\n    @Input() tasksDue: Observable;\n    /** The text to display for the button. */\n    @Input() text: 'Over Due' | 'Due Today' | 'Due Tomorrow' | 'Pending' | 'Complete';\n    /** The base URL to use when list-item clicked. */\n    @Input() url: string;\n    /** The filter parameter to apply to the URL when the due button clicked. */\n    filter: string;\n    /** The number of Tasks due. */\n    numTasksDue: string;\n    /** The URL paramters. */\n    params: string;\n    /** The subscriptions for the component. */\n    sub: Subscription;\n\n    constructor(private taskService: TaskService) {}\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        // initialize the num tasks over due, due today, and due tomorrow\n        this.taskService.initNumTasks();\n\n        // create sub to maintain all subscriptions for the component (for easy unsubscribe on destory)\n        this.sub = new Subscription();\n\n        if(this.text == 'Over Due') {\n            this.filter = 'overdue';\n            // subscribe to the numTasksOverDue Observable and add it to the subscriptions for the component\n            const subOverDue = this.taskService.numTasksOverDue.subscribe((num: number) => {\n                this.numTasksDue = num.toString(); // update number of tasks over due (so badge updates)\n            });\n            this.sub.add(subOverDue);\n        }\n        else if(this.text == 'Due Today') {\n            this.filter = moment().startOf('day').utc().format('YYYY-MM-DD');\n            // subscribe to the numTasksDueToday Observable and add it to the subscriptions for the component\n            const subToday = this.taskService.numTasksDueToday.subscribe((num: number) => {\n                this.numTasksDue = num.toString(); // update number of tasks due today (so badge updates)\n            });\n            this.sub.add(subToday);\n        }\n        else if(this.text == 'Due Tomorrow'){\n            this.filter = moment().startOf('day').add(1, 'days').utc().format('YYYY-MM-DD');\n            // subscribe to the numTasksDueTomorrow Observable and add it to the subscriptions for the component\n            const subTomorrow = this.taskService.numTasksDueTomorrow.subscribe((num: number) => {\n                this.numTasksDue = num.toString(); // update number of tasks due tomorrow (so badge updates)\n            });\n            this.sub.add(subTomorrow);\n        }\n        else {\n            this.filter = '';\n            if(this.text !== 'Complete') {\n                const sub = this.taskService.numPendingTasks.subscribe((num: number) => {\n                    if(num \n    \n\n    \n        \n    \n    {{text}}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        {{text}}    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ListItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoaderService.html":{"url":"injectables/LoaderService.html","title":"injectable - LoaderService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  LoaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/loader.service.ts\n        \n\n            \n                Description\n            \n            \n                Handles displaying and hiding the loading spinner.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loaderState\n                            \n                            \n                                    Private\n                                loaderSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hide\n                            \n                            \n                                show\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/loader.service.ts:22\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hide\n                            \n                            \n                        \n                    \n                \n                \n                    \nhide()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/loader.service.ts:39\n                            \n                        \n\n\n                \n                    \n                            Sets the loaderSubject to show: false to hide the loading spinner.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            show\n                            \n                            \n                        \n                    \n                \n                \n                    \nshow()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/loader.service.ts:32\n                            \n                        \n\n\n                \n                    \n                            Sets the loaderSubject to show: true to display the loading spinner.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loaderState\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loaderState:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/loader.service.ts:20\n                            \n                        \n\n                \n                    \n                        An Observable for the state of the loader. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            loaderSubject\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        loaderSubject:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/loader.service.ts:22\n                            \n                        \n\n                \n                    \n                        The state of the loader. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * The state of the loader.\n */\nexport interface LoaderState {\n    /** Boolean to indicate whether to show or hide the loading spinner. */\n    show: boolean;\n}\n\n/**\n * Handles displaying and hiding the loading spinner.\n */\n@Injectable()\nexport class LoaderService {\n\n    /** An Observable for the state of the loader. */\n    loaderState: Observable;\n    /** The state of the loader. */\n    private loaderSubject: Subject;\n\n    constructor() { \n        this.loaderSubject = new Subject();\n        this.loaderState = this.loaderSubject.asObservable();\n    }\n\n    /**\n     * Sets the loaderSubject to show: true to display the loading spinner.\n     */\n    show() {\n        this.loaderSubject.next({show: true});\n    }\n    \n    /**\n     * Sets the loaderSubject to show: false to hide the loading spinner.\n     */\n    hide() {\n        this.loaderSubject.next({show: false});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoaderState.html":{"url":"interfaces/LoaderState.html","title":"interface - LoaderState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoaderState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/loader.service.ts\n        \n\n            \n                Description\n            \n            \n                The state of the loader.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        show\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        show\n                                    \n                                \n                                \n                                    \n                                        show:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean to indicate whether to show or hide the loading spinner. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * The state of the loader.\n */\nexport interface LoaderState {\n    /** Boolean to indicate whether to show or hide the loading spinner. */\n    show: boolean;\n}\n\n/**\n * Handles displaying and hiding the loading spinner.\n */\n@Injectable()\nexport class LoaderService {\n\n    /** An Observable for the state of the loader. */\n    loaderState: Observable;\n    /** The state of the loader. */\n    private loaderSubject: Subject;\n\n    constructor() { \n        this.loaderSubject = new Subject();\n        this.loaderState = this.loaderSubject.asObservable();\n    }\n\n    /**\n     * Sets the loaderSubject to show: true to display the loading spinner.\n     */\n    show() {\n        this.loaderSubject.next({show: true});\n    }\n    \n    /**\n     * Sets the loaderSubject to show: false to hide the loading spinner.\n     */\n    hide() {\n        this.loaderSubject.next({show: false});\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/logger.service.ts\n        \n\n            \n                Description\n            \n            \n                A simple logging interface.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                info\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        error:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:13\n                            \n                        \n\n                \n                    \n                        Log error to the console. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            info\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        info:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:9\n                            \n                        \n\n                \n                    \n                        Log to the console. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            warn\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        warn:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:11\n                            \n                        \n\n                \n                    \n                        Log warning to the console. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * A simple logging interface.\n */\nexport abstract class Logger {\n    /** Log to the console. */\n    info: any;\n    /** Log warning to the console. */\n    warn: any;\n    /** Log error to the console. */\n    error: any;\n}\n\n/**\n * Default implementation for logging. The service and Logger are taken\n * from the below URL.\n * \n * https://robferguson.org/blog/2017/09/09/a-simple-logging-service-for-angular-4/\n */\n@Injectable()\nexport class LoggerService implements Logger {\n    /** Log to the console. */\n    info: any;\n    /** Log warning to the console. */\n    warn: any;\n    /** Log error to the console. */\n    error: any;\n\n    /**\n     * Logs to the correct source file name and line number and passes along any\n     * arguments.\n     * \n     * @param type The console type.\n     * @param args Any optional args.\n     */\n    invokeConsoleMethod(type: string, args?: any): void {}  \n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/logger.service.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for logging. The service and Logger are taken\nfrom the below URL.\nhttps://robferguson.org/blog/2017/09/09/a-simple-logging-service-for-angular-4/\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                info\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                invokeConsoleMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            invokeConsoleMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \ninvokeConsoleMethod(type: string, args?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:38\n                            \n                        \n\n\n                \n                    \n                            Logs to the correct source file name and line number and passes along any\narguments.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The console type.\n\n                                                        \n                                                \n                                                \n                                                        args\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                        \n                                                                Any optional args.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        error:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:29\n                            \n                        \n\n                \n                    \n                        Log error to the console. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            info\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        info:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:25\n                            \n                        \n\n                \n                    \n                        Log to the console. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            warn\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        warn:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/logger.service.ts:27\n                            \n                        \n\n                \n                    \n                        Log warning to the console. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * A simple logging interface.\n */\nexport abstract class Logger {\n    /** Log to the console. */\n    info: any;\n    /** Log warning to the console. */\n    warn: any;\n    /** Log error to the console. */\n    error: any;\n}\n\n/**\n * Default implementation for logging. The service and Logger are taken\n * from the below URL.\n * \n * https://robferguson.org/blog/2017/09/09/a-simple-logging-service-for-angular-4/\n */\n@Injectable()\nexport class LoggerService implements Logger {\n    /** Log to the console. */\n    info: any;\n    /** Log warning to the console. */\n    warn: any;\n    /** Log error to the console. */\n    error: any;\n\n    /**\n     * Logs to the correct source file name and line number and passes along any\n     * arguments.\n     * \n     * @param type The console type.\n     * @param args Any optional args.\n     */\n    invokeConsoleMethod(type: string, args?: any): void {}  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MatPaginatorCustom.html":{"url":"injectables/MatPaginatorCustom.html","title":"injectable - MatPaginatorCustom","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  MatPaginatorCustom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/tasks/shared/util/mat-paginator-custom.ts\n        \n\n            \n                Description\n            \n            \n                Extension of MatPaginatorIntl to define custom labels and text displayed.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getRangeLabel\n                            \n                            \n                                nextPageLabel\n                            \n                            \n                                previousPageLabel\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getRangeLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        getRangeLabel:     \n\n                    \n                \n                    \n                        \n                            Default value : function (page, pageSize, length) {\n        if (length == 0 || pageSize == 0) { \n            return `0 of ${length}`; \n        } \n        length = Math.max(length, 0); \n        const startIndex = page * pageSize; \n        const endIndex = startIndex \n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/util/mat-paginator-custom.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nextPageLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nextPageLabel:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Next Task'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/util/mat-paginator-custom.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            previousPageLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        previousPageLabel:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Previous Task'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/util/mat-paginator-custom.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { MatPaginatorIntl } from '@angular/material';\n\n/**\n * Extension of MatPaginatorIntl to define custom labels and text displayed.\n */\n@Injectable()\nexport class MatPaginatorCustom extends MatPaginatorIntl {\n    nextPageLabel     = 'Next Task';\n    previousPageLabel = 'Previous Task';\n\n    getRangeLabel = function (page, pageSize, length) {\n        if (length == 0 || pageSize == 0) { \n            return `0 of ${length}`; \n        } \n        length = Math.max(length, 0); \n        const startIndex = page * pageSize; \n        const endIndex = startIndex \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageNotFoundComponent.html":{"url":"components/PageNotFoundComponent.html","title":"component - PageNotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PageNotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/page-not-found/page-not-found.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the base page not found (404) component for the app.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-not-found\n            \n\n            \n                styleUrls\n                page-not-found.component.css\n            \n\n\n\n            \n                templateUrl\n                ./page-not-found.component.html\n            \n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * Creates the base page not found (404) component for the app.\n */\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent {}\n\n    \n\n    \n        \n  404\n  Sorry, but it looks like the page you are looking for does not exist.\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  404  Sorry, but it looks like the page you are looking for does not exist.'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageNotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PendingTasksTableComponent.html":{"url":"components/PendingTasksTableComponent.html","title":"component - PendingTasksTableComponent","body":"\n                   \n\n\n\n\n\n  Components\n  PendingTasksTableComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/table/pending-tasks-table.component.ts\n\n\n    \n        Description\n    \n    \n        A wrapper for the TasksTableComponent which only displays pending Tasks.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                pending-tasks-table\n            \n\n            \n                styleUrls\n                pending-tasks-table.component.css\n            \n\n\n\n            \n                templateUrl\n                ./pending-tasks-table.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                pendingTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pendingTasks\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pendingTasks:     TasksTableComponent\n\n                    \n                \n                    \n                        \n                            Type :     TasksTableComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/table/pending-tasks-table.component.ts:18\n                            \n                        \n\n                \n                    \n                        The table containing the pending Tasks. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, ViewChild } from '@angular/core';\n\n/* app */\nimport { TasksTableComponent } from '@tasks/table/tasks-table.component';\n\n/**\n * A wrapper for the TasksTableComponent which only displays pending Tasks.\n */\n@Component({\n    selector: 'pending-tasks-table',\n    templateUrl: './pending-tasks-table.component.html',\n    styleUrls: ['./pending-tasks-table.component.css']\n})\nexport class PendingTasksTableComponent {\n\n    /** The table containing the pending Tasks. */\n    @ViewChild('pendingTasks') pendingTasks: TasksTableComponent; \n}\n\n    \n\n    \n        \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PendingTasksTableComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RecurringTaskComponent.html":{"url":"components/RecurringTaskComponent.html","title":"component - RecurringTaskComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RecurringTaskComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/edit/recurring-task.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a dialog to select whether to edit a single or all remaining Tasks\nin a sequence of Tasks. This component expects the given Task to be a \nrecurring one.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                recurring-task\n            \n\n            \n                styleUrls\n                recurring-task.component.css\n            \n\n\n\n            \n                templateUrl\n                ./recurring-task.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                editRecurringTaskForm\n                            \n                            \n                                    Private\n                                sub\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                edit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                updateAll\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.marker-repeating-task-dialog\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any, dialogRef: MatDialogRef, formBuilder: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/edit/recurring-task.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        updateAll\n                    \n                    \n                        Event emitted when user clicks the \"Edit\" button (emits boolean value updateAll=true if updating all Tasks). \n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:28\n                            \n                        \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.marker-repeating-task-dialog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        class.marker-repeating-task-dialog:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \ncancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:43\n                            \n                        \n\n\n                \n                    \n                            Cancels the Task edit and closes the dialog.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            edit\n                            \n                            \n                        \n                    \n                \n                \n                    \nedit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:76\n                            \n                        \n\n\n                \n                    \n                            Opens the dialog to edit a Task.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:50\n                            \n                        \n\n\n                \n                    \n                            Clean the component \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:57\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            editRecurringTaskForm\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        editRecurringTaskForm:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:24\n                            \n                        \n\n                \n                    \n                        The form to select whether to edit single or all remaining Tasks. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:30\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            task\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        task:     Task\n\n                    \n                \n                    \n                        \n                            Type :     Task\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/edit/recurring-task.component.ts:26\n                            \n                        \n\n                \n                    \n                        The recurring Task to edit. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, HostBinding, Inject, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { Subscription } from 'rxjs/Subscription';\n\n/* app */\nimport { Task } from '@tasks/shared/models/task.model';\n\n/**\n * Creates a dialog to select whether to edit a single or all remaining Tasks\n * in a sequence of Tasks. This component expects the given Task to be a \n * recurring one.\n */\n@Component({\n    selector: 'recurring-task',\n    templateUrl: './recurring-task.component.html',\n    styleUrls: ['./recurring-task.component.css']\n})\nexport class RecurringTaskComponent implements OnDestroy, OnInit {\n\n    @HostBinding('class.marker-repeating-task-dialog') classMarker : boolean = true;\n    /** The form to select whether to edit single or all remaining Tasks. */\n    editRecurringTaskForm: FormGroup;\n    /** The recurring Task to edit. */\n    task: Task;\n    /** Event emitted when user clicks the \"Edit\" button (emits boolean value updateAll=true if updating all Tasks). */\n    @Output() updateAll: EventEmitter;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private data:any,\n        private dialogRef: MatDialogRef,\n        private formBuilder: FormBuilder\n    ) {\n        this.updateAll = new EventEmitter();\n    }\n\n    /**\n     * Cancels the Task edit and closes the dialog.\n     */\n    cancel() {\n        this.dialogRef.close();\n    }\n\n    /**\n     * Clean the component \n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.task = this.data.task;\n\n        this.editRecurringTaskForm = this.formBuilder.group({\n            updateAll: [\n                {\n                    value: '',\n                    disabled: false\n                },\n                Validators.required\n            ]\n        });\n\n        this.sub = new Subscription();\n    }\n\n    /**\n     * Opens the dialog to edit a Task.\n     */\n    edit() {\n        let updateAll: boolean;\n        if(this.editRecurringTaskForm.get('updateAll').value == 'all') {\n            updateAll = true;\n        }\n        else {\n            updateAll = false;\n        }\n        this.updateAll.emit(updateAll);\n        this.dialogRef.close();\n    }\n}\n\n    \n\n    \n        \n    Edit Recurring Item\n\n\n    \n        \n            Just this Task\n            This and all remaining Tasks in sequence\n        \n    \n\n\n    Cancel\n    \n        \n             \n            Edit\n        \n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Edit Recurring Item                        Just this Task            This and all remaining Tasks in sequence                Cancel                                     Edit            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RecurringTaskComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SidenavTasksComponent.html":{"url":"components/SidenavTasksComponent.html","title":"component - SidenavTasksComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SidenavTasksComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/sidenav/sidenav-tasks.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the main layout for the application. The main layout currently\nconsists of the header, side menu, footer, and router-outlet.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sidenav-tasks\n            \n\n            \n                styleUrls\n                sidenav-tasks.component.css\n            \n\n\n\n            \n                templateUrl\n                ./sidenav-tasks.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isExpanded\n                            \n                            \n                                isMediumScreen\n                            \n                            \n                                listItems\n                            \n                            \n                                numTasksDueToday\n                            \n                            \n                                numTasksDueTomorrow\n                            \n                            \n                                numTasksOverDue\n                            \n                            \n                                selectedIndex\n                            \n                            \n                                    Private\n                                sidenavRoutes\n                            \n                            \n                                    Private\n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getRouteParamsFromChild\n                            \n                            \n                                    Private\n                                highlightListItem\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openCreateTaskDialog\n                            \n                            \n                                select\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, route: ActivatedRoute, router: Router, taskService: TaskService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                    UtilsService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            getRouteParamsFromChild\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getRouteParamsFromChild()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:141\n                            \n                        \n\n\n                \n                    \n                            Traverses the route in the router state tree until it has reached\nthe last URL segement and returns the params from there.\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            highlightListItem\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        highlightListItem(params: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:159\n                            \n                        \n\n\n                \n                    \n                            Highlights the correct listItem in the sidenav based on the given\nparams (specifically filter params). If no filter params are found, \nthen the listItem is set based on the current URL (\"complete\" or \n\"pending\"). The listItems are highlighted by setting the \nselectedIndex of the listItem from the array of listItems defined \nfor the component.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The parameters from the URL.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:80\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:87\n                            \n                        \n\n\n                \n                    \n                            Initialize the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            openCreateTaskDialog\n                            \n                            \n                        \n                    \n                \n                \n                    \nopenCreateTaskDialog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:66\n                            \n                        \n\n\n                \n                    \n                            Opens the dialog to create a Task.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:132\n                            \n                        \n\n\n                \n                    \n                            Updates the selected index for the sidenav items and navigates to the\nroute at the given index.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The index of the sidenav item that was clicked. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isExpanded\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isExpanded:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:25\n                            \n                        \n\n                \n                    \n                        Boolean to indicate if the sidenav is expanded (true if expanded). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMediumScreen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isMediumScreen:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:27\n                            \n                        \n\n                \n                    \n                        Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            listItems\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        listItems:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        { buttonClass: 'defaultBadge right', icon: 'clipboard-list', marker: 'marker-list-item-pending-tasks', text: 'Pending', routerLink: '/pending' },\n        { buttonClass: 'overDueBadge right', icon: 'hourglass-end', marker: '', text: 'Over Due', routerLink: '/pending', routeParams: {filter: 'overdue' } },\n        { buttonClass: 'dueTodayBadge right', icon: 'hourglass-half', marker: '', text: 'Due Today', routerLink: '/pending', routeParams: {filter: 'today' } },\n        { buttonClass: 'dueTomorrowBadge right', icon: 'hourglass-start', marker: '', text: 'Due Tomorrow', routerLink: '/pending', routeParams: {filter: 'tomorrow'} },\n        { icon: 'clipboard-check', marker: 'marker-list-item-complete-tasks', text: 'Complete', routerLink: '/complete', routeParams: {filter: ''} }\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:47\n                            \n                        \n\n                \n                    \n                        The properties for each of the list-items in the sidenav. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numTasksDueToday\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        numTasksDueToday:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:31\n                            \n                        \n\n                \n                    \n                        The number of Tasks due today. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numTasksDueTomorrow\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        numTasksDueTomorrow:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:33\n                            \n                        \n\n                \n                    \n                        The number of Tasks due tomorrow. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numTasksOverDue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        numTasksOverDue:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:29\n                            \n                        \n\n                \n                    \n                        The number of over due Tasks. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        selectedIndex:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:35\n                            \n                        \n\n                \n                    \n                        The index of the sidenav item that is selected. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sidenavRoutes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sidenavRoutes:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        ['tasks/pending'], \n        ['tasks/pending', { filter: 'overdue' }], \n        ['tasks/pending', { filter: 'today' }],\n        ['tasks/pending', { filter: 'tomorrow' }],\n        ['tasks/complete']\n    ]\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:39\n                            \n                        \n\n                \n                    \n                        The routes with filter parameter for the sidenav items. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/sidenav/sidenav-tasks.component.ts:37\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from \"@angular/material\";\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/* app */\nimport { CreateTaskComponent } from '@tasks/dialogs/create-task/create-task.component';\nimport { UtilsService } from '@tasks/shared/services/utils.service';\nimport { TaskService } from '@tasks/shared/services/task.service';\n\n/**\n * Creates the main layout for the application. The main layout currently\n * consists of the header, side menu, footer, and router-outlet.\n */\n@Component({\n    selector: 'sidenav-tasks',\n    templateUrl: './sidenav-tasks.component.html',\n    styleUrls: ['./sidenav-tasks.component.css']\n})\nexport class SidenavTasksComponent implements OnDestroy, OnInit {\n\n    /** Boolean to indicate if the sidenav is expanded (true if expanded). */\n    isExpanded: boolean;\n    /** Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). */\n    isMediumScreen: boolean;\n    /** The number of over due Tasks. */\n    numTasksOverDue: Observable;\n    /** The number of Tasks due today. */\n    numTasksDueToday: Observable;\n    /** The number of Tasks due tomorrow. */\n    numTasksDueTomorrow: Observable;\n    /** The index of the sidenav item that is selected. */\n    selectedIndex: number;\n    /** The subscriptions for the component. */\n    private sub: Subscription;\n    /** The routes with filter parameter for the sidenav items. */\n    private sidenavRoutes: any[] = [\n        ['tasks/pending'], \n        ['tasks/pending', { filter: 'overdue' }], \n        ['tasks/pending', { filter: 'today' }],\n        ['tasks/pending', { filter: 'tomorrow' }],\n        ['tasks/complete']\n    ];\n    /** The properties for each of the list-items in the sidenav. */\n    listItems: any[] = [\n        { buttonClass: 'defaultBadge right', icon: 'clipboard-list', marker: 'marker-list-item-pending-tasks', text: 'Pending', routerLink: '/pending' },\n        { buttonClass: 'overDueBadge right', icon: 'hourglass-end', marker: '', text: 'Over Due', routerLink: '/pending', routeParams: {filter: 'overdue' } },\n        { buttonClass: 'dueTodayBadge right', icon: 'hourglass-half', marker: '', text: 'Due Today', routerLink: '/pending', routeParams: {filter: 'today' } },\n        { buttonClass: 'dueTomorrowBadge right', icon: 'hourglass-start', marker: '', text: 'Due Tomorrow', routerLink: '/pending', routeParams: {filter: 'tomorrow'} },\n        { icon: 'clipboard-check', marker: 'marker-list-item-complete-tasks', text: 'Complete', routerLink: '/complete', routeParams: {filter: ''} }\n    ];\n\n    constructor(\n        private dialog: MatDialog,\n        private route: ActivatedRoute,\n        private router: Router,\n        private taskService: TaskService,\n        private utilsService: UtilsService\n    ) {}\n\n    /**\n     * Opens the dialog to create a Task.\n     */\n    openCreateTaskDialog() {\n        const dialogConfig = new MatDialogConfig();\n        dialogConfig.width = '70%';\n        dialogConfig.maxWidth = '100vw';\n        dialogConfig.maxHeight = '100vh';\n        dialogConfig.autoFocus = false;\n        let createDialogRef = this.dialog.open(CreateTaskComponent, dialogConfig);\n\n        this.utilsService.fullScreenDialogSub(createDialogRef);\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component.\n     */\n    ngOnInit() {\n        this.numTasksDueToday = this.taskService.numTasksDueToday;\n        this.numTasksDueTomorrow = this.taskService.numTasksDueToday;\n        this.numTasksOverDue = this.taskService.numTasksOverDue;\n\n        this.sub = new Subscription();\n        const subMenuToggle = this.utilsService.sidenavMenuChanges.pipe(\n            filter(event => event === 'Collapse' || event === 'Expand')\n        ).subscribe(next => {\n            if(next === 'Collapse') {\n                this.isExpanded = false;\n            }\n            else {\n                this.isExpanded = true;\n            }\n        });\n        this.sub.add(subMenuToggle);\n\n        const subScreenSize = this.utilsService.isMediumScreen.subscribe((isMediumScreen: boolean) => {\n            this.isMediumScreen = isMediumScreen;\n            if(this.isExpanded && this.isMediumScreen) {\n                this.isExpanded = false;\n            }\n            else {\n                // set to true on medium or smaller devices, otherwise to false\n                this.isExpanded = !this.isMediumScreen;\n            }\n        });\n        this.sub.add(subScreenSize);\n\n        // subscribe to the parameters in the route\n        const params = this.getRouteParamsFromChild();\n        const sub = params.subscribe(params => {\n            // highlight the list-item based on the route params\n            this.highlightListItem(params);\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Updates the selected index for the sidenav items and navigates to the\n     * route at the given index.\n     * \n     * @param index The index of the sidenav item that was clicked. \n     */\n    select(index: number) {\n        this.selectedIndex = index;\n        this.router.navigate(this.sidenavRoutes[index]);\n    }\n\n    /**\n     * Traverses the route in the router state tree until it has reached\n     * the last URL segement and returns the params from there.\n     */\n    private getRouteParamsFromChild() {\n        let route = this.route;\n        while(route.firstChild) {\n            route = route.firstChild;\n        }\n        return route.params;\n    }\n\n    /**\n     * Highlights the correct listItem in the sidenav based on the given\n     * params (specifically filter params). If no filter params are found, \n     * then the listItem is set based on the current URL (\"complete\" or \n     * \"pending\"). The listItems are highlighted by setting the \n     * selectedIndex of the listItem from the array of listItems defined \n     * for the component.\n     * \n     * @param params The parameters from the URL.\n     */\n    private highlightListItem(params: any) {\n        // set the selectedIndex based on the value of the filter param\n        let filter: string = params['filter'];\n        if(filter == 'overdue') {\n            this.selectedIndex = 1;\n        }\n        else if(filter == 'today') {\n            this.selectedIndex = 2;\n        }\n        else if(filter == 'tomorrow') {\n            this.selectedIndex = 3;\n        }\n        else {\n            // if no filter parameter is present, then set the selectedIndex\n            // based on whether 'complete' is in the URL.\n            if(this.router.url.indexOf('complete') >= 0) {\n                this.selectedIndex = 4;\n            }\n            else {\n                this.selectedIndex = 0;\n            }\n        }\n    }\n}\n\n    \n\n    \n        \n    \n    Create Task\n    \n    \n\n\n    \n        \n        \n        \n    \n\n\n    \n        \n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Create Task                                                        '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SidenavTasksComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SidenavTasksModule.html":{"url":"modules/SidenavTasksModule.html","title":"module - SidenavTasksModule","body":"\n                   \n\n\n\n\n  Modules\n  SidenavTasksModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SidenavTasksModule\n\n\n\ncluster_SidenavTasksModule_declarations\n\n\n\ncluster_SidenavTasksModule_imports\n\n\n\ncluster_SidenavTasksModule_exports\n\n\n\n\nListItemComponent\n\nListItemComponent\n\n\n\nSidenavTasksModule\n\nSidenavTasksModule\n\nSidenavTasksModule -->\n\nListItemComponent->SidenavTasksModule\n\n\n\n\n\nSidenavTasksComponent\n\nSidenavTasksComponent\n\nSidenavTasksModule -->\n\nSidenavTasksComponent->SidenavTasksModule\n\n\n\n\n\nSidenavTasksComponent \n\nSidenavTasksComponent \n\nSidenavTasksComponent  -->\n\nSidenavTasksModule->SidenavTasksComponent \n\n\n\n\n\nCreateTaskModule\n\nCreateTaskModule\n\nSidenavTasksModule -->\n\nCreateTaskModule->SidenavTasksModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/sidenav/sidenav-tasks.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to for the Tasks\nsidenav.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                ListItemComponent\n                            \n                            \n                                SidenavTasksComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                SidenavTasksComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    CreateTaskModule\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    SidenavTasksComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatBadgeModule, MatButtonModule, MatListModule, MatSidenavModule, MatTooltipModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faHourglass } from '@fortawesome/free-regular-svg-icons';\nimport { faClipboardList, faClipboardCheck, faHourglassEnd, faHourglassHalf, faHourglassStart, faPaste } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faClipboardList, faClipboardCheck, faHourglass, faHourglassEnd, faHourglassHalf, faHourglassStart, faPaste);\n\n/* module */\nimport { SidenavTasksComponent } from './sidenav-tasks.component';\nimport { ListItemComponent } from './list-item.component';\nimport { CreateTaskModule } from '@tasks/dialogs/create-task/create-task.module';\n\n/**\n * Defines the components, services, and modules required to for the Tasks\n * sidenav.\n */\n@NgModule({\n    declarations: [\n        ListItemComponent,\n        SidenavTasksComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        MatBadgeModule, \n        MatButtonModule,\n        MatListModule, \n        MatSidenavModule, \n        MatTooltipModule,\n        RouterModule,\n\n        FontAwesomeModule,\n\n        /* app modules */\n        CreateTaskModule\n    ],\n    exports: [\n        SidenavTasksComponent\n    ],\n    entryComponents: [\n        SidenavTasksComponent\n    ]\n})\nexport class SidenavTasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/tasks/shared/models/task.model.ts\n        \n\n            \n                Description\n            \n            \n                A Task to be completed. A Task requires a name, description, and due date.\nBy default Tasks are marked pending (isComplete=false). Tasks can also have\na priority, a frequency that they repeat (daily, weekly, monthly, yearly), and\nthe number of times they repeat (if it repeats).\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateCompleted\n                            \n                            \n                                description\n                            \n                            \n                                dueDate\n                            \n                            \n                                endsAfter\n                            \n                            \n                                id\n                            \n                            \n                                isComplete\n                            \n                            \n                                name\n                            \n                            \n                                priority\n                            \n                            \n                                    Optional\n                                repeats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateCompleted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dateCompleted:     Date\n\n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:20\n                            \n                        \n\n                \n                    \n                        The date the Task is completed. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:16\n                            \n                        \n\n                \n                    \n                        The description of the Task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dueDate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dueDate:     Date\n\n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:18\n                            \n                        \n\n                \n                    \n                        The date the Task is due. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            endsAfter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        endsAfter:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:28\n                            \n                        \n\n                \n                    \n                        The number of times the Task will repeat (if it repeats). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:12\n                            \n                        \n\n                \n                    \n                        The unique identifier of the Task. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isComplete\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isComplete:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:22\n                            \n                        \n\n                \n                    \n                        Set to true if the Task is complete, false if it is pending. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:14\n                            \n                        \n\n                \n                    \n                        The name of the Task. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priority\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        priority:     PriorityTypes\n\n                    \n                \n                    \n                        \n                            Type :     PriorityTypes\n\n                        \n                    \n                    \n                        \n                            Default value : 'Low'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:24\n                            \n                        \n\n                \n                    \n                        The priority of the Task (Low, Medium, High, or Urgent). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            repeats\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        repeats:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'noRepeat'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/models/task.model.ts:26\n                            \n                        \n\n                \n                    \n                        The frequency the Task repeats: 'noRepeat', 'daily', 'weekly', 'monthly', 'yearly'. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export type PriorityTypes = \"Low\" | \"Medium\" | \"High\" | \"Urgent\";\n\n/**\n * A Task to be completed. A Task requires a name, description, and due date.\n * By default Tasks are marked pending (isComplete=false). Tasks can also have\n * a priority, a frequency that they repeat (daily, weekly, monthly, yearly), and\n * the number of times they repeat (if it repeats).\n */\nexport class Task {\n    /** The unique identifier of the Task. */\n    id: number;\n    /** The name of the Task. */\n    name: string;\n    /** The description of the Task.*/\n    description: string;\n    /** The date the Task is due. */\n    dueDate: Date;\n    /** The date the Task is completed. */\n    dateCompleted: Date;\n    /** Set to true if the Task is complete, false if it is pending. */\n    isComplete: boolean = false;\n    /** The priority of the Task (Low, Medium, High, or Urgent). */\n    priority: PriorityTypes = 'Low';\n    /** The frequency the Task repeats: 'noRepeat', 'daily', 'weekly', 'monthly', 'yearly'. */\n    repeats?: string = 'noRepeat';\n    /** The number of times the Task will repeat (if it repeats). */\n    endsAfter: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TaskFormComponent.html":{"url":"components/TaskFormComponent.html","title":"component - TaskFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TaskFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/form/task-form.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the form to create or modify a Task. A Task is required in the @Input property if modifying a\nTask (no Task required when creating a Task). Complete and Pending Tasks can be modified using this form.\nThe following example is used to create a Task:\n\nThe following example is used to modify a Task:\n\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                task-form\n            \n\n            \n                styleUrls\n                task-form.component.css\n            \n\n\n\n            \n                templateUrl\n                ./task-form.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateCompletedForm\n                            \n                            \n                                isMediumScreen\n                            \n                            \n                                mainPropertiesForm\n                            \n                            \n                                minDueDate\n                            \n                            \n                                repeatPropertiesForm\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkError\n                            \n                            \n                                    Private\n                                checkFormError\n                            \n                            \n                                getFormData\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                task\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                formValid\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.marker-task-form\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/form/task-form.component.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                    UtilsService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        task\n                    \n                    \n                        The Task to edit. \n\n                            \n                            Type:    Task\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:36\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        formValid\n                    \n                    \n                        Event emitted when form is checked\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:38\n                            \n                        \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.marker-task-form\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        class.marker-task-form:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            checkError\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheckError(property: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:63\n                            \n                        \n\n\n                \n                    \n                            Checks the form for errors based on the given property when the property is updated on the\nform.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The property to check for error.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            checkFormError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        checkFormError(form: FormGroup, property: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:81\n                            \n                        \n\n\n                \n                    \n                            Returns true if the form is invalid and the property of the given form is dirty or it has\nbeen touched.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                        \n                                                                    FormGroup\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The form to validate.\n\n                                                        \n                                                \n                                                \n                                                        property\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The property that was updated.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getFormData\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetFormData(form: FormGroup)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:90\n                            \n                        \n\n\n                \n                    \n                            Returns the form data as an Observable from the given formGroup.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        form\n                                                        \n                                                                    FormGroup\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The from whose data should be returned. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:106\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:113\n                            \n                        \n\n\n                \n                    \n                            Initialize the component. Creates the formGroups required for the component.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(property: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:197\n                            \n                        \n\n\n                \n                    \n                            Handles updating the form validity when a property is updated on the form and emits the formValid\nevent.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateCompletedForm\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        dateCompletedForm:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:40\n                            \n                        \n\n                \n                    \n                        The form for the dateCompleted property. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMediumScreen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isMediumScreen:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:46\n                            \n                        \n\n                \n                    \n                        Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mainPropertiesForm\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        mainPropertiesForm:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:42\n                            \n                        \n\n                \n                    \n                        The form for the main properties (name, priority, description, and dueDate). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minDueDate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        minDueDate:     Date\n\n                    \n                \n                    \n                        \n                            Type :     Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:48\n                            \n                        \n\n                \n                    \n                        The minimum date the Task can be marked due (defaults to todays date if Task creating Task). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            repeatPropertiesForm\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        repeatPropertiesForm:     FormGroup\n\n                    \n                \n                    \n                        \n                            Type :     FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:44\n                            \n                        \n\n                \n                    \n                        The form for the repeat properties (repeats, after). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/form/task-form.component.ts:50\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import * as moment from 'moment';\n\n/* angular libraries */\nimport { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\n\n/* app */\nimport { Task } from '@tasks/shared/models/task.model';\nimport { UtilsService } from '@tasks/shared/services/utils.service';\n\n/**\n * Creates the form to create or modify a Task. A Task is required in the @Input property if modifying a\n * Task (no Task required when creating a Task). Complete and Pending Tasks can be modified using this form.\n * The following example is used to create a Task:\n * \n * \n * \n * The following example is used to modify a Task:\n * \n * \n */\n@Component({\n    selector: 'task-form',\n    templateUrl: './task-form.component.html',\n    styleUrls: ['./task-form.component.css']\n})\nexport class TaskFormComponent implements OnDestroy, OnInit {\n    \n    @HostBinding('class.marker-task-form') classMarker : boolean = true;\n    /** The Task to edit. */\n    @Input() task: Task;\n    /** Event emitted when form is checked*/\n    @Output() formValid: EventEmitter = new EventEmitter();\n    /** The form for the dateCompleted property. */\n    dateCompletedForm: FormGroup;\n    /** The form for the main properties (name, priority, description, and dueDate). */\n    mainPropertiesForm: FormGroup;\n    /** The form for the repeat properties (repeats, after). */\n    repeatPropertiesForm: FormGroup;\n    /** Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). */\n    isMediumScreen: boolean;\n    /** The minimum date the Task can be marked due (defaults to todays date if Task creating Task). */\n    minDueDate: Date;\n    /** The subscriptions for the component. */\n    sub: Subscription;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private utilsService: UtilsService\n    ) {}\n\n    /**\n     * Checks the form for errors based on the given property when the property is updated on the\n     * form.\n     * \n     * @param property The property to check for error.\n     */\n    checkError(property: string) {\n        if(property == 'repeats' || property == 'after') {\n            // if the given property is \"repeats\" or \"after\" then check the repeatPropertiesForm\n            return this.checkFormError(this.repeatPropertiesForm, property);\n        }\n        else {\n            // else check the mainPropertiesForm\n            return this.checkFormError(this.mainPropertiesForm, property);\n        }        \n    }\n\n    /**\n     * Returns true if the form is invalid and the property of the given form is dirty or it has\n     * been touched.\n     * \n     * @param form The form to validate.\n     * @param property The property that was updated.\n     */\n    private checkFormError(form: FormGroup, property: string): boolean {\n        return form.get(property).invalid && (form.get(property).dirty || form.get(property).touched);\n    }\n\n    /**\n     * Returns the form data as an Observable from the given formGroup.\n     * \n     * @param form The from whose data should be returned. \n     */\n    getFormData(form: FormGroup): Observable {\n        return Observable.of(form.value)\n            .switchMap(formData => \n                Observable.of(formData)\n                .map((formData) => {\n                    return {\n                        value: formData,\n                        status: formData.status\n                    } as any\n                })\n            );\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component. Creates the formGroups required for the component.\n     */\n    ngOnInit() {\n        if(!this.task) {\n            // if the @Input task is not defined then create a dummy task to initialize the form data\n            this.task = new Task();\n            // and set the minDueDate to todays date (not sure it makes sense to allow due dates in past)\n            this.minDueDate = new Date();\n        }\n        else {\n            // otherwise set the minDueDate to the dueDate for the Task\n            this.minDueDate = this.task.dueDate;\n        }\n\n        // initialize the form with the dateCompleted property\n        this.dateCompletedForm = this.formBuilder.group({\n            dateCompleted: [\n                {\n                    value: moment(this.task.dateCompleted, moment.ISO_8601, true).isValid() ? moment(this.task.dateCompleted, moment.ISO_8601, true).utc().toDate() : null,\n                    disabled: true\n                }\n            ]\n        })\n\n        // initialize the form with the main properties (name, priority, description, and dueDate)\n        this.mainPropertiesForm = this.formBuilder.group({\n            name: [\n                {\n                    value: this.task.name, \n                    disabled: false\n                }, \n                [Validators.required]\n            ],\n            priority : [\n                {\n                    value: this.task.priority || 'Low',\n                    disabled: false\n                },\n                [Validators.required]\n            ],\n            description: [\n                {\n                    value: this.task.description, \n                    disabled: false\n                }, \n                [Validators.required]\n            ],\n            due: [\n                {\n                    value: moment(this.task.dueDate, moment.ISO_8601, true).isValid() ? moment(this.task.dueDate, moment.ISO_8601, true).utc().toDate() : null, \n                    disabled: this.task.isComplete\n                },\n                [Validators.required]\n            ]\n        });\n\n        // initialize the form with the repeat properties (repeats and after)\n        this.repeatPropertiesForm = this.formBuilder.group({\n            repeats: [\n                {\n                    value: this.task.repeats || 'noRepeat',\n                    disabled: this.task.id != null && (this.task.repeats == null || this.task.repeats == 'noRepeat')\n                },\n                [Validators.required]\n            ],\n            after: [\n                {\n                    value: this.task.endsAfter || '',\n                    disabled: this.task.repeats === 'noRepeat'\n                }\n            ]\n        });\n\n        this.sub = new Subscription();\n        const sub = this.utilsService.isMediumScreen.subscribe((isMediumScreen: boolean) => {\n            this.isMediumScreen = isMediumScreen;\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Handles updating the form validity when a property is updated on the form and emits the formValid\n     * event.\n     * \n     * @property property The form field that was updated\n     */\n    update(property: string) {\n        if(property == 'repeats') {\n            // enable or disable the repeatPropertiesForm based on the repeats value\n            let after = this.repeatPropertiesForm.get('after');\n            if(this.repeatPropertiesForm.get(property).value === 'noRepeat') {\n                // disable the repeatPropertiesForm if the repeats value is \"noRepeat\"\n                after.disable();\n                after.clearValidators();\n                after.updateValueAndValidity();\n            }\n            else {\n                // otherwise enable the repeatProperties form\n                after.enable();\n                after.setValidators([Validators.required]);\n                after.updateValueAndValidity();\n            }\n        }\n\n        // update the form validity and emit the formValid event\n        let formsValid: boolean;\n        if(this.task.isComplete || (!this.task.isComplete && this.repeatPropertiesForm.get('repeats').value == 'noRepeat')) {\n            // only need to check mainPropertiesForm is valid when task is complete or it does not repeat\n            formsValid = this.mainPropertiesForm.valid;\n        }\n        else {\n            // otherwise check both the mainPropertiesForm and repeatPropertiesForm\n            formsValid = this.mainPropertiesForm.valid && this.repeatPropertiesForm.valid;\n        }\n        this.formValid.emit(formsValid);\n    }\n}\n\n    \n\n    \n        \n    \n        Task Name\n        \n        You must enter a name   \n    \n    \n        Priority\n        \n            Low\n            Medium\n            High\n            Urgent\n        \n    \n    \n        Description\n        \n        You must enter a description   \n    \n    \n        Due Date\n        \n        \n        You must enter a due date\n        The date the task is due\n    \n    \n\n    \n    \n        \n        \n            Date Completed\n            \n            \n            The date the task is completed\n        \n        \n    \n\n    \n    \n        \n        \n            \n                Repeat\n                \n                    Does not repeat\n                    Daily\n                    Weekly\n                    Monthly\n                    Yearly\n                \n            \n            \n                End After\n                \n                Number of occurrences\n                You must enter a number\n            \n        \n    \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Task Name                You must enter a name                   Priority                    Low            Medium            High            Urgent                        Description                You must enter a description                   Due Date                        You must enter a due date        The date the task is due                                            Date Completed                                    The date the task is completed                                                                        Repeat                                    Does not repeat                    Daily                    Weekly                    Monthly                    Yearly                                                        End After                                Number of occurrences                You must enter a number                        '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TaskFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TaskFormModule.html":{"url":"modules/TaskFormModule.html","title":"module - TaskFormModule","body":"\n                   \n\n\n\n\n  Modules\n  TaskFormModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskFormModule\n\n\n\ncluster_TaskFormModule_declarations\n\n\n\ncluster_TaskFormModule_exports\n\n\n\n\nTaskFormComponent\n\nTaskFormComponent\n\n\n\nTaskFormModule\n\nTaskFormModule\n\nTaskFormModule -->\n\nTaskFormComponent->TaskFormModule\n\n\n\n\n\nTaskFormComponent \n\nTaskFormComponent \n\nTaskFormComponent  -->\n\nTaskFormModule->TaskFormComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/form/task-form.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required for the Task form.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                TaskFormComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    TaskFormComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDatepickerModule, MatFormFieldModule, MatInputModule, MatNativeDateModule, MatSelectModule } from '@angular/material';\n\n/* module */\nimport { TaskFormComponent } from '@tasks/form/task-form.component';\n\n/**\n * Defines the components, services, and modules required for the Task form.\n */\n@NgModule({\n    declarations: [\n        TaskFormComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatDatepickerModule,\n        MatFormFieldModule,\n        MatInputModule, \n        MatNativeDateModule,\n        MatSelectModule, \n        ReactiveFormsModule\n    ],\n    exports : [\n        TaskFormComponent\n    ]\n})\nexport class TaskFormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksButtonBarModule.html":{"url":"modules/TasksButtonBarModule.html","title":"module - TasksButtonBarModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksButtonBarModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksButtonBarModule\n\n\n\ncluster_TasksButtonBarModule_declarations\n\n\n\ncluster_TasksButtonBarModule_imports\n\n\n\ncluster_TasksButtonBarModule_exports\n\n\n\n\nButtonBarComponent\n\nButtonBarComponent\n\n\n\nTasksButtonBarModule\n\nTasksButtonBarModule\n\nTasksButtonBarModule -->\n\nButtonBarComponent->TasksButtonBarModule\n\n\n\n\n\nButtonBarComponent \n\nButtonBarComponent \n\nButtonBarComponent  -->\n\nTasksButtonBarModule->ButtonBarComponent \n\n\n\n\n\nTasksButtonsModule\n\nTasksButtonsModule\n\nTasksButtonBarModule -->\n\nTasksButtonsModule->TasksButtonBarModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/button-bar/tasks-button-bar.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required for the button\nbar.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                ButtonBarComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    TasksButtonsModule\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    ButtonBarComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule, MatDialogModule, MatPaginatorModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckSquare } from '@fortawesome/free-regular-svg-icons';\nimport { faArrowLeft, faCheck, faEdit, faPaste, faTrash } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faArrowLeft, faCheck, faCheckSquare, faEdit, faPaste, faTrash);\n\n/* module */\nimport { ButtonBarComponent } from './button-bar.component';\nimport { TasksButtonsModule } from '@tasks/buttons/tasks-buttons.module'; \n\n/**\n * Defines the components, services, and modules required for the button\n * bar.\n */\n@NgModule({\n    declarations: [\n        ButtonBarComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatPaginatorModule,\n        RouterModule,\n\n        FontAwesomeModule,\n        \n        TasksButtonsModule\n    ],\n    exports : [\n        ButtonBarComponent\n    ]\n})\nexport class TasksButtonBarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksButtonsModule.html":{"url":"modules/TasksButtonsModule.html","title":"module - TasksButtonsModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksButtonsModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksButtonsModule\n\n\n\ncluster_TasksButtonsModule_declarations\n\n\n\ncluster_TasksButtonsModule_exports\n\n\n\n\nButtonsComponent\n\nButtonsComponent\n\n\n\nTasksButtonsModule\n\nTasksButtonsModule\n\nTasksButtonsModule -->\n\nButtonsComponent->TasksButtonsModule\n\n\n\n\n\nButtonsComponent \n\nButtonsComponent \n\nButtonsComponent  -->\n\nTasksButtonsModule->ButtonsComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/buttons/tasks-buttons.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required for main buttons\nto manage one or more Tasks. The main management capabilities for Tasks \ninclude completing, deleting, and editing.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                ButtonsComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    ButtonsComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckSquare } from '@fortawesome/free-regular-svg-icons';\nimport { faArrowLeft, faCheck, faEdit, faPaste, faTrash } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faArrowLeft, faCheck, faCheckSquare, faEdit, faPaste, faTrash);\n\n/* app */\nimport { ButtonsComponent } from '@tasks/buttons/buttons.component';\n\n/**\n * Defines the components, services, and modules required for main buttons\n * to manage one or more Tasks. The main management capabilities for Tasks \n * include completing, deleting, and editing.\n */\n@NgModule({\n    declarations: [\n        ButtonsComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        MatButtonModule,\n        MatDialogModule,\n        RouterModule,\n\n        FontAwesomeModule\n    ],\n    exports : [\n        ButtonsComponent\n    ]\n})\nexport class TasksButtonsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TasksComponent.html":{"url":"components/TasksComponent.html","title":"component - TasksComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TasksComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/tasks.component.ts\n\n\n    \n        Description\n    \n    \n        Creates the main layout for Tasks. The main layout currently\nconsists of the side menu and router-outlet.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                tasks-root\n            \n\n            \n                styleUrls\n                tasks.component.css\n            \n\n\n\n            \n                templateUrl\n                ./tasks.component.html\n            \n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * Creates the main layout for Tasks. The main layout currently\n * consists of the side menu and router-outlet.\n */\n@Component({\n    selector: 'tasks-root',\n    templateUrl: './tasks.component.html',\n    styleUrls: ['./tasks.component.css']\n})\nexport class TasksComponent {}\n\n    \n\n    \n        \n    \n        \n    \n    \n        \n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TasksComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksDialogModule.html":{"url":"modules/TasksDialogModule.html","title":"module - TasksDialogModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksDialogModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksDialogModule\n\n\n\ncluster_TasksDialogModule_imports\n\n\n\n\nCompleteTaskModule\n\nCompleteTaskModule\n\n\n\nTasksDialogModule\n\nTasksDialogModule\n\nTasksDialogModule -->\n\nCompleteTaskModule->TasksDialogModule\n\n\n\n\n\nConfirmDeleteTaskModule\n\nConfirmDeleteTaskModule\n\nTasksDialogModule -->\n\nConfirmDeleteTaskModule->TasksDialogModule\n\n\n\n\n\nTaskFormModule\n\nTaskFormModule\n\nTasksDialogModule -->\n\nTaskFormModule->TasksDialogModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/dialogs/tasks-dialog.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required for dialogs.\n\n            \n        \n\n        \n            \n                \n                    Imports\n                    \n                            \n                                    CompleteTaskModule\n                            \n                            \n                                    ConfirmDeleteTaskModule\n                            \n                            \n                                    TaskFormModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { NgModule } from '@angular/core';\n\n/* module */\nimport { CompleteTaskModule } from '@tasks/dialogs/complete-task/complete-task.module';\nimport { ConfirmDeleteTaskModule } from '@tasks/dialogs/confirm-delete-task/confirm-delete-task.module';\nimport { TaskFormModule } from '@tasks/form/task-form.module';\n\n/**\n * Defines the components, services, and modules required for dialogs.\n */\n@NgModule({\n    imports: [\n        /* app modules */\n        CompleteTaskModule,\n        ConfirmDeleteTaskModule,\n        TaskFormModule\n    ]\n})\nexport class TasksDialogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TasksFilterComponent.html":{"url":"components/TasksFilterComponent.html","title":"component - TasksFilterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TasksFilterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tasks/filter/tasks-filter.component.ts\n\n\n    \n        Description\n    \n    \n        Creates a small form with a single input element that contains a datepicker and\ncustom \"select\" functionality using a dropdown menu. The input element allows\nthe user to enter text or dates from the datepicker, and select a value from \nthe dropdown menu (over due, due today, or due tomorrow) to filter/search Tasks.\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnDestroy\n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                tasks-filter\n            \n\n            \n                styleUrls\n                tasks-filter.component.css\n            \n\n\n\n            \n                templateUrl\n                ./tasks-filter.component.html\n            \n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isMediumScreen\n                            \n                            \n                                sub\n                            \n                            \n                                taskFilterInput\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateTaskFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(taskService: TaskService, utilsService: UtilsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/filter/tasks-filter.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                    TaskService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilsService\n                                                  \n                                                        \n                                                                    UtilsService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clear\n                            \n                            \n                        \n                    \n                \n                \n                    \nclear()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:38\n                            \n                        \n\n\n                \n                    \n                            Clears the the input and the Task filter in the TaskService.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngAfterViewInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngAfterViewInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:66\n                            \n                        \n\n\n                \n                    \n                            Creates observables for taskFilterInput \"keyup\" event (when user is typing \ninto input element) and dueButtons \"click\" EventEmitter after the \ncomponent has been fully initialized. \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnDestroy\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnDestroy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:46\n                            \n                        \n\n\n                \n                    \n                            Unsubscribe from any subscriptions.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ngOnInit\n                            \n                            \n                        \n                    \n                \n                \n                    \nngOnInit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:53\n                            \n                        \n\n\n                \n                    \n                            Initialize the component\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateTaskFilter\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdateTaskFilter()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:86\n                            \n                        \n\n\n                \n                    \n                            Updates the taskFilter observable in the TaskService so that any elements\nlistening for a change to the filter can react accordingly. This method \nis used by the dateChange EventEmitter from the datepicker and the \"keyup\" \nevent defined for the taskFilterInput element. \n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMediumScreen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isMediumScreen:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:26\n                            \n                        \n\n                \n                    \n                        Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sub\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sub:     Subscription\n\n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:28\n                            \n                        \n\n                \n                    \n                        The subscriptions for the component. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taskFilterInput\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        taskFilterInput:     ElementRef\n\n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : ViewChild\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/filter/tasks-filter.component.ts:24\n                            \n                        \n\n                \n                    \n                        The input element to filter Tasks. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n/* app */\nimport { TaskService } from '@tasks/shared/services/task.service';\nimport { UtilsService } from '@tasks/shared/services/utils.service';\n\n/**\n * Creates a small form with a single input element that contains a datepicker and\n * custom \"select\" functionality using a dropdown menu. The input element allows\n * the user to enter text or dates from the datepicker, and select a value from \n * the dropdown menu (over due, due today, or due tomorrow) to filter/search Tasks.\n */\n@Component({\n    selector: 'tasks-filter',\n    templateUrl: './tasks-filter.component.html',\n    styleUrls: ['./tasks-filter.component.css']\n})\nexport class TasksFilterComponent implements AfterViewInit, OnDestroy, OnInit {\n\n    /** The input element to filter Tasks. */\n    @ViewChild('taskFilter') taskFilterInput: ElementRef;\n    /** Boolean to indicate if the screen size is medium or smaller (true if screen is medium or smaller). */\n    isMediumScreen: boolean;\n    /** The subscriptions for the component. */\n    sub: Subscription;\n\n    constructor(\n        private taskService: TaskService,\n        private utilsService: UtilsService\n    ) {}\n\n    /**\n     * Clears the the input and the Task filter in the TaskService.\n     */\n    clear() {\n        this.taskFilterInput.nativeElement.value = '';\n        this.updateTaskFilter();\n    }\n\n    /**\n     * Unsubscribe from any subscriptions.\n     */\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    /**\n     * Initialize the component\n     */\n    ngOnInit() {\n        this.sub = new Subscription();\n        const sub = this.utilsService.isMediumScreen.subscribe((isMediumScreen: boolean) => {\n            this.isMediumScreen = isMediumScreen;\n        });\n        this.sub.add(sub);\n    }\n\n    /**\n     * Creates observables for taskFilterInput \"keyup\" event (when user is typing \n     * into input element) and dueButtons \"click\" EventEmitter after the \n     * component has been fully initialized. \n     */\n    ngAfterViewInit() {\n        // create observable for the \"keyup\" event on the main input element but\n        // delay values emitted to prevent server overload (with debouceTime) and\n        // only emit when the current value is different from the last\n        fromEvent(this.taskFilterInput.nativeElement,'keyup')\n            .pipe(\n                debounceTime(150),\n                distinctUntilChanged()\n            ).subscribe(() => {\n                // update task filter observable in TaskService\n                this.updateTaskFilter();\n            });\n    }\n\n    /**\n     * Updates the taskFilter observable in the TaskService so that any elements\n     * listening for a change to the filter can react accordingly. This method \n     * is used by the dateChange EventEmitter from the datepicker and the \"keyup\" \n     * event defined for the taskFilterInput element. \n     */\n    updateTaskFilter() {\n        this.taskService.setTaskFilter(this.taskFilterInput.nativeElement.value);\n    }\n}\n\n    \n\n    \n        \n    \n         Search tasks \n          \n        \n        \n            \n        \n    \n      \n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '             Search tasks                                                         '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'about'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ButtonBarComponent', 'selector': 'button-bar'},{'name': 'ButtonsComponent', 'selector': 'buttons'},{'name': 'CompleteTaskComponent', 'selector': 'complete-task'},{'name': 'CompleteTasksTableComponent', 'selector': 'complete-tasks-table'},{'name': 'ConfirmDeleteTaskComponent', 'selector': 'confirm-delete'},{'name': 'CreateTaskComponent', 'selector': 'create-task'},{'name': 'EditTaskComponent', 'selector': 'edit-task'},{'name': 'FooterComponent', 'selector': 'app-footer'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ListItemComponent', 'selector': 'list-item'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PendingTasksTableComponent', 'selector': 'pending-tasks-table'},{'name': 'RecurringTaskComponent', 'selector': 'recurring-task'},{'name': 'SidenavTasksComponent', 'selector': 'sidenav-tasks'},{'name': 'TaskFormComponent', 'selector': 'task-form'},{'name': 'TasksComponent', 'selector': 'tasks-root'},{'name': 'TasksFilterComponent', 'selector': 'tasks-filter'},{'name': 'TasksTableComponent', 'selector': 'tasks-table'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TasksFilterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksFilterModule.html":{"url":"modules/TasksFilterModule.html","title":"module - TasksFilterModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksFilterModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksFilterModule\n\n\n\ncluster_TasksFilterModule_declarations\n\n\n\ncluster_TasksFilterModule_exports\n\n\n\n\nTasksFilterComponent\n\nTasksFilterComponent\n\n\n\nTasksFilterModule\n\nTasksFilterModule\n\nTasksFilterModule -->\n\nTasksFilterComponent->TasksFilterModule\n\n\n\n\n\nTasksFilterComponent \n\nTasksFilterComponent \n\nTasksFilterComponent  -->\n\nTasksFilterModule->TasksFilterComponent \n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/filter/tasks-filter.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to filter Tasks.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                TasksFilterComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                TasksFilterComponent\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    TasksFilterComponent\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule, MatDatepickerModule, MatFormFieldModule, MatInputModule, MatNativeDateModule, MatTooltipModule } from '@angular/material';\n\n/* fontawesome */\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to library for convenient access in components\nlibrary.add(faSearch, faTimes);\n\n/* module */\nimport { TasksFilterComponent } from '@tasks/filter/tasks-filter.component';\n\n/**\n * Defines the components, services, and modules required to filter Tasks.\n */\n@NgModule({\n    declarations: [\n        TasksFilterComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        MatButtonModule, \n        MatDatepickerModule, \n        MatFormFieldModule,\n        MatInputModule, \n        MatNativeDateModule,\n        MatTooltipModule, \n\n        FontAwesomeModule\n    ],\n    exports: [\n        TasksFilterComponent\n    ],\n    entryComponents: [\n        TasksFilterComponent\n    ]\n})\nexport class TasksFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_declarations\n\n\n\ncluster_TasksModule_imports\n\n\n\n\nTasksComponent\n\nTasksComponent\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksComponent->TasksModule\n\n\n\n\n\nEditTaskModule\n\nEditTaskModule\n\nTasksModule -->\n\nEditTaskModule->TasksModule\n\n\n\n\n\nSidenavTasksModule\n\nSidenavTasksModule\n\nTasksModule -->\n\nSidenavTasksModule->TasksModule\n\n\n\n\n\nTasksRoutingModule\n\nTasksRoutingModule\n\nTasksModule -->\n\nTasksRoutingModule->TasksModule\n\n\n\n\n\nTasksTableModule\n\nTasksTableModule\n\nTasksModule -->\n\nTasksTableModule->TasksModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/tasks.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to create and\nmanage Tasks.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                TasksComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    EditTaskModule\n                            \n                            \n                                    SidenavTasksModule\n                            \n                            \n                                    TasksRoutingModule\n                            \n                            \n                                    TasksTableModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatSidenavModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\n/* module */\nimport { TasksComponent } from './tasks.component';\nimport { TasksRoutingModule } from './tasks.routing';\nimport { EditTaskModule } from '@tasks/edit/edit-task.module';\nimport { TaskService } from '@tasks/shared/services/task.service';\nimport { UtilsService } from '@tasks/shared/services/utils.service';\nimport { SidenavTasksModule } from '@tasks/sidenav/sidenav-tasks.module';\nimport { TasksTableModule } from '@tasks/table/tasks-table.module';\n\n/**\n * Defines the components, services, and modules required to create and\n * manage Tasks.\n */\n@NgModule({\n    declarations: [\n        TasksComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatSidenavModule,\n        ReactiveFormsModule,\n        RouterModule,\n\n        /* Task modules */\n        EditTaskModule,\n        TasksRoutingModule,\n        TasksTableModule,\n        SidenavTasksModule,\n    ]\n})\nexport class TasksModule {\n\n    /**\n     * Returns a wrapper around this module that associates it with the\n     * TaskService and UtilsService providers so a single instance of each\n     * service can be loaded and shared between any modules in the app.\n     */\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TasksModule,\n            providers: [\n                TaskService,\n                UtilsService\n            ]\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksRoutingModule.html":{"url":"modules/TasksRoutingModule.html","title":"module - TasksRoutingModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksRoutingModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/tasks.routing.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/* Task module components */\nimport { EditTaskComponent } from '@tasks/edit/edit-task.component';\nimport { CompleteTasksTableComponent } from '@tasks/table/complete-tasks-table.component';\nimport { PendingTasksTableComponent } from '@tasks/table/pending-tasks-table.component';\nimport { TasksComponent } from '@tasks/tasks.component';\n\n/* The routes within the Tasks module. Defaults to the PendingTasksTableComponent. */\nconst routes: Routes = [\n    {\n        path: 'tasks',\n        component: TasksComponent,\n        children: [\n            {\n                path:'pending',\n                component: PendingTasksTableComponent\n            },\n            {\n                path:'complete',\n                component: CompleteTasksTableComponent\n            },\n            {\n                path: '',\n                pathMatch: 'full',\n                redirectTo: 'pending'\n            },\n            {\n                path:':id',\n                component: EditTaskComponent,              \n            }\n        ]\n    }\n];\n\n/**\n * The router module for the Tasks module.\n */\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class TasksRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksTableModule.html":{"url":"modules/TasksTableModule.html","title":"module - TasksTableModule","body":"\n                   \n\n\n\n\n  Modules\n  TasksTableModule\n\n\n      \n          \n              \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksTableModule\n\n\n\ncluster_TasksTableModule_declarations\n\n\n\ncluster_TasksTableModule_imports\n\n\n\n\nCompleteTasksTableComponent\n\nCompleteTasksTableComponent\n\n\n\nTasksTableModule\n\nTasksTableModule\n\nTasksTableModule -->\n\nCompleteTasksTableComponent->TasksTableModule\n\n\n\n\n\nPendingTasksTableComponent\n\nPendingTasksTableComponent\n\nTasksTableModule -->\n\nPendingTasksTableComponent->TasksTableModule\n\n\n\n\n\nTasksTableComponent\n\nTasksTableComponent\n\nTasksTableModule -->\n\nTasksTableComponent->TasksTableModule\n\n\n\n\n\nTasksButtonBarModule\n\nTasksButtonBarModule\n\nTasksTableModule -->\n\nTasksButtonBarModule->TasksTableModule\n\n\n\n\n\nTasksButtonsModule\n\nTasksButtonsModule\n\nTasksTableModule -->\n\nTasksButtonsModule->TasksTableModule\n\n\n\n\n\nTasksDialogModule\n\nTasksDialogModule\n\nTasksTableModule -->\n\nTasksDialogModule->TasksTableModule\n\n\n\n\n\n\n          \n          \n          \n              Zoom in\n              Reset\n              Zoom out\n          \n      \n      \n      \n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/tasks/table/tasks-table.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines the components, services, and modules required to manage and view\nTasks.\n\n            \n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                CompleteTasksTableComponent\n                            \n                            \n                                PendingTasksTableComponent\n                            \n                            \n                                TasksTableComponent\n                            \n                    \n                \n                \n                    EntryComponents\n                    \n                            \n                                CompleteTasksTableComponent\n                            \n                            \n                                PendingTasksTableComponent\n                            \n                    \n                \n                \n                    Imports\n                    \n                            \n                                    TasksButtonBarModule\n                            \n                            \n                                    TasksButtonsModule\n                            \n                            \n                                    TasksDialogModule\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        /* angular libraries */\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule, MatCheckboxModule, MatPaginatorModule, MatProgressSpinnerModule, MatSortModule, MatTableModule, MatSnackBarModule } from '@angular/material';\nimport { RouterModule } from '@angular/router';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckSquare } from '@fortawesome/free-regular-svg-icons';\nimport { faAngleUp, faCheck, faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\n\n// Add icons to fortawesome/fontawesome-svg-core library for convenient access in components\nlibrary.add(faAngleUp, faCheck, faCheckSquare, faEdit, faTrash);\n\n/* components */\nimport { CompleteTasksTableComponent } from '@tasks/table/complete-tasks-table.component';\nimport { PendingTasksTableComponent } from '@tasks/table/pending-tasks-table.component';\nimport { TasksTableComponent } from '@tasks/table/tasks-table.component';\n\n/* Task modules */\nimport { TasksButtonBarModule } from '@tasks/button-bar/tasks-button-bar.module';\nimport { TasksButtonsModule } from '@tasks/buttons/tasks-buttons.module';\nimport { TasksDialogModule } from '@tasks/dialogs/tasks-dialog.module';\n\n/**\n * Defines the components, services, and modules required to manage and view\n * Tasks.\n */\n@NgModule({\n    declarations: [\n        CompleteTasksTableComponent,\n        PendingTasksTableComponent,\n        TasksTableComponent\n    ],\n    imports: [\n        /* angular libraries */\n        CommonModule,\n        FlexLayoutModule,\n        FormsModule,\n        MatButtonModule, \n        MatCheckboxModule,\n        MatPaginatorModule, \n        MatProgressSpinnerModule, \n        MatSortModule, \n        MatTableModule, \n        MatSnackBarModule,\n        ReactiveFormsModule,\n        RouterModule,\n\n        FontAwesomeModule,\n\n        /* Task modules */\n        TasksButtonBarModule,\n        TasksButtonsModule,\n        TasksDialogModule\n    ],\n    entryComponents: [\n        CompleteTasksTableComponent,\n        PendingTasksTableComponent,\n    ]\n})\nexport class TasksTableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilsService.html":{"url":"injectables/UtilsService.html","title":"injectable - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n  Injectables\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/tasks/shared/services/utils.service.ts\n        \n\n            \n                Description\n            \n            \n                Manages utility methods that can be shared across components.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _sidenavMenuChanges\n                            \n                            \n                                    Readonly\n                                isMediumScreen\n                            \n                            \n                                    Protected\n                                isMediumScreenSource\n                            \n                            \n                                    Readonly\n                                sidenavMenuChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fullScreenDialogSub\n                            \n                            \n                                toggleSidenavMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(breakpointObserver: BreakpointObserver, logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/tasks/shared/services/utils.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        breakpointObserver\n                                                  \n                                                        \n                                                                    BreakpointObserver\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fullScreenDialogSub\n                            \n                            \n                        \n                    \n                \n                \n                    \nfullScreenDialogSub(dialogRef: MatDialogRef, largeSize: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/shared/services/utils.service.ts:48\n                            \n                        \n\n\n                \n                    \n                            Sets the given dialog to full screen on medium or small devices.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dialogRef\n                                                        \n                                                                    MatDialogRef\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                        \n                                                                The dialog to update. \n\n                                                        \n                                                \n                                                \n                                                        largeSize\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                '70%'\n                                                        \n\n                                                        \n                                                                The width and height to set for large screens.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toggleSidenavMenu\n                            \n                            \n                        \n                    \n                \n                \n                    \ntoggleSidenavMenu(event: SidenavMenuEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/app/tasks/shared/services/utils.service.ts:68\n                            \n                        \n\n\n                \n                    \n                            Updates the sidenav menu state.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    SidenavMenuEvent\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                The state to set the sidenav menu to. \n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            _sidenavMenuChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _sidenavMenuChanges:     \n\n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/services/utils.service.ts:22\n                            \n                        \n\n                \n                    \n                        Tracks the state of the sidenav menu (Collapse or Expand). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            isMediumScreen\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isMediumScreen:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/services/utils.service.ts:24\n                            \n                        \n\n                \n                    \n                        Observable for whether the screen is medium or smaller (true if medium or smaller, otherwise false). \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            isMediumScreenSource\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isMediumScreenSource:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/services/utils.service.ts:20\n                            \n                        \n\n                \n                    \n                        Tracks whether the screen is medium or smaller. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sidenavMenuChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sidenavMenuChanges:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                    \n                        \n                            Default value : this._sidenavMenuChanges\n                        \n                    \n                        \n                            \n                                    Defined in src/app/tasks/shared/services/utils.service.ts:26\n                            \n                        \n\n                \n                    \n                        Observale for changes to the sidenav. \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Breakpoints, BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { MatDialogRef } from '@angular/material';\nimport { BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';\n\n/* app */\nimport { LoggerService } from 'app/core/services/logger.service';\n\n/* The optional states of the sidenav. */\nexport type SidenavMenuEvent = \"Collapse\" | \"Expand\"\n\n/**\n * Manages utility methods that can be shared across components.\n */\n@Injectable()\nexport class UtilsService {\n\n    /** Tracks whether the screen is medium or smaller. */\n    protected isMediumScreenSource: BehaviorSubject;\n    /** Tracks the state of the sidenav menu (Collapse or Expand). */\n    protected _sidenavMenuChanges = new Subject();\n    /** Observable for whether the screen is medium or smaller (true if medium or smaller, otherwise false). */\n    readonly isMediumScreen: Observable;\n    /** Observale for changes to the sidenav. */\n    readonly sidenavMenuChanges: Observable = this._sidenavMenuChanges;\n\n    constructor(private breakpointObserver: BreakpointObserver, private logger: LoggerService) {\n        this.isMediumScreenSource = new BehaviorSubject(false);\n        this.isMediumScreen = this.isMediumScreenSource.asObservable();\n        \n        // add a subscription to the breakpointObserver so the isMediumScreenSource\n        // can be updated when the screen size changes.\n        this.breakpointObserver\n            .observe([Breakpoints.Handset, Breakpoints.Small])\n            .subscribe((size: BreakpointState) => {\n                this.logger.info(`UtilsService: screen size ${ size.matches ? 'small to medium' : 'large' }`);\n                this.isMediumScreenSource.next(size.matches);\n            });\n    }\n\n    /**\n     * Sets the given dialog to full screen on medium or small devices.\n     * \n     * @param dialogRef The dialog to update. \n     * @param largeSize The width and height to set for large screens.\n     */\n    fullScreenDialogSub(dialogRef: MatDialogRef, largeSize: string = '70%'): void {\n        const sub: Subscription = this.isMediumScreen.subscribe((isMediumScreen: boolean) => {\n            if(isMediumScreen) {\n                dialogRef.updateSize('100%', '100%');\n            }\n            else {\n                dialogRef.updateSize(largeSize);\n            }\n        });\n\n        dialogRef.afterClosed().subscribe(() => {\n            sub.unsubscribe();\n        });\n    }\n\n    /**\n     * Updates the sidenav menu state.\n     * \n     * @param event The state to set the sidenav menu to. \n     */\n    toggleSidenavMenu(event: SidenavMenuEvent) {\n        this._sidenavMenuChanges.next(event);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                    src/app/about/about.component.ts\n            \n            \n                component\n            \n            \n                AboutComponent\n            \n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                    src/app/app.component.ts\n            \n            \n                component\n            \n            \n                AppComponent\n            \n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                    src/app/components/page-not-found/page-not-found.component.ts\n            \n            \n                component\n            \n            \n                PageNotFoundComponent\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/core/services/console-logger.service.ts\n            \n            \n                injectable\n            \n            \n                ConsoleLoggerService\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                    src/app/core/services/console-logger.service.ts\n            \n            \n                variable\n            \n            \n                noop\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/app/core/services/http.service.ts\n            \n            \n                injectable\n            \n            \n                HttpService\n            \n            \n                90 %\n                (10/11)\n            \n        \n        \n            \n                \n                    src/app/core/services/loader.service.ts\n            \n            \n                injectable\n            \n            \n                LoaderService\n            \n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                    src/app/core/services/loader.service.ts\n            \n            \n                interface\n            \n            \n                LoaderState\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                    src/app/core/services/logger.service.ts\n            \n            \n                class\n            \n            \n                Logger\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                    src/app/core/services/logger.service.ts\n            \n            \n                injectable\n            \n            \n                LoggerService\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                    src/app/footer/footer.component.ts\n            \n            \n                component\n            \n            \n                FooterComponent\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/app/header/header.component.ts\n            \n            \n                component\n            \n            \n                HeaderComponent\n            \n            \n                90 %\n                (10/11)\n            \n        \n        \n            \n                \n                    src/app/tasks/button-bar/button-bar.component.ts\n            \n            \n                component\n            \n            \n                ButtonBarComponent\n            \n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                    src/app/tasks/buttons/buttons.component.ts\n            \n            \n                component\n            \n            \n                ButtonsComponent\n            \n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                    src/app/tasks/dialogs/complete-task/complete-task.component.ts\n            \n            \n                component\n            \n            \n                CompleteTaskComponent\n            \n            \n                88 %\n                (15/17)\n            \n        \n        \n            \n                \n                    src/app/tasks/dialogs/confirm-delete-task/confirm-delete-task.component.ts\n            \n            \n                component\n            \n            \n                ConfirmDeleteTaskComponent\n            \n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                    src/app/tasks/dialogs/create-task/create-task.component.ts\n            \n            \n                component\n            \n            \n                CreateTaskComponent\n            \n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                    src/app/tasks/edit/edit-task.component.ts\n            \n            \n                component\n            \n            \n                EditTaskComponent\n            \n            \n                92 %\n                (23/25)\n            \n        \n        \n            \n                \n                    src/app/tasks/edit/recurring-task.component.ts\n            \n            \n                component\n            \n            \n                RecurringTaskComponent\n            \n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                    src/app/tasks/filter/tasks-filter.component.ts\n            \n            \n                component\n            \n            \n                TasksFilterComponent\n            \n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                    src/app/tasks/form/task-form.component.ts\n            \n            \n                component\n            \n            \n                TaskFormComponent\n            \n            \n                88 %\n                (15/17)\n            \n        \n        \n            \n                \n                    src/app/tasks/shared/models/task.model.ts\n            \n            \n                class\n            \n            \n                Task\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                    src/app/tasks/shared/services/task.service.ts\n            \n            \n                injectable\n            \n            \n                TaskService\n            \n            \n                100 %\n                (31/31)\n            \n        \n        \n            \n                \n                    src/app/tasks/shared/services/tasks.datasource.ts\n            \n            \n                class\n            \n            \n                TasksDataSource\n            \n            \n                86 %\n                (13/15)\n            \n        \n        \n            \n                \n                    src/app/tasks/shared/services/utils.service.ts\n            \n            \n                injectable\n            \n            \n                UtilsService\n            \n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                    src/app/tasks/shared/util/mat-paginator-custom.ts\n            \n            \n                injectable\n            \n            \n                MatPaginatorCustom\n            \n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                    src/app/tasks/sidenav/list-item.component.ts\n            \n            \n                component\n            \n            \n                ListItemComponent\n            \n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                    src/app/tasks/sidenav/sidenav-tasks.component.ts\n            \n            \n                component\n            \n            \n                SidenavTasksComponent\n            \n            \n                94 %\n                (16/17)\n            \n        \n        \n            \n                \n                    src/app/tasks/table/complete-tasks-table.component.ts\n            \n            \n                component\n            \n            \n                CompleteTasksTableComponent\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                    src/app/tasks/table/pending-tasks-table.component.ts\n            \n            \n                component\n            \n            \n                PendingTasksTableComponent\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                    src/app/tasks/table/tasks-table.component.ts\n            \n            \n                component\n            \n            \n                TasksTableComponent\n            \n            \n                96 %\n                (32/33)\n            \n        \n        \n            \n                \n                    src/app/tasks/tasks.component.ts\n            \n            \n                component\n            \n            \n                TasksComponent\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                    src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^6.0.9\n        \n            @angular/cdk : ^6.4.0\n        \n            @angular/common : ^6.0.9\n        \n            @angular/compiler : ^6.0.9\n        \n            @angular/core : ^6.0.9\n        \n            @angular/flex-layout : ^6.0.0-beta.16\n        \n            @angular/forms : ^6.0.9\n        \n            @angular/http : ^6.0.9\n        \n            @angular/material : ^6.4.0\n        \n            @angular/material-moment-adapter : ^6.4.0\n        \n            @angular/platform-browser : ^6.0.9\n        \n            @angular/platform-browser-dynamic : ^6.0.9\n        \n            @angular/router : ^6.0.9\n        \n            @fortawesome/angular-fontawesome : 0.1.0-10\n        \n            @fortawesome/fontawesome-svg-core : ^1.2.1\n        \n            @fortawesome/free-regular-svg-icons : ^5.1.1\n        \n            @fortawesome/free-solid-svg-icons : ^5.1.1\n        \n            core-js : ^2.5.7\n        \n            font-awesome : ^4.7.0\n        \n            hammerjs : ^2.0.8\n        \n            moment : ^2.22.2\n        \n            rxjs : ^6.2.2\n        \n            rxjs-compat : ^6.2.2\n        \n            zone.js : ^0.8.26\n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMyTasks\nMyTasks is a simple application meant to create and manage Tasks. Tasks are displayed in tables, separated by state (pending or complete), and can be filtered by name, description, priority, due date, and date completed (if complete). Pending tasks also have keyword filters and visual indicators for tasks over due (tasks with due date before todays date), tasks due today, and tasks due tomorrow. Tasks have a very simple repeating capability. They can repeat daily, weekly, monthly, or yearly, and they are related to each other through the nextId property which corresponds with the id of the next Task in the sequence.\nIt is a full stack application divided into an Angular client, Express API server,and SQLite database. The client is built using Angular 6 and Typescript, and leverages Angular Material 2 for most of the UI components. The UI is designed to be responsive, and meant to work across a variety of devices. Breakpoints from the angular CDK layout (Handset and Small) are used to determine what features are available on the screen. Smaller screen sizes have only been emulated through chrome devtools and have not been fully tested. The Express API server is built using Typescript, and utilizes the TypeORM package to handle storing data in a SQLite database.\nGetting Started\nTo download a copy of the project you must have GIT installed and configure on your machine. If you have GIT configured you may download the source code using the following command.\ngit clone https://github.com/Jonathan-S-Phillips/my-tasksInstalling and configuring GIT on your machine is outside the scope of this document, but a few helpful links are included below.\n\nGIT - Setup GIT\nClone Repo - Additional details on cloning GIT repo\n\nPrerequisites\nIn order to run the application you need to either have Docker Compose or Node installed and configured. The app was built on Windows using the following setup:\n\nDocker version 18.06.0-ce-win70 (19075)\nCompose 1.22.0\nNode version 8.9.1\nNPM version 6.2.0 \n\nInstalling and configuring Docker Compose and Node are outside the scope of this document but a few helpful links are included below.\n\nDocker Compose - Install Docker Compose\nNode - Install Node\n\nBuild and run\nYou can build and run the MyTasks application one of two ways.\n\nDocker Compose; or \nNode and NPM. \n\nDocker Compose\nIf you have Docker Compose configured for your system, then you can use the following command from the root or base directory of the application to build and run both the server and client containers for the app.\ndocker-compose up --buildThats it! It may take some time to setup and configure the containers depending on your connection speed. You may also see some warnings about npm packages, but they will not prevent the app from starting. The \"--build\" option is only required when building the containers for the first time or after any changes have been made to the code base or dependencies. You may skip to \"Running the tests\" if you do not need to setup the application using Node. \n**Side Note: I did have to run the below command at some point when I was building the app to sync the time with the server container because of time drift.\ndocker run --rm --privileged mytasks_server hwclock -sNode setup\nIf you have Node configured for your system, then you can use the npm scripts included at the root of the application to build and run the application. You can build each part of the app separately, but I have included scripts at the root to run both the server and client together. The first step to build and run the application directly in your environment is to install dependencies. You can use the following command from the root of the application to install all required dependencies for both the client and server.\nnpm run install-allIf you are running npm version 6, then you will see a few vulnerabilities from the dependencies for the client. You can run the following command from the base of the client app to fix one of the vulnerabilities.\nnpm audit fixThe remaining fixes include breaking changes, which have not been tested.\nOnce the dependencies are installed you can use the following command (again from the root of the application) which will build and run both the client and server together.\nnpm run startDevelopment Mode\nContinuing with the Node configuration, a script is included to start the application in development mode, which uses an in-memory version of the SQLite DB instead of persisting the DB to disk. The code is automatically set up to insert seed data from a JSON array into the DB when running the in-memory version. Run the following command to run the application in development mode.\nnpm run start:devAll e2e tests use the in-memory version of the SQLite DB, and the unit tests use the same JSON array data inserted into the in-memory DB.\nAccessing the app\nOnce the application is up and running you may access the client through a web browser at http://localhost:4200. The server is setup to listen on port 3000 and the main Tasks API is available at http://localhost:3000/api/tasks.\nRunning the tests\nThe application has both unit and e2e tests. The client is using karma and the server is using mocha and chai for unit tests. The e2e tests use protractor.\nUnit Tests\nThe unit tests for both the client and server can be run using the following command from the root of the application.\nnpm testA script is also included to generate coverage reports with the unit tests. Running the following command will run the unit tests and generate coverage reports as well.\nnpm run test:coverageSeparate coverage reports are generated for the client and the server using Istanbul Code Coverage. A coverage directory is added to both the client and server directories and the reports are added there. To view the reports browse to either the client or server, select the corresponding coverage directory, and open the index.html file found using your favorite browser.\ne2e Tests\nThe e2e tests can be run using the following command from the root of the application.\nnpm run e2eThis command will initialize the server and client, and execute the e2e tests against the app.\n** A Note on e2e tests: I have tested the base e2e script on several machines and they only seems to work consistently on relatively high powered processors. While the e2e tests will pass on slower processors, they will fail intermittently with async timeout exceptions. The only way I can seem to get e2e tests to pass more consistently on slower processors is using the \"headless\" chrome options. If you see failures while running the e2e tests then you might want to try running the headless e2e tests using the following command.\nnpm run e2e:headlessA third e2e test script is included which is meant to take screenshots of the application and various elements throughout the app for use in the AboutComponent of the app. The Microsoft Edge browser is the only browser that seems to work to take screenshots of individual elements, so the script uses Edge for the tests. Setting up the Edge browser for e2e tests requires manually downloading the webdriver. Instructions for setting this up are outside the scope of this document. If you have your system set up with the Edge webriver, then you may run the following command to take screenshots while the e2e tests are running.\nnpm run e2e:screenshotsIf you try to run the above command without setting up the Edge browser with protractor, then the script will fail.\nDocumentation\nDocumentation for the client and web API are included with the source in the /doc directory. Each documentation is included in its own directory (angular-client for the client; server for the API). Simply browse to the directory of the portion of the app you want to view the documentation for and open the main index.html file in your favotire browser. \nDocumentation for the client was built using Compodoc and documentation for the web API was built using apiDoc. TODO setup and add link to github pages version of docs.\nYou can run the following command to generate the documents for both the client and web API, which will update the /doc directory with the latest changes from the source .\nnpm run docBuilt With\n\nAngular - UI Components\nAngular Material 2 - Material Design components\nFont-Awesome - Icons\nExpress - web framework\nTypeORM - ORM for TypeScript\nSQLite - DB driver\nCompodoc - Angular project documentation\napiDoc - API documentation\n\nAuthors\n\n[Jonathan Phillips] - (https://github.com/Jonathan-S-Phillips)\n\nLicense\nThis project is licensed under the MIT License - see the LICENSE.md file for details\nAcknowledgments\nPrior to developing this app I had only worked with Angular, so it was an exciting challenge to learn how to set up and configure an Express API server. I also enjoyed learning about Docker containers and how to use Compose to define and run a multi-container Docker app. Also even though I have worked with Angular before, I was using a mix of Typescript, jQuery, and the Bootstrap UI framework. For the purposes of this app I decided to go with a solution built entirely in Typescript, which also gave me an opportunity to dive into Angular Material 2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AboutModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AboutRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompleteTaskModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfirmDeleteTaskModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CreateTaskModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EditTaskModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FooterModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HeaderModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SidenavTasksModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskFormModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksButtonBarModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksButtonsModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksDialogModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksFilterModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksTableModule\n                    \n                    \n                                \n                                    \n                                            Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n            \n                \n                    \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AboutModule\n\n\n\ncluster_AboutModule_declarations\n\n\n\ncluster_AboutModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_CompleteTaskModule\n\n\n\ncluster_CompleteTaskModule_declarations\n\n\n\ncluster_ConfirmDeleteTaskModule\n\n\n\ncluster_ConfirmDeleteTaskModule_declarations\n\n\n\ncluster_CreateTaskModule\n\n\n\ncluster_CreateTaskModule_declarations\n\n\n\ncluster_CreateTaskModule_imports\n\n\n\ncluster_EditTaskModule\n\n\n\ncluster_EditTaskModule_declarations\n\n\n\ncluster_EditTaskModule_imports\n\n\n\ncluster_EditTaskModule_providers\n\n\n\ncluster_FooterModule\n\n\n\ncluster_FooterModule_declarations\n\n\n\ncluster_FooterModule_exports\n\n\n\ncluster_HeaderModule\n\n\n\ncluster_HeaderModule_declarations\n\n\n\ncluster_HeaderModule_imports\n\n\n\ncluster_HeaderModule_exports\n\n\n\ncluster_SidenavTasksModule\n\n\n\ncluster_SidenavTasksModule_declarations\n\n\n\ncluster_SidenavTasksModule_exports\n\n\n\ncluster_TaskFormModule\n\n\n\ncluster_TaskFormModule_declarations\n\n\n\ncluster_TaskFormModule_exports\n\n\n\ncluster_TasksButtonBarModule\n\n\n\ncluster_TasksButtonBarModule_declarations\n\n\n\ncluster_TasksButtonBarModule_imports\n\n\n\ncluster_TasksButtonBarModule_exports\n\n\n\ncluster_TasksButtonsModule\n\n\n\ncluster_TasksButtonsModule_declarations\n\n\n\ncluster_TasksButtonsModule_exports\n\n\n\ncluster_TasksFilterModule\n\n\n\ncluster_TasksFilterModule_declarations\n\n\n\ncluster_TasksFilterModule_exports\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_declarations\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksTableModule\n\n\n\ncluster_TasksTableModule_declarations\n\n\n\n\nAboutComponent\n\nAboutComponent\n\n\n\nAboutModule\n\nAboutModule\n\nAboutModule -->\n\nAboutComponent->AboutModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAboutModule->AppModule\n\n\n\n\n\nAboutRoutingModule\n\nAboutRoutingModule\n\nAboutModule -->\n\nAboutRoutingModule->AboutModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nPageNotFoundComponent\n\nPageNotFoundComponent\n\nAppModule -->\n\nPageNotFoundComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nFooterModule\n\nFooterModule\n\nAppModule -->\n\nFooterModule->AppModule\n\n\n\n\n\nFooterComponent \n\nFooterComponent \n\nFooterComponent  -->\n\nFooterModule->FooterComponent \n\n\n\n\n\nHeaderModule\n\nHeaderModule\n\nAppModule -->\n\nHeaderModule->AppModule\n\n\n\n\n\nHeaderComponent \n\nHeaderComponent \n\nHeaderComponent  -->\n\nHeaderModule->HeaderComponent \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nCompleteTaskComponent\n\nCompleteTaskComponent\n\n\n\nCompleteTaskModule\n\nCompleteTaskModule\n\nCompleteTaskModule -->\n\nCompleteTaskComponent->CompleteTaskModule\n\n\n\n\n\nTasksDialogModule\n\nTasksDialogModule\n\nTasksDialogModule -->\n\nCompleteTaskModule->TasksDialogModule\n\n\n\n\n\nConfirmDeleteTaskComponent\n\nConfirmDeleteTaskComponent\n\n\n\nConfirmDeleteTaskModule\n\nConfirmDeleteTaskModule\n\nConfirmDeleteTaskModule -->\n\nConfirmDeleteTaskComponent->ConfirmDeleteTaskModule\n\n\n\nTasksDialogModule -->\n\nConfirmDeleteTaskModule->TasksDialogModule\n\n\n\n\n\nCreateTaskComponent\n\nCreateTaskComponent\n\n\n\nCreateTaskModule\n\nCreateTaskModule\n\nCreateTaskModule -->\n\nCreateTaskComponent->CreateTaskModule\n\n\n\n\n\nSidenavTasksModule\n\nSidenavTasksModule\n\nSidenavTasksModule -->\n\nCreateTaskModule->SidenavTasksModule\n\n\n\n\n\nTaskFormModule\n\nTaskFormModule\n\nCreateTaskModule -->\n\nTaskFormModule->CreateTaskModule\n\n\n\n\n\nEditTaskModule\n\nEditTaskModule\n\nEditTaskModule -->\n\nTaskFormModule->EditTaskModule\n\n\n\nTasksDialogModule -->\n\nTaskFormModule->TasksDialogModule\n\n\n\n\n\nTaskFormComponent \n\nTaskFormComponent \n\nTaskFormComponent  -->\n\nTaskFormModule->TaskFormComponent \n\n\n\n\n\nEditTaskComponent\n\nEditTaskComponent\n\nEditTaskModule -->\n\nEditTaskComponent->EditTaskModule\n\n\n\n\n\nRecurringTaskComponent\n\nRecurringTaskComponent\n\nEditTaskModule -->\n\nRecurringTaskComponent->EditTaskModule\n\n\n\nTasksModule -->\n\nEditTaskModule->TasksModule\n\n\n\n\n\nTasksButtonBarModule\n\nTasksButtonBarModule\n\nEditTaskModule -->\n\nTasksButtonBarModule->EditTaskModule\n\n\n\n\n\nButtonBarComponent \n\nButtonBarComponent \n\nButtonBarComponent  -->\n\nTasksButtonBarModule->ButtonBarComponent \n\n\n\n\n\nTasksTableModule\n\nTasksTableModule\n\nTasksTableModule -->\n\nTasksButtonBarModule->TasksTableModule\n\n\n\nEditTaskModule -->\n\nTasksDialogModule->EditTaskModule\n\n\n\nTasksTableModule -->\n\nTasksDialogModule->TasksTableModule\n\n\n\n\n\nMatPaginatorCustom\n\nMatPaginatorCustom\n\nEditTaskModule -->\n\nMatPaginatorCustom->EditTaskModule\n\n\n\n\n\nFooterComponent\n\nFooterComponent\n\nFooterModule -->\n\nFooterComponent->FooterModule\n\n\n\n\n\nHeaderComponent\n\nHeaderComponent\n\nHeaderModule -->\n\nHeaderComponent->HeaderModule\n\n\n\n\n\nTasksFilterModule\n\nTasksFilterModule\n\nHeaderModule -->\n\nTasksFilterModule->HeaderModule\n\n\n\n\n\nTasksFilterComponent \n\nTasksFilterComponent \n\nTasksFilterComponent  -->\n\nTasksFilterModule->TasksFilterComponent \n\n\n\n\n\nListItemComponent\n\nListItemComponent\n\nSidenavTasksModule -->\n\nListItemComponent->SidenavTasksModule\n\n\n\n\n\nSidenavTasksComponent\n\nSidenavTasksComponent\n\nSidenavTasksModule -->\n\nSidenavTasksComponent->SidenavTasksModule\n\n\n\nTasksModule -->\n\nSidenavTasksModule->TasksModule\n\n\n\n\n\nSidenavTasksComponent \n\nSidenavTasksComponent \n\nSidenavTasksComponent  -->\n\nSidenavTasksModule->SidenavTasksComponent \n\n\n\n\n\nTaskFormComponent\n\nTaskFormComponent\n\nTaskFormModule -->\n\nTaskFormComponent->TaskFormModule\n\n\n\n\n\nButtonBarComponent\n\nButtonBarComponent\n\nTasksButtonBarModule -->\n\nButtonBarComponent->TasksButtonBarModule\n\n\n\n\n\nTasksButtonsModule\n\nTasksButtonsModule\n\nTasksButtonBarModule -->\n\nTasksButtonsModule->TasksButtonBarModule\n\n\n\n\n\nButtonsComponent \n\nButtonsComponent \n\nButtonsComponent  -->\n\nTasksButtonsModule->ButtonsComponent \n\n\n\nTasksTableModule -->\n\nTasksButtonsModule->TasksTableModule\n\n\n\n\n\nButtonsComponent\n\nButtonsComponent\n\nTasksButtonsModule -->\n\nButtonsComponent->TasksButtonsModule\n\n\n\n\n\nTasksFilterComponent\n\nTasksFilterComponent\n\nTasksFilterModule -->\n\nTasksFilterComponent->TasksFilterModule\n\n\n\n\n\nTasksComponent\n\nTasksComponent\n\nTasksModule -->\n\nTasksComponent->TasksModule\n\n\n\n\n\nTasksRoutingModule\n\nTasksRoutingModule\n\nTasksModule -->\n\nTasksRoutingModule->TasksModule\n\n\n\nTasksModule -->\n\nTasksTableModule->TasksModule\n\n\n\n\n\nCompleteTasksTableComponent\n\nCompleteTasksTableComponent\n\nTasksTableModule -->\n\nCompleteTasksTableComponent->TasksTableModule\n\n\n\n\n\nPendingTasksTableComponent\n\nPendingTasksTableComponent\n\nTasksTableModule -->\n\nPendingTasksTableComponent->TasksTableModule\n\n\n\n\n\nTasksTableComponent\n\nTasksTableComponent\n\nTasksTableModule -->\n\nTasksTableComponent->TasksTableModule\n\n\n\n\n\n\n                \n                \n                \n                    Zoom in\n                    Reset\n                    Zoom out\n                \n            \n\n    \n            \n                \n                    \n                        \n                        \n                            20 modules\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        20 components\n                    \n                \n            \n            \n                \n                    \n                        \n                        7 injectables\n                    \n                \n            \n            \n                \n                    \n                        \n                        3 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 interface\n                    \n                \n            \n            \n                \n                    \n                        \n                        \n                            10 routes\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PriorityTypes   (src/.../task.model.ts)\n                        \n                        \n                            SidenavMenuEvent   (src/.../utils.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/tasks/shared/models/task.model.ts\n    \n        \n            \n                \n                    \n                        \n                        PriorityTypes\n                    \n                \n                    \n                        \n                            The priority types available for a Task. \n\n                        \n                    \n                \n                    \n                        PriorityTypes:     \"Low\" | \"Medium\" | \"High\" | \"Urgent\"\n\n                    \n                \n            \n        \n\n    src/app/tasks/shared/services/utils.service.ts\n    \n        \n            \n                \n                    \n                        \n                        SidenavMenuEvent\n                    \n                \n                \n                    \n                        SidenavMenuEvent:     \"Collapse\" | \"Expand\"\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            noop   (src/.../console-logger.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/core/services/console-logger.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            noop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        noop:     \n\n                    \n                \n                    \n                        \n                            Default value : (): any => undefined\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
